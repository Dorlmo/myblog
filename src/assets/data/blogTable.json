[{"tableName":"参考八股文","blogList":[{"name":"代码结果输出","path":"参考八股文/代码结果输出.html","texts":"前言：\n\n代码输出结果是面试中常考的题目，一段代码中可能涉及到很多的知识点，这就考察到了应聘者的基础能力。在前端面试中，常考的代码输出问题主要涉及到以下知识点：异步编程、事件循环、this指向、作用域、变量提升、闭包、原型、继承等，这些知识点往往不是单独出现的，而是在同一段代码中包含多个知识点。所以，笔者将这些问题大致分为四类进行讨论。这里不会系统的阐述基础知识，而是通过面试例题的形式，来讲述每个题目的知识点以及代码的执行过程。如果会了这些例题，在前端面试中多数代码输出问题就可以轻而易举的解决了。\n\n\n一、异步&事件循环\n\n\n1. 代码输出结果\n\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  console.log(2);\n});\npromise.then(() => {\n  console.log(3);\n});\nconsole.log(4);\n\n\n输出结果如下：\n\n1 \n2 \n4\n\n\npromise.then\n是微任务，它会在所有的宏任务执行完之后才会执行，同时需要promise内部的状态发生变化，因为这里内部没有发生变化，一直处于pending状态，所以不输出3。\n\n\n2. 代码输出结果\n\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n  resolve('resolve1')\n})\nconst promise2 = promise1.then(res => {\n  console.log(res)\n})\nconsole.log('1', promise1);\nconsole.log('2', promise2);\n\n\n输出结果如下：\n\npromise1\n1 Promise{<resolved>: resolve1}\n2 Promise{<pending>}\nresolve1\n\n\n需要注意的是，直接打印promise1，会打印出它的状态值和参数。\n\n代码执行过程如下：\n\n 1. script是一个宏任务，按照顺序执行这些代码；\n 2. 首先进入Promise，执行该构造函数中的代码，打印promise1；\n 3. 碰到resolve函数, 将promise1的状态改变为resolved, 并将结果保存下来；\n 4. 碰到promise1.then这个微任务，将它放入微任务队列；\n 5. promise2是一个新的状态为pending的Promise；\n 6. 执行同步代码1， 同时打印出promise1的状态是resolved；\n 7. 执行同步代码2，同时打印出promise2的状态是pending；\n 8. 宏任务执行完毕，查找微任务队列，发现promise1.then这个微任务且状态为resolved，执行它。\n\n\n3. 代码输出结果\n\nconst promise = new Promise((resolve, reject) => {\n  console.log(1);\n  setTimeout(() => {\n    console.log(\"timerStart\");\n    resolve(\"success\");\n    console.log(\"timerEnd\");\n  }, 0);\n  console.log(2);\n});\npromise.then((res) => {\n  console.log(res);\n});\nconsole.log(4);\n\n\n输出结果如下：\n\n1\n2\n4\ntimerStart\ntimerEnd\nsuccess\n\n\n代码执行过程如下：\n\n * 首先遇到Promise构造函数，会先执行里面的内容，打印1；\n * 遇到定时器steTimeout，它是一个宏任务，放入宏任务队列；\n * 继续向下执行，打印出2；\n * 由于Promise的状态此时还是pending，所以promise.then先不执行；\n * 继续执行下面的同步任务，打印出4；\n * 此时微任务队列没有任务，继续执行下一轮宏任务，执行steTimeout；\n * 首先执行timerStart，然后遇到了resolve，将promise的状态改为resolved且保存结果并将之前的promise.then推入微任务队列，再执行timerEnd；\n * 执行完这个宏任务，就去执行微任务promise.then，打印出resolve的结果。\n\n\n4. 代码输出结果\n\nPromise.resolve().then(() => {\n  console.log('promise1');\n  const timer2 = setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n});\nconst timer1 = setTimeout(() => {\n  console.log('timer1')\n  Promise.resolve().then(() => {\n    console.log('promise2')\n  })\n}, 0)\nconsole.log('start');\n\n\n输出结果如下：\n\nstart\npromise1\ntimer1\npromise2\ntimer2\n\n\n代码执行过程如下：\n\n 1. 首先，Promise.resolve().then是一个微任务，加入微任务队列\n 2. 执行timer1，它是一个宏任务，加入宏任务队列\n 3. 继续执行下面的同步代码，打印出start\n 4. 这样第一轮宏任务就执行完了，开始执行微任务Promise.resolve().then，打印出promise1\n 5. 遇到timer2，它是一个宏任务，将其加入宏任务队列，此时宏任务队列有两个任务，分别是timer1、timer2；\n 6. 这样第一轮微任务就执行完了，开始执行第二轮宏任务，首先执行定时器timer1，打印timer1；\n 7. 遇到Promise.resolve().then，它是一个微任务，加入微任务队列\n 8. 开始执行微任务队列中的任务，打印promise2；\n 9. 最后执行宏任务timer2定时器，打印出timer2；\n\n\n5. 代码输出结果\n\nconst promise = new Promise((resolve, reject) => {\n    resolve('success1');\n    reject('error');\n    resolve('success2');\n});\npromise.then((res) => {\n    console.log('then:', res);\n}).catch((err) => {\n    console.log('catch:', err);\n})\n\n\n输出结果如下：\n\nthen：success1\n\n\n这个题目考察的就是Promise的状态在发生变化之后，就不会再发生变化。开始状态由pending变为resolve，说明已经变为已完成状态，下面的两个状态的就不会再执行，同时下面的catch也不会捕获到错误。\n\n\n6. 代码输出结果\n\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n\n\n输出结果如下：\n\n1\nPromise {<fulfilled>: undefined}\n\n\nPromise.resolve方法的参数如果是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为resolved，Promise.resolve方法的参数，会同时传给回调函数。\n\nthen方法接受的参数是函数，而如果传递的并非是一个函数，它实际上会将其解释为then(null)，这就会导致前一个Promise的结果会传递下面。\n\n\n7. 代码输出结果\n\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('success')\n  }, 1000)\n})\nconst promise2 = promise1.then(() => {\n  throw new Error('error!!!')\n})\nconsole.log('promise1', promise1)\nconsole.log('promise2', promise2)\nsetTimeout(() => {\n  console.log('promise1', promise1)\n  console.log('promise2', promise2)\n}, 2000)\n\n\n输出结果如下：\n\npromise1 Promise {<pending>}\npromise2 Promise {<pending>}\n\nUncaught (in promise) Error: error!!!\npromise1 Promise {<fulfilled>: \"success\"}\npromise2 Promise {<rejected>: Error: error!!}\n\n\n\n8. 代码输出结果\n\nPromise.resolve(1)\n  .then(res => {\n    console.log(res);\n    return 2;\n  })\n  .catch(err => {\n    return 3;\n  })\n  .then(res => {\n    console.log(res);\n  });\n\n\n输出结果如下：\n\n1   \n2\n\n\nPromise是可以链式调用的，由于每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用,\n它并不像一般任务的链式调用一样return this。\n\n上面的输出结果之所以依次打印出1和2，是因为resolve(1)之后走的是第一个then方法，并没有进catch里，所以第二个then中的res得到的实际上是第一个then的返回值。并且return\n2会被包装成resolve(2)，被最后的then打印输出2。\n\n\n9. 代码输出结果\n\nPromise.resolve().then(() => {\n  return new Error('error!!!')\n}).then(res => {\n  console.log(\"then: \", res)\n}).catch(err => {\n  console.log(\"catch: \", err)\n})\n\n\n输出结果如下：\n\n\"then: \" \"Error: error!!!\"\n\n\n返回任意一个非 promise 的值都会被包裹成 promise 对象，因此这里的return new\nError('error!!!')也被包裹成了return Promise.resolve(new\nError('error!!!'))，因此它会被then捕获而不是catch。\n\n\n10. 代码输出结果\n\nconst promise = Promise.resolve().then(() => {\n  return promise;\n})\npromise.catch(console.err)\n\n\n输出结果如下：\n\nUncaught (in promise) TypeError: Chaining cycle detected for promise #<Promise>\n\n\n这里其实是一个坑，.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。\n\n\n11. 代码输出结果\n\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log)\n\n\n输出结果如下：\n\n1\n\n\n看到这个题目，好多的then，实际上只需要记住一个原则：.then 或.catch 的参数期望是函数，传入非函数则会发生值透传。\n\n第一个then和第二个then中传入的都不是函数，一个是数字，一个是对象，因此发生了透传，将resolve(1) 的值直接传到最后一个then里，直接打印出1。\n\n\n12. 代码输出结果\n\nPromise.reject('err!!!')\n  .then((res) => {\n    console.log('success', res)\n  }, (err) => {\n    console.log('error', err)\n  }).catch(err => {\n    console.log('catch', err)\n  })\n\n\n输出结果如下：\n\nerror err!!!\n\n\n我们知道，.then函数中的两个参数：\n\n * 第一个参数是用来处理Promise成功的函数\n * 第二个则是处理失败的函数\n\n也就是说Promise.resolve('1')的值会进入成功的函数，Promise.reject('2')的值会进入失败的函数。\n\n在这道题中，错误直接被then的第二个参数捕获了，所以就不会被catch捕获了，输出结果为：error err!!!'\n\n但是，如果是像下面这样：\n\nPromise.resolve()\n  .then(function success (res) {\n    throw new Error('error!!!')\n  }, function fail1 (err) {\n    console.log('fail1', err)\n  }).catch(function fail2 (err) {\n    console.log('fail2', err)\n  })\n\n\n在then的第一参数中抛出了错误，那么他就不会被第二个参数不活了，而是被后面的catch捕获到。\n\n\n13. 代码输出结果\n\nPromise.resolve('1')\n  .then(res => {\n    console.log(res)\n  })\n  .finally(() => {\n    console.log('finally')\n  })\nPromise.resolve('2')\n  .finally(() => {\n    console.log('finally2')\n      return '我是finally2返回的值'\n  })\n  .then(res => {\n    console.log('finally2后面的then函数', res)\n  })\n\n\n输出结果如下：\n\n1\nfinally2\nfinally\nfinally2后面的then函数 2\n\n\n.finally()一般用的很少，只要记住以下几点就可以了：\n\n * .finally()方法不管Promise对象最后的状态如何都会执行\n * .finally()方法的回调函数不接受任何的参数，也就是说你在.finally()函数中是无法知道Promise最终的状态是resolved还是rejected的\n * 它最终返回的默认会是一个上一次的Promise对象值，不过如果抛出的是一个异常则返回异常的Promise对象。\n * finally本质上是then方法的特例\n\n.finally()的错误捕获：\n\nPromise.resolve('1')\n  .finally(() => {\n    console.log('finally1')\n    throw new Error('我是finally中抛出的异常')\n  })\n  .then(res => {\n    console.log('finally后面的then函数', res)\n  })\n  .catch(err => {\n    console.log('捕获错误', err)\n  })\n\n\n输出结果为：\n\n'finally1'\n'捕获错误' Error: 我是finally中抛出的异常\n\n\n\n14. 代码输出结果\n\nfunction runAsync (x) {\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n    return p\n}\n\nPromise.all([runAsync(1), runAsync(2), runAsync(3)]).then(res => console.log(res))\n\n\n输出结果如下：\n\n1\n2\n3\n[1, 2, 3]\n\n\n首先，定义了一个Promise，来异步执行函数runAsync，该函数传入一个值x，然后间隔一秒后打印出这个x。\n\n之后再使用Promise.all来执行这个函数，执行的时候，看到一秒之后输出了1，2，3，同时输出了数组[1, 2,\n3]，三个函数是同步执行的，并且在一个回调函数中返回了所有的结果。并且结果和函数的执行顺序是一致的。\n\n\n15. 代码输出结果\n\nfunction runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nfunction runReject (x) {\n  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\n  return p\n}\nPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\n       .then(res => console.log(res))\n       .catch(err => console.log(err))\n\n\n输出结果如下：\n\n// 1s后输出\n1\n3\n// 2s后输出\n2\nError: 2\n// 4s后输出\n4\n\n\n可以看到。catch捕获到了第一个错误，在这道题目中最先的错误就是runReject(2)的结果。如果一组异步操作中有一个异常都不会进入.then()的第一个回调函数参数中。会被.then()的第二个回调函数捕获。\n\n\n16. 代码输出结果\n\nfunction runAsync (x) {\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\n  return p\n}\nPromise.race([runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log('result: ', res))\n  .catch(err => console.log(err))\n\n\n输出结果如下：\n\n1\n'result: ' 1\n2\n3\n\n\nthen只会捕获第一个成功的方法，其他的函数虽然还会继续执行，但是不是被then捕获了。\n\n\n17. 代码输出结果\n\nfunction runAsync(x) {\n  const p = new Promise(r =>\n    setTimeout(() => r(x, console.log(x)), 1000)\n  );\n  return p;\n}\nfunction runReject(x) {\n  const p = new Promise((res, rej) =>\n    setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x)\n  );\n  return p;\n}\nPromise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])\n  .then(res => console.log(\"result: \", res))\n  .catch(err => console.log(err));\n\n\n输出结果如下：\n\n0\nError: 0\n1\n2\n3\n\n\n可以看到在catch捕获到第一个错误之后，后面的代码还不执行，不过不会再被捕获了。\n\n注意：all和race传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被then的第二个参数或者后面的catch捕获；但并不会影响数组中其它的异步任务的执行。\n\n\n18. 代码输出结果\n\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nasync1();\nconsole.log('start')\n\n\n输出结果如下：\n\nasync1 start\nasync2\nstart\nasync1 end\n\n\n代码的执行过程如下：\n\n 1. 首先执行函数中的同步代码async1\n    start，之后遇到了await，它会阻塞async1后面代码的执行，因此会先去执行async2中的同步代码async2，然后跳出async1；\n 2. 跳出async1函数后，执行同步代码start；\n 3. 在一轮宏任务全部执行完之后，再来执行await后面的内容async1 end。\n\n这里可以理解为await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中。\n\n\n19. 代码输出结果\n\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n  setTimeout(() => {\n    console.log('timer1')\n  }, 0)\n}\nasync function async2() {\n  setTimeout(() => {\n    console.log('timer2')\n  }, 0)\n  console.log(\"async2\");\n}\nasync1();\nsetTimeout(() => {\n  console.log('timer3')\n}, 0)\nconsole.log(\"start\")\n\n\n输出结果如下：\n\nasync1 start\nasync2\nstart\nasync1 end\ntimer2\ntimer3\ntimer1\n\n\n代码的执行过程如下：\n\n 1. 首先进入async1，打印出async1 start；\n 2. 之后遇到async2，进入async2，遇到定时器timer2，加入宏任务队列，之后打印async2；\n 3. 由于async2阻塞了后面代码的执行，所以执行后面的定时器timer3，将其加入宏任务队列，之后打印start；\n 4. 然后执行async2后面的代码，打印出async1 end，遇到定时器timer1，将其加入宏任务队列；\n 5. 最后，宏任务队列有三个任务，先后顺序为timer2，timer3，timer1，没有微任务，所以直接所有的宏任务按照先进先出的原则执行。\n\n\n20. 代码输出结果\n\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n\n\n输出结果如下：\n\nscript start\nasync1 start\npromise1\nscript end\n\n\n这里需要注意的是在async1中await后面的Promise是没有返回值的，也就是它的状态始终是pending状态，所以在await之后的内容是不会执行的，包括async1后面的\n.then。\n\n\n21. 代码输出结果\n\nasync function async1 () {\n  console.log('async1 start');\n  await new Promise(resolve => {\n    console.log('promise1')\n    resolve('promise1 resolve')\n  }).then(res => console.log(res))\n  console.log('async1 success');\n  return 'async1 end'\n}\nconsole.log('srcipt start')\nasync1().then(res => console.log(res))\nconsole.log('srcipt end')\n\n\n这里是对上面一题进行了改造，加上了resolve。\n\n输出结果如下：\n\nscript start\nasync1 start\npromise1\nscript end\npromise1 resolve\nasync1 success\nasync1 end\n\n\n\n22. 代码输出结果\n\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\n\nasync function async2() {\n  console.log(\"async2\");\n}\n\nconsole.log(\"script start\");\n\nsetTimeout(function() {\n  console.log(\"setTimeout\");\n}, 0);\n\nasync1();\n\nnew Promise(resolve => {\n  console.log(\"promise1\");\n  resolve();\n}).then(function() {\n  console.log(\"promise2\");\n});\nconsole.log('script end')\n\n\n输出结果如下：\n\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n\n\n代码执行过程如下：\n\n 1. 开头定义了async1和async2两个函数，但是并未执行，执行script中的代码，所以打印出script start；\n 2. 遇到定时器Settimeout，它是一个宏任务，将其加入到宏任务队列；\n 3. 之后执行函数async1，首先打印出async1 start；\n 4. 遇到await，执行async2，打印出async2，并阻断后面代码的执行，将后面的代码加入到微任务队列；\n 5. 然后跳出async1和async2，遇到Promise，打印出promise1；\n 6. 遇到resolve，将其加入到微任务队列，然后执行后面的script代码，打印出script end；\n 7. 之后就该执行微任务队列了，首先打印出async1 end，然后打印出promise2；\n 8. 执行完微任务队列，就开始执行宏任务队列中的定时器，打印出setTimeout。\n\n\n23. 代码输出结果\n\nasync function async1 () {\n  await async2();\n  console.log('async1');\n  return 'async1 success'\n}\nasync function async2 () {\n  return new Promise((resolve, reject) => {\n    console.log('async2')\n    reject('error')\n  })\n}\nasync1().then(res => console.log(res))\n\n\n输出结果如下：\n\nasync2\nUncaught (in promise) error\n\n\n可以看到，如果async函数中抛出了错误，就会终止错误结果，不会继续向下执行。\n\n如果想要让错误不足之处后面的代码执行，可以使用catch来捕获：\n\nasync function async1 () {\n  await Promise.reject('error!!!').catch(e => console.log(e))\n  console.log('async1');\n  return Promise.resolve('async1 success')\n}\nasync1().then(res => console.log(res))\nconsole.log('script start')\n\n\n这样的输出结果就是：\n\nscript start\nerror!!!\nasync1\nasync1 success\n\n\n\n24. 代码输出结果\n\nconst first = () => (new Promise((resolve, reject) => {\n    console.log(3);\n    let p = new Promise((resolve, reject) => {\n        console.log(7);\n        setTimeout(() => {\n            console.log(5);\n            resolve(6);\n            console.log(p)\n        }, 0)\n        resolve(1);\n    });\n    resolve(2);\n    p.then((arg) => {\n        console.log(arg);\n    });\n}));\nfirst().then((arg) => {\n    console.log(arg);\n});\nconsole.log(4);\n\n\n输出结果如下：\n\n3\n7\n4\n1\n2\n5\nPromise{<resolved>: 1}\n\n\n代码的执行过程如下：\n\n 1. 首先会进入Promise，打印出3，之后进入下面的Promise，打印出7；\n 2. 遇到了定时器，将其加入宏任务队列；\n 3. 执行Promise  p中的resolve，状态变为resolved，返回值为1；\n 4. 执行Promise first中的resolve，状态变为resolved，返回值为2；\n 5. 遇到p.then，将其加入微任务队列，遇到first().then，将其加入任务队列；\n 6. 执行外面的代码，打印出4；\n 7. 这样第一轮宏任务就执行完了，开始执行微任务队列中的任务，先后打印出1和2；\n 8. 这样微任务就执行完了，开始执行下一轮宏任务，宏任务队列中有一个定时器，执行它，打印出5，由于执行已经变为resolved状态，所以resolve(6)不会再执行；\n 9. 最后console.log(p)打印出Promise{<resolved>: 1}；\n\n\n25. 代码输出结果\n\nconst async1 = async () => {\n  console.log('async1');\n  setTimeout(() => {\n    console.log('timer1')\n  }, 2000)\n  await new Promise(resolve => {\n    console.log('promise1')\n  })\n  console.log('async1 end')\n  return 'async1 success'\n} \nconsole.log('script start');\nasync1().then(res => console.log(res));\nconsole.log('script end');\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .catch(4)\n  .then(res => console.log(res))\nsetTimeout(() => {\n  console.log('timer2')\n}, 1000)\n\n\n输出结果如下：\n\nscript start\nasync1\npromise1\nscript end\n1\ntimer2\ntimer1\n\n\n代码的执行过程如下：\n\n 1. 首先执行同步带吗，打印出script start；\n 2. 遇到定时器timer1将其加入宏任务队列；\n 3. 之后是执行Promise，打印出promise1，由于Promise没有返回值，所以后面的代码不会执行；\n 4. 然后执行同步代码，打印出script end；\n 5. 继续执行下面的Promise，.then和.catch期望参数是一个函数，这里传入的是一个数字，因此就会发生值渗透，将resolve(1)的值传到最后一个then，直接打印出1；\n 6. 遇到第二个定时器，将其加入到微任务队列，执行微任务队列，按顺序依次执行两个定时器，但是由于定时器时间的原因，会在两秒后先打印出timer2，在四秒后打印出timer1。\n\n\n26. 代码输出结果\n\nconst p1 = new Promise((resolve) => {\n  setTimeout(() => {\n    resolve('resolve3');\n    console.log('timer1')\n  }, 0)\n  resolve('resovle1');\n  resolve('resolve2');\n}).then(res => {\n  console.log(res)  // resolve1\n  setTimeout(() => {\n    console.log(p1)\n  }, 1000)\n}).finally(res => {\n  console.log('finally', res)\n})\n\n\n执行结果为如下：\n\nresolve1\nfinally  undefined\ntimer1\nPromise{<resolved>: undefined}\n\n\n需要注意的是最后一个定时器打印出的p1其实是.finally的返回值，我们知道.finally的返回值如果在没有抛出错误的情况下默认会是上一个Promise的返回值，而这道题中.finally上一个Promise是.then()，但是这个.then()并没有返回值，所以p1打印出来的Promise的值会是undefined，如果在定时器的下面加上一个return\n1，则值就会变成1。\n\n\n27. 代码输出结果\n\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n\n\n输出结果如下：\n\n1\n7\n6\n8\n2\n4\n3\n5\n9\n11\n10\n12\n\n\n（1）第一轮事件循环流程分析如下：\n\n * 整体script作为第一个宏任务进入主线程，遇到console.log，输出1。\n * 遇到setTimeout，其回调函数被分发到宏任务Event Queue中。暂且记为setTimeout1。\n * 遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。记为process1。\n * 遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。记为then1。\n * 又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，记为setTimeout2。\n\n宏任务Event Queue 微任务Event Queue setTimeout1 process1 setTimeout2 then1\n\n上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。发现了process1和then1两个微任务：\n\n * 执行process1，输出6。\n * 执行then1，输出8。\n\n第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。\n\n（2）第二轮时间循环从**setTimeout1**宏任务开始：\n\n * 首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。\n * new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。\n\n宏任务Event Queue 微任务Event Queue setTimeout2 process2 then2\n\n第二轮事件循环宏任务结束，发现有process2和then2两个微任务可以执行：\n\n * 输出3。\n * 输出5。\n\n第二轮事件循环结束，第二轮输出2，4，3，5。\n\n（3）第三轮事件循环开始，此时只剩setTimeout2了，执行。\n\n * 直接输出9。\n * 将process.nextTick()分发到微任务Event Queue中。记为process3。\n * 直接执行new Promise，输出11。\n * 将then分发到微任务Event Queue中，记为then3。\n\n宏任务Event Queue 微任务Event Queue process3 then3\n\n第三轮事件循环宏任务执行结束，执行两个微任务process3和then3：\n\n * 输出10。\n * 输出12。\n\n第三轮事件循环结束，第三轮输出9，11，10，12。\n\n整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。\n\n\n28. 代码输出结果\n\nconsole.log(1)\n\nsetTimeout(() => {\n  console.log(2)\n})\n\nnew Promise(resolve =>  {\n  console.log(3)\n  resolve(4)\n}).then(d => console.log(d))\n\nsetTimeout(() => {\n  console.log(5)\n  new Promise(resolve =>  {\n    resolve(6)\n  }).then(d => console.log(d))\n})\n\nsetTimeout(() => {\n  console.log(7)\n})\n\nconsole.log(8)\n\n\n输出结果如下：\n\n1\n3\n8\n4\n2\n5\n6\n7\n\n\n代码执行过程如下：\n\n 1.  首先执行script代码，打印出1；\n 2.  遇到第一个定时器，加入到宏任务队列；\n 3.  遇到Promise，执行代码，打印出3，遇到resolve，将其加入到微任务队列；\n 4.  遇到第二个定时器，加入到宏任务队列；\n 5.  遇到第三个定时器，加入到宏任务队列；\n 6.  继续执行script代码，打印出8，第一轮执行结束；\n 7.  执行微任务队列，打印出第一个Promise的resolve结果：4；\n 8.  开始执行宏任务队列，执行第一个定时器，打印出2；\n 9.  此时没有微任务，继续执行宏任务中的第二个定时器，首先打印出5，遇到Promise，首选打印出6，遇到resolve，将其加入到微任务队列；\n 10. 执行微任务队列，打印出6；\n 11. 执行宏任务队列中的最后一个定时器，打印出7。\n\n\n29. 代码输出结果\n\nconsole.log(1);\n    \nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\n\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\n\nsetTimeout(() => {\n  console.log(6);\n})\n\nconsole.log(7);\n\n\n代码输出结果如下：\n\n1\n4\n7\n5\n2\n3\n6\n\n\n代码执行过程如下：\n\n 1. 首先执行scrip代码，打印出1；\n 2. 遇到第一个定时器setTimeout，将其加入到宏任务队列；\n 3. 遇到Promise，执行里面的同步代码，打印出4，遇到resolve，将其加入到微任务队列；\n 4. 遇到第二个定时器setTimeout，将其加入到红任务队列；\n 5. 执行script代码，打印出7，至此第一轮执行完成；\n 6. 指定微任务队列中的代码，打印出resolve的结果：5；\n 7. 执行宏任务中的第一个定时器setTimeout，首先打印出2，然后遇到 Promise.resolve().then()，将其加入到微任务队列；\n 8. 执行完这个宏任务，就开始执行微任务队列，打印出3；\n 9. 继续执行宏任务队列中的第二个定时器，打印出6。\n\n\n30. 代码输出结果\n\nPromise.resolve().then(() => {\n    console.log('1');\n    throw 'Error';\n}).then(() => {\n    console.log('2');\n}).catch(() => {\n    console.log('3');\n    throw 'Error';\n}).then(() => {\n    console.log('4');\n}).catch(() => {\n    console.log('5');\n}).then(() => {\n    console.log('6');\n});\n\n\n执行结果如下：\n\n1 \n3 \n5 \n6\n\n\n在这道题目中，我们需要知道，无论是thne还是catch中，只要throw\n抛出了错误，就会被catch捕获，如果没有throw出错误，就被继续执行后面的then。\n\n\n31. 代码输出结果\n\nsetTimeout(function () {\n  console.log(1);\n}, 100);\n\nnew Promise(function (resolve) {\n  console.log(2);\n  resolve();\n  console.log(3);\n}).then(function () {\n  console.log(4);\n  new Promise((resove, reject) => {\n    console.log(5);\n    setTimeout(() =>  {\n      console.log(6);\n    }, 10);\n  })\n});\nconsole.log(7);\nconsole.log(8);\n\n\n输出结果为：\n\n2\n3\n7\n8\n4\n5\n6\n1\n\n\n代码执行过程如下：\n\n 1. 首先遇到定时器，将其加入到宏任务队列；\n 2. 遇到Promise，首先执行里面的同步代码，打印出2，遇到resolve，将其加入到微任务队列，执行后面同步代码，打印出3；\n 3. 继续执行script中的代码，打印出7和8，至此第一轮代码执行完成；\n 4. 执行微任务队列中的代码，首先打印出4，如遇到Promise，执行其中的同步代码，打印出5，遇到定时器，将其加入到宏任务队列中，此时宏任务队列中有两个定时器；\n 5. 执行宏任务队列中的代码，这里我们需要注意是的第一个定时器的时间为100ms，第二个定时器的时间为10ms，所以先执行第二个定时器，打印出6；\n 6. 此时微任务队列为空，继续执行宏任务队列，打印出1。\n\n做完这道题目，我们就需要格外注意，每个定时器的时间，并不是所有定时器的时间都为0哦。\n\n\n二、THIS\n\n\n1. 代码输出结果\n\nfunction foo() {\n  console.log( this.a );\n}\n\nfunction doFoo() {\n  foo();\n}\n\nvar obj = {\n  a: 1,\n  doFoo: doFoo\n};\n\nvar a = 2; \nobj.doFoo()\n\n\n输出结果：2\n\n在Javascript中，this指向函数执行时的当前对象。在执行foo的时候，执行环境就是doFoo函数，执行环境为全局。所以，foo中的this是指向window的，所以会打印出2。\n\n\n2. 代码输出结果\n\nvar a = 10\nvar obj = {\n  a: 20,\n  say: () => {\n    console.log(this.a)\n  }\n}\nobj.say() \n\nvar anotherObj = { a: 30 } \nobj.say.apply(anotherObj) \n\n\n输出结果：10 10\n\n我么知道，箭头函数时不绑定this的，它的this来自原其父级所处的上下文，所以首先会打印全局中的 a\n的值10。后面虽然让say方法指向了另外一个对象，但是仍不能改变箭头函数的特性，它的this仍然是指向全局的，所以依旧会输出10。\n\n但是，如果是普通函数，那么就会有完全不一样的结果：\n\nvar a = 10  \nvar obj = {  \n  a: 20,  \n  say(){\n    console.log(this.a)  \n  }  \n}  \nobj.say()   \nvar anotherObj={a:30}   \nobj.say.apply(anotherObj)\n\n\n输出结果：20 30\n\n这时，say方法中的this就会指向他所在的对象，输出其中的a的值。\n\n\n3. 代码输出结果\n\nfunction a() {\n  console.log(this);\n}\na.call(null);\n\n\n打印结果：window对象\n\n根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者u\nndefined，call方法将把全局对象（浏览器上是window对象）作为this的值。所以，不管传入null 还是\nundefined，其this都是全局对象window。所以，在浏览器上答案是输出 window 对象。\n\n要注意的是，在严格模式中，null 就是 null，undefined 就是 undefined：\n\n'use strict';\n\nfunction a() {\n    console.log(this);\n}\na.call(null); // null\na.call(undefined); // undefined\n\n\n\n4. 代码输出结果\n\nvar obj = { \n  name : 'cuggz', \n  fun : function(){ \n    console.log(this.name); \n  } \n} \nobj.fun()     // cuggz\nnew obj.fun() // undefined\n\n\n使用new构造函数时，其this指向的是全局环境window。\n\n\n6. 代码输出结果\n\nvar obj = {\n   say: function() {\n     var f1 = () =>  {\n       console.log(\"1111\", this);\n     }\n     f1();\n   },\n   pro: {\n     getPro:() =>  {\n        console.log(this);\n     }\n   }\n}\nvar o = obj.say;\no();\nobj.say();\nobj.pro.getPro();\n\n\n输出结果：\n\n1111 window对象\n1111 obj对象\nwindow对象\n\n\n解析：\n\n 1. o()，o是在全局执行的，而f1是箭头函数，它是没有绑定this的，它的this指向其父级的this，其父级say方法的this指向的是全局作用域，所以会打印出window；\n 2. obj.say()，谁调用say，say 的this就指向谁，所以此时this指向的是obj对象；\n 3. obj.pro.getPro()，我们知道，箭头函数时不绑定this的，getPro处于pro中，而对象不构成单独的作用域，所以箭头的函数的this就指向了全局作用域window。\n\n\n7. 代码输出结果\n\nvar myObject = {\n    foo: \"bar\",\n    func: function() {\n        var self = this;\n        console.log(this.foo);  \n        console.log(self.foo);  \n        (function() {\n            console.log(this.foo);  \n            console.log(self.foo);  \n        }());\n    }\n};\nmyObject.func();\n\n\n输出结果：bar bar undefined bar\n\n解析：\n\n 1. 首先func是由myObject调用的，this指向myObject。又因为var self = this;所以self指向myObject。\n 2. 这个立即执行匿名函数表达式是由window调用的，this指向window\n    。立即执行匿名函数的作用域处于myObject.func的作用域中，在这个作用域找不到self变量，沿着作用域链向上查找self变量，找到了指向\n    myObject对象的self。\n\n\n8. 代码输出问题\n\nwindow.number = 2;\nvar obj = {\n number: 3,\n db1: (function(){\n   console.log(this);\n   this.number *= 4;\n   return function(){\n     console.log(this);\n     this.number *= 5;\n   }\n })()\n}\nvar db1 = obj.db1;\ndb1();\nobj.db1();\nconsole.log(obj.number);     // 15\nconsole.log(window.number);  // 40\n\n\n这道题目看清起来有点乱，但是实际上是考察this指向的:\n\n 1. 执行db1()时，this指向全局作用域，所以window.number * 4 = 8，然后执行匿名函数， 所以window.number * 5 =\n    40；\n 2. 执行obj.db1();时，this指向obj对象，执行匿名函数，所以obj.numer * 5 = 15。\n\n\n9. 代码输出结果\n\nvar length = 10;\nfunction fn() {\n    console.log(this.length);\n}\n \nvar obj = {\n  length: 5,\n  method: function(fn) {\n    fn();\n    arguments[0]();\n  }\n};\n \nobj.method(fn, 1);\n\n\n输出结果： 10 2\n\n解析：\n\n 1. 第一次执行fn()，this指向window对象，输出10。\n 2. 第二次执行arguments0，相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。\n\n\n10. 代码输出结果\n\nvar a = 1;\nfunction printA(){\n  console.log(this.a);\n}\nvar obj={\n  a:2,\n  foo:printA,\n  bar:function(){\n    printA();\n  }\n}\n\nobj.foo(); // 2\nobj.bar(); // 1\nvar foo = obj.foo;\nfoo(); // 1\n\n\n输出结果： 2 1 1\n\n解析：\n\n 1. obj.foo()，foo 的this指向obj对象，所以a会输出2；\n 2. obj.bar()，printA在bar方法中执行，所以此时printA的this指向的是window，所以会输出1；\n 3. foo()，foo是在全局对象中执行的，所以其this指向的是window，所以会输出1；\n\n\n11. 代码输出结果\n\nvar x = 3;\nvar y = 4;\nvar obj = {\n    x: 1,\n    y: 6,\n    getX: function() {\n        var x = 5;\n        return function() {\n            return this.x;\n        }();\n    },\n    getY: function() {\n        var y = 7;\n        return this.y;\n    }\n}\nconsole.log(obj.getX()) // 3\nconsole.log(obj.getY()) // 6\n\n\n输出结果：3 6\n\n解析：\n\n 1. 我们知道，匿名函数的this是指向全局对象的，所以this指向window，会打印出3；\n 2. getY是由obj调用的，所以其this指向的是obj对象，会打印出6。\n\n\n12. 代码输出结果\n\n var a = 10; \n var obt = { \n   a: 20, \n   fn: function(){ \n     var a = 30; \n     console.log(this.a)\n   } \n }\n obt.fn();  // 20\n obt.fn.call(); // 10\n (obt.fn)(); // 20\n\n\n输出结果： 20 10 20\n\n解析：\n\n 1.  obt.fn()，fn是由obt调用的，所以其this指向obt对象，会打印出20；\n 2.  obt.fn.call()，这里call的参数啥都没写，就表示null，我们知道如果call的参数为u\n    ndefined或null，那么this就会指向全局对象this，所以会打印出 10；\n 3.  (obt.fn)()， 这里给表达式加了括号，而括号的作用是改变表达式的运算顺序，而在这里加与不加括号并无影响；相当于\n     obt.fn()，所以会打印出 20；\n\n\n13. 代码输出结果\n\nfunction a(xx){\n  this.x = xx;\n  return this\n};\nvar x = a(5);\nvar y = a(6);\n\nconsole.log(x.x)  // undefined\nconsole.log(y.x)  // 6\n\n\n输出结果： undefined 6\n\n解析：\n\n 1. 最关键的就是var x = a(5)，函数a是在全局作用域调用，所以函数内部的this指向window对象。**所以 this.x = 5\n    就相当于：window.x = 5。**之后 return this，也就是说 var x = a(5)\n    中的x变量的值是window，这里的x将函数内部的x的值覆盖了。然后执行console.log(x.x)，\n    也就是console.log(window.x)，而window对象中没有x属性，所以会输出undefined。\n 2. 当指向y.x时，会给全局变量中的x赋值为6，所以会打印出6。\n\n\n14. 代码输出结果\n\nfunction foo(something){\n    this.a = something\n}\n\nvar obj1 = {\n    foo: foo\n}\n\nvar obj2 = {}\n\nobj1.foo(2); \nconsole.log(obj1.a); // 2\n\nobj1.foo.call(obj2, 3);\nconsole.log(obj2.a); // 3\n\nvar bar = new obj1.foo(4)\nconsole.log(obj1.a); // 2\nconsole.log(bar.a); // 4\n\n\n输出结果： 2 3 2 4\n\n解析：\n\n 1. 首先执行obj1.foo(2); 会在obj中添加a属性，其值为2。之后执行obj1.a，a是右obj1调用的，所以this指向obj，打印出2；\n 2. 执行 obj1.foo.call(obj2, 3) 时，会将foo的this指向obj2，后面就和上面一样了，所以会打印出3；\n 3. obj1.a会打印出2；\n 4. 最后就是考察this绑定的优先级了，new 绑定是比隐式绑定优先级高，所以会输出4。\n\n\n15. 代码输出结果\n\nfunction foo(something){\n    this.a = something\n}\n\nvar obj1 = {}\n\nvar bar = foo.bind(obj1);\nbar(2);\nconsole.log(obj1.a); // 2\n\nvar baz = new bar(3);\nconsole.log(obj1.a); // 2\nconsole.log(baz.a); // 3\n\n\n输出结果： 2 2 3\n\n这道题目和上面题目差不多，主要都是考察this绑定的优先级。记住以下结论即可：this绑定的优先级：new绑定 > 显式绑定 > 隐式绑定 > 默认绑定。\n\n\n三、作用域&变量提升&闭包\n\n\n1. 代码输出结果\n\n(function(){\n   var x = y = 1;\n})();\nvar z;\n\nconsole.log(y); // 1\nconsole.log(z); // undefined\nconsole.log(x); // Uncaught ReferenceError: x is not defined\n\n\n这段代码的关键在于：var x = y = 1; 实际上这里是从右往左执行的，首先执行y = 1,\n因为y没有使用var声明，所以它是一个全局变量，然后第二步是将y赋值给x，讲一个全局变量赋值给了一个局部变量，最终，x是一个局部变量，y是一个全局变量，所以打印x是报错。\n\n\n2. 代码输出结果\n\nvar a, b\n(function () {\n   console.log(a);\n   console.log(b);\n   var a = (b = 3);\n   console.log(a);\n   console.log(b);   \n})()\nconsole.log(a);\nconsole.log(b);\n\n\n输出结果：\n\nundefined \nundefined \n3 \n3 \nundefined \n3\n\n\n这个题目和上面题目考察的知识点类似，b赋值为3，b此时是一个全局变量，而将3赋值给a，a是一个局部变量，所以最后打印的时候，a仍旧是undefined。\n\n\n3. 代码输出结果\n\nvar friendName = 'World';\n(function() {\n  if (typeof friendName === 'undefined') {\n    var friendName = 'Jack';\n    console.log('Goodbye ' + friendName);\n  } else {\n    console.log('Hello ' + friendName);\n  }\n})();\n\n\n输出结果：Goodbye Jack\n\n我们知道，在 JavaScript中， Function 和 var 都会被提升（变量提升），所以上面的代码就相当于：\n\nvar name = 'World!';\n(function () {\n    var name;\n    if (typeof name === 'undefined') {\n        name = 'Jack';\n        console.log('Goodbye ' + name);\n    } else {\n        console.log('Hello ' + name);\n    }\n})();\n\n\n这样，答案就一目了然了。\n\n\n4. 代码输出结果\n\nfunction fn1(){\n  console.log('fn1')\n}\nvar fn2\n \nfn1()\nfn2()\n \nfn2 = function() {\n  console.log('fn2')\n}\n \nfn2()\n\n\n输出结果：\n\nfn1\nUncaught TypeError: fn2 is not a function\nfn2\n\n\n这里也是在考察变量提升，关键在于第一个fn2()，这时fn2仍是一个undefined的变量，所以会报错fn2不是一个函数。\n\n\n5. 代码输出结果\n\nfunction a() {\n    var temp = 10;\n    function b() {\n        console.log(temp); // 10\n    }\n    b();\n}\na();\n\nfunction a() {\n    var temp = 10;\n    b();\n}\nfunction b() {\n    console.log(temp); // 报错 Uncaught ReferenceError: temp is not defined\n}\na();\n\n\n在上面的两段代码中，第一段是可以正常输出，这个应该没啥问题，关键在于第二段代码，它会报错Uncaught ReferenceError: temp is not\ndefined。这时因为在b方法执行时，temp 的值为undefined。\n\n\n6. 代码输出结果\n\n var a=3;\n function c(){\n    alert(a);\n }\n (function(){\n  var a=4;\n  c();\n })();\n\n\njs中变量的作用域链与定义时的环境有关，与执行时无关。执行环境只会改变this、传递的参数、全局变量等\n\n\n7. 代码输出问题\n\nfunction fun(n, o) {\n  console.log(o)\n  return {\n    fun: function(m){\n      return fun(m, n);\n    }\n  };\n}\nvar a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);\nvar b = fun(0).fun(1).fun(2).fun(3);\nvar c = fun(0).fun(1);  c.fun(2);  c.fun(3);\n\n\n输出结果：\n\nundefined  0  0  0\nundefined  0  1  2\nundefined  0  1  1\n\n\n这是一道关于闭包的题目，对于fun方法，调用之后返回的是一个对象。我们知道，当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为undefined值。所以\nconsole.log(o); 会输出undefined。而a就是是fun(0)返回的那个对象。也就是说，函数fun中参数 n\n的值是0，而返回的那个对象中，需要一个参数n，而这个对象的作用域中没有n，它就继续沿着作用域向上一级的作用域中寻找n，最后在函数fun中找到了n，n的值是0。了解了这一点，其他运算就很简单了，以此类推。\n\n\n8. 代码输出结果\n\nf = function() {return true;};   \ng = function() {return false;};   \n(function() {   \n   if (g() && [] == ![]) {   \n      f = function f() {return false;};   \n      function g() {return true;}   \n   }   \n})();   \nconsole.log(f());\n\n\n输出结果： false\n\n这里首先定义了两个变量f和g，我们知道变量是可以重新赋值的。后面是一个匿名自执行函数，在 if 条件中调用了函数\ng()，由于在匿名函数中，又重新定义了函数g，就覆盖了外部定义的变量g，所以，这里调用的是内部函数 g 方法，返回为 true。第一个条件通过，进入第二个条件。\n\n第二个条件是[] == ![]，先看 ![] ，在 JavaScript 中，当用于布尔运算时，比如在这里，对象的非空引用被视为 true，空引用 null\n则被视为 false。由于这里不是一个 null, 而是一个没有元素的数组，所以 [] 被视为 true, 而 ![] 的结果就是 false\n了。当一个布尔值参与到条件运算的时候，true 会被看作 1, 而 false 会被看作 0。现在条件变成了 [] == 0\n的问题了，当一个对象参与条件比较的时候，它会被求值，求值的结果是数组成为一个字符串，[] 的结果就是 '' ，而 '' 会被当作 0 ，所以，条件成立。\n\n两个条件都成立，所以会执行条件中的代码， f 在定义是没有使用var，所以他是一个全局变量。因此，这里会通过闭包访问到外部的变量 f, 重新赋值，现在执行 f\n函数返回值已经成为 false 了。而 g 则不会有这个问题，这里是一个函数内定义的 g，不会影响到外部的 g 函数。所以最后的结果就是 false。\n\n\n四、原型&继承\n\n\n1. 代码输出结果\n\nfunction Person(name) {\n    this.name = name\n}\nvar p2 = new Person('king');\nconsole.log(p2.__proto__) //Person.prototype\nconsole.log(p2.__proto__.__proto__) //Object.prototype\nconsole.log(p2.__proto__.__proto__.__proto__) // null\nconsole.log(p2.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错\nconsole.log(p2.__proto__.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错\nconsole.log(p2.constructor)//Person\nconsole.log(p2.prototype)//undefined p2是实例，没有prototype属性\nconsole.log(Person.constructor)//Function 一个空函数\nconsole.log(Person.prototype)//打印出Person.prototype这个对象里所有的方法和属性\nconsole.log(Person.prototype.constructor)//Person\nconsole.log(Person.prototype.__proto__)// Object.prototype\nconsole.log(Person.__proto__) //Function.prototype\nconsole.log(Function.prototype.__proto__)//Object.prototype\nconsole.log(Function.__proto__)//Function.prototype\nconsole.log(Object.__proto__)//Function.prototype\nconsole.log(Object.prototype.__proto__)//null\n\n\n这道义题目考察原型、原型链的基础，记住就可以了。\n\n\n2. 代码输出结果\n\n// a\nfunction Foo () {\n getName = function () {\n   console.log(1);\n }\n return this;\n}\n// b\nFoo.getName = function () {\n console.log(2);\n}\n// c\nFoo.prototype.getName = function () {\n console.log(3);\n}\n// d\nvar getName = function () {\n console.log(4);\n}\n// e\nfunction getName () {\n console.log(5);\n}\n\nFoo.getName();           // 2\ngetName();               // 4\nFoo().getName();         // 1\ngetName();               // 1 \nnew Foo.getName();       // 2\nnew Foo().getName();     // 3\nnew new Foo().getName(); // 3\n\n\n输出结果：2 4 1 1 2 3 3\n\n解析：\n\n 1. Foo.getName()， Foo为一个函数对象，对象都可以有属性，b 处定义Foo的getName属性为函数，输出2；\n 2. getName()， 这里看d、e处，d为函数表达式，e为函数声明，两者区别在于变量提升，函数声明的 5 会被后边函数表达式的 4 覆盖；\n 3. ** Foo().getName()，** 这里要看a处，在Foo内部将全局的getName重新赋值为 console.log(1)\n    的函数，执行Foo()返回 this，这个this指向window，Foo().getName() 即为window.getName()，输出 1；\n 4. getName()， 上面3中，全局的getName已经被重新赋值，所以这里依然输出 1；\n 5. new Foo.getName()， 这里等价于 new (Foo.getName())，先执行 Foo.getName()，输出\n    2，然后new一个实例；\n 6. new Foo().getName()， 这 里等价于 (new Foo()).getName(),\n    先new一个Foo的实例，再执行这个实例的getName方法，但是这个实例本身没有这个方法，所以去原型链__protot__上边找，实例.protot\n    === Foo.prototype，所以输出 3；\n 7. new new Foo().getName()， 这里等价于new (new Foo().getName())，如上述6，先输出 3，然后new\n    一个 new Foo().getName() 的实例。\n\n\n3. 代码输出结果\n\nvar F = function() {};\nObject.prototype.a = function() {\n  console.log('a');\n};\nFunction.prototype.b = function() {\n  console.log('b');\n}\nvar f = new F();\nf.a();\nf.b();\nF.a();\nF.b()\n\n\n输出结果：\n\na\nUncaught TypeError: f.b is not a function\na\nb\n\n\n解析：\n\n 1. f 并不是 Function 的实例，因为它本来就不是构造函数，调用的是 Function 原型链上的相关属性和方法，只能访问到 Object\n    原型链。所以 f.a() 输出 a  ，而 f.b() 就报错了。\n 2. F 是个构造函数，而 F 是构造函数 Function 的一个实例。因为 F instanceof  Object === true，F\n    instanceof Function === true，由此可以得出结论：F 是 Object 和 Function 两个的实例，即 F 能访问到\n    a， 也能访问到 b。所以 F.a() 输出 a ，F.b() 输出 b。\n\n\n4. 代码输出结果\n\nfunction Foo(){\n    Foo.a = function(){\n        console.log(1);\n    }\n    this.a = function(){\n        console.log(2)\n    }\n}\n\nFoo.prototype.a = function(){\n    console.log(3);\n}\n\nFoo.a = function(){\n    console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n\n\n输出结果：4 2 1\n\n解析：\n\n 1. Foo.a() 这个是调用 Foo 函数的静态方法 a，虽然 Foo 中有优先级更高的属性方法 a，但 Foo 此时没有被调用，所以此时输出 Foo\n    的静态方法 a 的结果：4\n 2. let obj = new Foo(); 使用了 new 方法调用了函数，返回了函数实例对象，此时 Foo 函数内部的属性方法初始化，原型链建立。\n 3. obj.a() ; 调用 obj 实例上的方法 a，该实例上目前有两个 a 方法：一个是内部属性方法，另一个是原型上的方法。当这两者都存在时，首先查找\n    ownProperty ，如果没有才去原型链上找，所以调用实例上的 a 输出：2\n 4. Foo.a() ; 根据第2步可知 Foo 函数内部的属性方法已初始化，覆盖了同名的静态方法，所以输出：1\n\n\n5. 代码输出结果\n\nfunction Dog() {\n  this.name = 'puppy'\n}\nDog.prototype.bark = () => {\n  console.log('woof!woof!')\n}\nconst dog = new Dog()\nconsole.log(Dog.prototype.constructor === Dog && dog.constructor === Dog && dog instanceof Dog)\n\n\n输出结果：true\n\n解析：\n因为constructor是prototype上的属性，所以dog.constructor实际上就是指向Dog.prototype.constructor；constructor属性指向构造函数。instanceof而实际检测的是类型是否在实例的原型链上。\n\nconstructor是prototype上的属性，这一点很容易被忽略掉。constructor和instanceof\n的作用是不同的，感性地来说，constructor的限制比较严格，它只能严格对比对象的构造函数是不是指定的值；而instanceof比较松散，只要检测的类型在原型链上，就会返回true。\n\n\n6. 代码输出结果\n\nvar A = {n: 4399};\nvar B =  function(){this.n = 9999};\nvar C =  function(){var n = 8888};\nB.prototype = A;\nC.prototype = A;\nvar b = new B();\nvar c = new C();\nA.n++\nconsole.log(b.n);\nconsole.log(c.n);\n\n\n输出结果：9999 4400\n\n解析：\n\n 1. console.log(b.n)，在查找b.n是首先查找 b 对象自身有没有 n 属性，如果没有会去原型（prototype）上查找，当执行var b\n    = new B()时，函数内部this.n=9999(此时this指向 b) 返回b对象，b对象有自身的n属性，所以返回 9999。\n 2. console.log(c.n)，同理，当执行var c = new C()时，c对象没有自身的n属性，向上查找，找到原型 （prototype）上的\n    n 属性，因为 A.n++(此时对象A中的n为4400)， 所以返回4400。\n\n\n7. 代码输出问题\n\nfunction A(){\n}\nfunction B(a){\n　　this.a = a;\n}\nfunction C(a){\n　　if(a){\nthis.a = a;\n　　}\n}\nA.prototype.a = 1;\nB.prototype.a = 1;\nC.prototype.a = 1;\n \nconsole.log(new A().a);\nconsole.log(new B().a);\nconsole.log(new C(2).a);\n\n\n输出结果：1 undefined 2\n\n解析：\n\n 1. console.log(new A().a)，new\n    A()为构造函数创建的对象，本身没有a属性，所以向它的原型去找，发现原型的a属性的属性值为1，故该输出值为1；\n 2. console.log(new B().a)，ew B()为构造函数创建的对象，该构造函数有参数a，但该对象没有传参，故该输出值为undefined;\n 3. console.log(new C(2).a)，new\n    C()为构造函数创建的对象，该构造函数有参数a，且传的实参为2，执行函数内部，发现if为真，执行this.a = 2,故属性a的值为2。\n\n\n8 代码输出问题\n\nfunction Parent() {\n    this.a = 1;\n    this.b = [1, 2, this.a];\n    this.c = { demo: 5 };\n    this.show = function () {\n        console.log(this.a , this.b , this.c.demo );\n    }\n}\n\nfunction Child() {\n    this.a = 2;\n    this.change = function () {\n        this.b.push(this.a);\n        this.a = this.b.length;\n        this.c.demo = this.a++;\n    }\n}\n\nChild.prototype = new Parent();\nvar parent = new Parent();\nvar child1 = new Child();\nvar child2 = new Child();\nchild1.a = 11;\nchild2.a = 12;\nparent.show();\nchild1.show();\nchild2.show();\nchild1.change();\nchild2.change();\nparent.show();\nchild1.show();\nchild2.show();\n\n\n输出结果：\n\nparent.show(); // 1  [1,2,1] 5\n\nchild1.show(); // 11 [1,2,1] 5\nchild2.show(); // 12 [1,2,1] 5\n\nparent.show(); // 1 [1,2,1] 5\n\nchild1.show(); // 5 [1,2,1,11,12] 5\n\nchild2.show(); // 6 [1,2,1,11,12] 5\n\n\n这道题目值得神帝，他涉及到的知识点很多，例如this的指向、原型、原型链、类的继承、数据类型等。\n\n解析：\n\n 1. parent.show()，可以直接获得所需的值，没啥好说的；\n 2. child1.show()，Child的构造函数原本是指向Child的，题目显式将Child类的原型对象指向了Parent类的一个实例，需要注意Child.prototype指向的是Parent的实例parent，而不是指向Parent这个类。\n 3. child2.show()，这个也没啥好说的；\n 4. parent.show()，parent是一个Parent类的实例，Child.prorotype指向的是Parent类的另一个实例，两者在堆内存中互不影响，所以上述操作不影响parent实例，所以输出结果不变；\n 5. child1.show()，child1执行了change()方法后，发生了怎样的变化呢?\n\n * this.b.push(this.a)，由于this的动态指向特性，this.b会指向Child.prototype上的b数组,this.a会指向child1的a属性,所以Child.prototype.b变成了**[1,2,1,11]**;\n * this.a = this.b.length，这条语句中this.a和this.b的指向与上一句一致，故结果为child1.a变为4;\n * this.c.demo =\n   this.a++，由于child1自身属性并没有c这个属性，所以此处的this.c会指向Child.prototype.c，this.a值为4，为原始类型，故赋值操作时会直接赋值，Child.prototype.c.demo的结果为4，而this.a随后自增为5(4\n   + 1 = 5)。\n\n 6. child2执行了change()方法,\n    而child2和child1均是Child类的实例，所以他们的原型链指向同一个原型对象Child.prototype,也就是同一个parent实例，所以child2.change()中所有影响到原型对象的语句都会影响child1的最终输出结果。\n\n * this.b.push(this.a)，由于this的动态指向特性，this.b会指向Child.prototype上的b数组,this.a会指向child2的a属性,所以Child.prototype.b变成了**[1,2,1,11,12]**;\n * this.a = this.b.length，这条语句中this.a和this.b的指向与上一句一致，故结果为child2.a变为5;\n * this.c.demo =\n   this.a++，由于child2自身属性并没有c这个属性，所以此处的this.c会指向Child.prototype.c，故执行结果为Child.prototype.c.demo的值变为child2.a的值5，而child2.a最终自增为6(5\n   + 1 = 6)。\n\n\n9. 代码输出结果\n\nfunction SuperType(){\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty = false;\n}\n\nSubType.prototype = new SuperType();\nSubType.prototype.getSubValue = function (){\n    return this.subproperty;\n};\n\nvar instance = new SubType();\nconsole.log(instance.getSuperValue());\n\n\n输出结果：true\n\n实际上，这段代码就是在实现原型链继承，SubType继承了SuperType，本质是重写了SubType的原型对象，代之以一个新类型的实例。SubType的原型被重写了，所以instance.constructor指向的是SuperType。具体如下：\n\n写在最后：\n\n感谢您的耐心，读完了这么长的文章。读到这里，是否有一点收获呢？不得不说，这些面试题真是考验人的JavaScript基础能力，尤其是后面的原型和继承相关的题目，太绕了，值得仔细研究！\n\n近期，笔者在忙于毕业论文，可能更新会比较慢，还望大家见谅。\n\n如果觉得本文有帮助，记得点个赞哦。","frontMatter":{"title":"代码结果输出"}},{"name":"计算机网络","path":"参考八股文/计算机网络.html","texts":"一、HTTP协议\n\n\n1. GET和POST的请求的区别\n\nPost 和 Get 是 HTTP 请求的两种方法，其区别如下：\n\n * 应用场景： GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post\n   不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。\n * 是否缓存： 因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。\n * 发送的报文格式： Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。\n * 安全性： Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url\n   会被保留在历史记录中。\n * 请求长度： 浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。\n * 参数类型： post 的参数传递支持更多的数据类型。\n\n\n2. POST和PUT请求的区别\n\n * PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为时更新数据）\n * POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是创建数据）\n\n\n3. 常见的HTTP请求头和响应头\n\nHTTP Request Header 常见的请求头：\n\n * Accept:浏览器能够处理的内容类型\n * Accept-Charset:浏览器能够显示的字符集\n * Accept-Encoding：浏览器能够处理的压缩编码\n * Accept-Language：浏览器当前设置的语言\n * Connection：浏览器与服务器之间连接的类型\n * Cookie：当前页面设置的任何Cookie\n * Host：发出请求的页面所在的域\n * Referer：发出请求的页面的URL\n * User-Agent：浏览器的用户代理字符串\n\nHTTP Responses Header 常见的响应头：\n\n * Date：表示消息发送的时间，时间的描述格式由rfc822定义\n * server:服务器名称\n * Connection：浏览器与服务器之间连接的类型\n * Cache-Control：控制HTTP缓存\n * content-type:表示后面的文档属于什么MIME类型\n\n常见的 Content-Type 属性值有以下四种：\n\n（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以\napplication/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照\nkey1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。\n\n（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\n\n（3）application/json：服务器消息主体是序列化后的 JSON 字符串。\n\n（4）text/xml：该种方式主要用来提交 XML 格式的数据。\n\n\n4. HTTP状态码304是多好还是少好\n\n服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回304，此时客户端调用缓存内容，不必进行二次下载。\n\n状态码304不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应。\n\n搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于304的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。\n\n产生较多304状态码的原因：\n\n * 页面更新周期长或不更新\n * 纯静态页面或强制生成静态html\n\n304状态码出现过多会造成以下问题：\n\n * 网站快照停止；\n * 收录减少；\n * 权重下降。\n\n\n5. 常见的HTTP请求方法\n\n * GET: 向服务器获取数据；\n * POST：将实体提交到指定的资源，通常会造成服务器资源的修改；\n * PUT：上传文件，更新数据；\n * DELETE：删除服务器上的对象；\n * HEAD：获取报文首部，与GET相比，不返回报文主体部分；\n * OPTIONS：询问支持的请求方法，用来跨域请求；\n * CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；\n * TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。\n\n\n6. OPTIONS请求方法及使用场景\n\nOPTIONS是除了GET和POST之外的其中一种 HTTP请求方法。\n\nOPTIONS方法是用于请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。\n\nOPTIONS请求方法的主要用途有两个：\n\n * 获取服务器支持的所有HTTP请求方法；\n * 用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。\n\n\n7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？\n\nHTTP 1.0和 HTTP 1.1 有以下区别：\n\n * 连接方面，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个\n   TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。\n * 资源请求方面，在 http1.0\n   中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了\n   range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n * 缓存方面，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1\n   则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match\n   等更多可供选择的缓存头来控制缓存策略。\n * http1.1 中新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL\n   并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此有了 host\n   字段，这样就可以将请求发往到同一台服务器上的不同网站。\n * http1.1 相对于 http1.0 还新增了很多请求方法，如 PUT、HEAD、OPTIONS 等。\n\n\n8. HTTP 1.1 和 HTTP 2.0 的区别\n\n * 二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII\n   编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为\"帧\"，可以分为头信息帧和数据帧。\n   帧的概念是它实现多路复用的基础。\n * 多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP\n   连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了\"队头堵塞\"【1】的问题。\n * 数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2\n   的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2\n   将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。\n * 头信息压缩： HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如\n   Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2\n   对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress\n   压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。\n * 服务器推送： HTTP/2\n   允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是\n   http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。\n\n【1】队头堵塞：\n\n> 队头阻塞是由 HTTP 基本的“请求 - 应答”模型所导致的。HTTP\n> 规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。\n\n\n9. HTTP和HTTPS协议的区别\n\nHTTP和HTTPS协议的主要区别如下：\n\n * HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；\n * HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；\n * 使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；\n * HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。\n\n\n10. GET方法URL长度限制的原因\n\n实际上HTTP协议规范并没有对get方法请求的url长度进行限制，这个限制是特定的浏览器及服务器对它的限制。\nIE对URL长度的限制是2083字节(2K+35)。由于IE浏览器对URL长度的允许值是最小的，所以开发过程中，只要URL不超过2083字节，那么在所有浏览器中工作都不会有问题。\n\nGET的长度值 = URL（2083）- （你的Domain+Path）-2（2是get请求中?=两个字符的长度）\n\n\n下面看一下主流浏览器对get方法中url的长度限制范围：\n\n * Microsoft Internet Explorer\n   (Browser)：IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。\n * Firefox (Browser)：对于Firefox浏览器URL的长度限制为 65,536 个字符。\n * Safari (Browser)：URL最大长度限制为 80,000 个字符。\n * Opera (Browser)：URL最大长度限制为 190,000 个字符。\n * Google (chrome)：URL最大长度限制为 8182 个字符。\n\n主流的服务器对get方法中url的长度限制范围：\n\n * Apache (Server)：能接受最大url长度为8192个字符。\n * Microsoft Internet Information Server(IIS)：能接受最大url的长度为16384个字符。\n\n根据上面的数据，可以知道，get方法中的URL长度最长不超过2083个字符，这样所有的浏览器和服务器都可能正常工作。\n\n\n11. 当在浏览器中输入 GOOGLE.COM 并且按下回车之后发生了什么？\n\n（1）解析URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL\n中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL\n中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。\n\n（2）缓存判断： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。\n\n（3）DNS解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地\nDNS 服务器发起请求。本地 DNS\n服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的\nIP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS\n服务器向各级域名服务器发起请求属于迭代请求。\n\n（4）获取MAC地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP\n协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP\n地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC\n地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的\nMAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC\n地址应该为网关的地址。\n\n（5）TCP三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN\n连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN\nACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK\n确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。\n\n（6）HTTPS握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS\n的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的\nhash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash\n值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。\n\n（7）返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html\n文件进行解析，开始页面的渲染过程。\n\n（8）页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有\ndefer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM\n树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。\n\n（9）TCP四次挥手： 最后一步是 TCP\n断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送\nACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP\n连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK\n状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续\n2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED\n状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n\n\n12. 对KEEP-ALIVE的理解\n\nHTTP1.0\n中默认是在每次请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是短连接。当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，这就是长连接。其使用方法如下：\n\n * HTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送Connection:\n   keep-alive字段。若想断开keep-alive连接，需发送Connection:close字段；\n * HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送Connection：close首部字段。\n\nKeep-Alive的建立过程：\n\n * 客户端向服务器在发送请求报文同时在首部添加发送Connection字段\n * 服务器收到请求并处理 Connection字段\n * 服务器回送Connection:Keep-Alive字段给客户端\n * 客户端接收到Connection字段\n * Keep-Alive连接建立成功\n\n服务端自动断开过程（也就是没有keep-alive）：\n\n * 客户端向服务器只是发送内容报文（不包含Connection字段）\n * 服务器收到请求并处理\n * 服务器返回客户端请求的资源并关闭连接\n * 客户端接收资源，发现没有Connection字段，断开连接\n\n客户端请求断开连接过程：\n\n * 客户端向服务器发送Connection:close字段\n * 服务器收到请求并处理connection字段\n * 服务器回送响应资源并断开连接\n * 客户端接收资源并断开连接\n\n开启Keep-Alive的优点：\n\n * 较少的CPU和内存的使⽤（由于同时打开的连接的减少了）；\n * 允许请求和应答的HTTP管线化；\n * 降低拥塞控制 （TCP连接减少了）；\n * 减少了后续请求的延迟（⽆需再进⾏握⼿）；\n * 报告错误⽆需关闭TCP连；\n\n开启Keep-Alive的缺点：\n\n * 长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。\n\n\n13. 页面有多张图片，HTTP是怎样的加载表现？\n\n * 在HTTP 1下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。\n * 在HTTP 2下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在一个TCP连接中发送多个HTTP请求。\n\n\n14. HTTP2的头部压缩算法是怎样的？\n\nHTTP2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。\n\n具体来说:\n\n * 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；\n * 首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；\n * 每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。\n\n例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。\n\n\n15. HTTP请求报文的是什么样的？\n\n请求报⽂有4部分组成:\n\n * 请求⾏\n * 请求头部\n * 空⾏\n * 请求体\n\n其中： （1）请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。\n（2)请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔\n\n * User-Agent：产⽣请求的浏览器类型。\n * Accept：客户端可识别的内容类型列表。\n * Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。\n\n（3）请求体: post put等请求携带的数据\n\n\n16. HTTP响应报文的是什么样的？\n\n请求报⽂有4部分组成:\n\n * 响应⾏\n * 响应头\n * 空⾏\n * 响应体\n\n\n\n * 响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。\n * 响应头：响应部⾸组成\n * 响应体：服务器响应的数据\n\n\n17. HTTP协议的优点和缺点\n\nHTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。\n\nHTTP协议具有以下优点：\n\n * 支持客户端/服务器模式\n * 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。\n * 无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。\n * 无状态：HTTP\n   协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。\n * 灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。\n\nHTTP协议具有以下缺点：\n\n * 无状态： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。\n * 明文传输： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。\n * 不安全\n\n（1）通信使用明文（不加密），内容可能会被窃听； （2）不验证通信方的身份，因此有可能遭遇伪装； （3）无法证明报文的完整性，所以有可能已遭篡改；\n\n\n18. 说一下HTTP 3.0\n\nHTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。\n\n 1. 流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。\n 2. 集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。\n 3. 多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题。\n\n\n\n 4. 快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接。\n\n\n19. HTTP协议的性能怎么样\n\nHTTP 协议是基于 TCP/IP，并且使用了请求-应答的通信模式，所以性能的关键就在这两点里。\n\n * 长连接\n\nHTTP协议有两种连接模式，一种是持续连接，一种非持续连接。 （1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。\n（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。\n\n对于不同版本的采用不同的连接方式：\n\n * 在HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无畏的 TCP\n   连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭\n   TCP 连接。\n\n * 在HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP\n   连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6\n   个持久连接。\n\n * 管道网络传输\n\nHTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。\n\n管道（pipeline）网络传输是指：可以在同一个 TCP\n连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。\n\n * 队头堵塞\n\nHTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是HTTP队头阻塞问题。\n\n队头阻塞的解决方案： （1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。\n（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。\n\n\n20. URL有哪些组成部分\n\n以下面的URL为例：http://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name\n\n从上面的URL可以看出，一个完整的URL包括以下几部分：\n\n * 协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在\"HTTP\"后面的“//”为分隔符；\n * 域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用\n * 端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口（HTTP协议默认端口是80，HTTPS协议默认端口是443）；\n * 虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；\n * 文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名；\n * 锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；\n * 参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&ID=24618&page=1”。参数可以允许有多个参数，参数与参数之间用“&”作为分隔符。\n\n\n21. 与缓存相关的HTTP请求头有哪些\n\n强缓存：\n\n * Expires\n * Cache-Control\n\n协商缓存：\n\n * Etag、If-None-Match\n * Last-Modified、If-Modified-Since\n\n\n二、HTTPS协议\n\n\n1. 什么是HTTPS协议？\n\n超文本传输安全协议（Hypertext Transfer Protocol\nSecure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。\nHTTP协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议TLS/SSL具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。\n\n安全层的主要职责就是对发起的HTTP请求的数据进行加密操作 和 对接收到的HTTP的内容进行解密操作。\n\n\n2. TLS/SSL的工作原理\n\nTLS/SSL全称安全传输层协议（Transport Layer Security）,\n是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。\n\nTLS/SSL的功能实现主要依赖三类基本算法：散列函数hash、对称加密、非对称加密。这三类算法的作用如下：\n\n * 基于散列函数验证信息的完整性\n * 对称加密算法采用协商的秘钥对数据加密\n * 非对称加密实现身份认证和秘钥协商\n\n\n\n（1）散列函数HASH\n\n常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。\n\n特点： 在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。\n\n（2）对称加密\n\n对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。\n这就要用到非对称加密的方法。\n\n常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。\n\n特点： 对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。\n\n（3）非对称加密\n\n非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。我们可以将公钥公布出去，任何想和我们通信的客户，\n都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。\n\n常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。\n\n特点：\n非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。\n\n综合上述算法特点，TLS/SSL的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。\n\n\n3. 数字证书是什么？\n\n现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。\n\n首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA\n）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash\n算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。\n\n这个方法最要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。\n\n\n4. HTTPS通信（握手）过程\n\nHTTPS的通信过程如下：\n\n 1. 客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。\n 2. 服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。\n 3. 客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash\n    的值，用来供服务器检验。\n 4. 服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。\n 5. 客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。\n\n\n5. HTTPS的特点\n\nHTTPS的优点如下：\n\n * 使用HTTPS协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；\n * 使用HTTPS协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；\n * HTTPS是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；\n\nHTTPS的缺点如下：\n\n * HTTPS需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；\n * HTTPS协议握手阶段比较费时，增加页面的加载时间；\n * SSL证书是收费的，功能越强大的证书费用越高；\n * HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；\n * SSL证书需要绑定IP，不能再同一个IP上绑定多个域名。\n\n\n6. HTTPS是如何保证安全的？\n\n先理解两个概念：\n\n * 对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。\n * ⾮对称加密：\n\n 1. 私钥 + 公钥= 密钥对\n 2. 即⽤私钥加密的数据,只有对应的公钥才能解密,⽤公钥加密的数据,只有对应的私钥才能解密\n 3. 因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对,通信之前双⽅会先把⾃⼰的公钥都先发给对⽅\n 4. 然后对⽅再拿着这个公钥来加密数据响应给对⽅,等到到了对⽅那⾥,对⽅再⽤⾃⼰的私钥进⾏解密\n\n⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。\n\n解决⽅案：\n\n结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。\n\n此时⼜带来⼀个问题，中间⼈问题：\n如果此时在客户端和服务器之间存在⼀个中间⼈,这个中间⼈只需要把原本双⽅通信互发的公钥,换成⾃⼰的公钥,这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。\n\n所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。\n证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的HASH算法、证书到期时间等。\n\n但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。\n\n数字签名就是⽤CA⾃带的HASH算法对证书的内容进⾏HASH得到⼀个摘要，再⽤CA的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候,我再⽤同样的Hash算法,再次⽣成消息摘要，然后⽤CA的公钥对数字签名解密,得到CA创建的消息摘要,两者⼀⽐,就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。\n\n\n三、HTTP状态码\n\n状态码的类别：\n\n类别 原因 描述 1xx Informational(信息性状态码) 接受的请求正在处理 2xx Success(成功状态码) 请求正常处理完毕 3xx\nRedirection(重定向状态码) 需要进行附加操作一完成请求 4xx Client Error (客户端错误状态码) 服务器无法处理请求 5xx\nServer Error(服务器错误状态码) 服务器处理请求出错\n\n\n1. 2XX (SUCCESS 成功状态码)\n\n状态码2XX表示请求被正常处理了。\n\n（1）200 OK\n\n200 OK表示客户端发来的请求被服务器端正常处理了。\n\n（2）204 NO CONTENT\n\n该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。\n\n（3）206 PARTIAL CONTENT\n\n该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。\n\n\n2. 3XX (REDIRECTION 重定向状态码)\n\n3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。\n\n（1）301 MOVED PERMANENTLY\n\n永久重定向。 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location\n首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location\n中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。\n\n使用场景：\n\n * 当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。\n * 在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。\n\n（2）302 FOUND\n\n临时重定向。 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently\n状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI\n保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的\nURI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。\n\n使用场景：\n\n * 当我们在做活动时，登录到首页自动重定向，进入活动页面。\n * 未登陆的用户访问用户中心重定向到登录页面。\n * 访问404页面重新定向到首页。\n\n（3）303 SEE OTHER\n\n该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是\n303 状态码明确表示客户端应当采用 GET 方法获取资源。\n\n303 状态码通常作为 PUT 或 POST\n操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。\n\n注意：\n\n * 当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成GET，并删除请求报文内的主体，之后请求会再次自动发送。\n * 301、302 标准是禁止将 POST 方法变成 GET方法的，但实际大家都会这么做。\n\n（4）304 NOT MODIFIED\n\n浏览器缓存相关。 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304\n虽然被划分在 3XX 类别中，但是和重定向没有关系。\n\n带条件的请求（Http 条件请求）：使用 Get方法\n请求，请求报文中包含（if-match、if-none-match、if-modified-since、if-unmodified-since、if-range）中任意首部。\n\n状态码304并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。\n\n（5）307 TEMPORARY REDIRECT\n\n307表示临时重定向。 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。\n\n307 会遵守浏览器标准，不会从 POST 变成 GET。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location\n的地址 POST 内容。规范要求浏览器继续向 Location 的地址 POST 内容。\n\n\n3. 4XX (CLIENT ERROR 客户端错误状态码)\n\n4XX 的响应结果表明客户端是发生错误的原因所在。\n\n（1）400 BAD REQUEST\n\n该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。\n\n（2）401 UNAUTHORIZED\n\n该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、DIGEST 认证)的认证信息。若之前已进行过一次请求，则表示用户认证失败\n\n返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到 401\n响应，会弹出认证用的对话窗口。\n\n以下情况会出现401：\n\n * 401.1 - 登录失败。\n * 401.2 - 服务器配置导致登录失败。\n * 401.3 - 由于 ACL 对资源的限制而未获得授权。\n * 401.4 - 筛选器授权失败。\n * 401.5 - ISAPI/CGI 应用程序授权失败。\n * 401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。\n\n（3）403 FORBIDDEN\n\n该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。\n\nIIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：\n\n * 403.1 - 执行访问被禁止。\n * 403.2 - 读访问被禁止。\n * 403.3 - 写访问被禁止。\n * 403.4 - 要求 SSL。\n * 403.5 - 要求 SSL 128。\n * 403.6 - IP 地址被拒绝。\n * 403.7 - 要求客户端证书。\n * 403.8 - 站点访问被拒绝。\n * 403.9 - 用户数过多。\n * 403.10 - 配置无效。\n * 403.11 - 密码更改。\n * 403.12 - 拒绝访问映射表。\n * 403.13 - 客户端证书被吊销。\n * 403.14 - 拒绝目录列表。\n * 403.15 - 超出客户端访问许可。\n * 403.16 - 客户端证书不受信任或无效。\n * 403.17 - 客户端证书已过期或尚未生效\n * 403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。\n * 403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。\n * 403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。\n\n（4）404 NOT FOUND\n\n该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现404：\n\n * 404.0 -（无） – 没有找到文件或目录。\n * 404.1 - 无法在所请求的端口上访问 Web 站点。\n * 404.2 - Web 服务扩展锁定策略阻止本请求。\n * 404.3 - MIME 映射策略阻止本请求。\n\n（5）405 METHOD NOT ALLOWED\n\n该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过\nOPTIONS 方法（预检）来查看服务器允许的访问方法, 如下\n\nAccess-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE\n\n\n\n4. 5XX (SERVER ERROR 服务器错误状态码)\n\n5XX 的响应结果表明服务器本身发生错误.\n\n（1）500 INTERNAL SERVER ERROR\n\n该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。\n\n（2）502 BAD GATEWAY\n\n该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web\n服务器或者代理服务器对其进行修复。以下情况会出现502：\n\n * 502.1 - CGI （通用网关接口）应用程序超时。\n * 502.2 - CGI （通用网关接口）应用程序出错。\n\n（3）503 SERVICE UNAVAILABLE\n\n该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter\n首部字段再返回给客户端。\n\n使用场景：\n\n * 服务器停机维护时，主动用503响应请求；\n * nginx 设置限速，超过限速，会返回503。\n\n（4）504 GATEWAY TIMEOUT\n\n该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是HTTP 1.1中新加入的。\n\n使用场景：代码执行时间超时，或者发生了死循环。\n\n\n5. 总结\n\n（1）2XX 成功\n\n * 200 OK，表示从客户端发来的请求在服务器端被正确处理\n * 204 No content，表示请求成功，但响应报文不含实体的主体部分\n * 205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\n * 206 Partial Content，进行范围请求\n\n（2）3XX 重定向\n\n * 301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n * 302 found，临时性重定向，表示资源临时被分配了新的 URL\n * 303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n * 304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\n * 307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\n\n（3）4XX 客户端错误\n\n * 400 bad request，请求报文存在语法错误\n * 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n * 403 forbidden，表示对请求资源的访问被服务器拒绝\n * 404 not found，表示在服务器上没有找到请求的资源\n\n（4）5XX 服务器错误\n\n * 500 internal sever error，表示服务器端在执行请求时发生了错误\n * 501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n * 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\n\n\n6. 同样是重定向，307，303，302的区别？\n\n302是http1.0的协议状态码，在http1.1版本的时候为了细化302状态码⼜出来了两个303和307。\n303明确表示客户端应当采⽤get⽅法获取资源，他会把POST请求变为GET请求进⾏重定向。 307会遵照浏览器标准，不会从post变为get。\n\n\n四、DNS协议介绍\n\n\n1. DNS 协议是什么\n\n概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP\n地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS\n服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。\n\n作用： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。\n\n\n2. DNS同时使用TCP和UDP协议？\n\nDNS占用53号端口，同时使用TCP和UDP协议。 （1）在区域传输的时候使用TCP协议\n\n * 辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。\n * TCP是一种可靠连接，保证了数据的准确性。\n\n（2）在域名解析的时候使用UDP协议\n\n * 客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。\n\n\n3. DNS完整的查询过程\n\nDNS服务器解析域名的过程：\n\n * 首先会在浏览器的缓存中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步\n * 将请求发送给本地DNS服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步\n * 本地DNS服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址\n * 本地DNS服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址\n * 本地DNS服务器向权威域名服务器发送请求，域名服务器返回对应的结果\n * 本地DNS服务器将返回结果保存在缓存中，便于下次使用\n * 本地DNS服务器将返回结果返回给浏览器\n\n比如要查询 www.baidu.com 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS\n服务器中，本地DNS服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP\n地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu\n的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。\n\n\n4. 迭代查询与递归查询\n\n实际上，DNS解析是一个包含迭代查询和递归查询的过程。\n\n * 递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。\n * 迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。\n\n一般我们向本地 DNS 服务器发送请求的方式就是递归查询，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我 们最终的请求结果。而本地 DNS\n服务器向其他域名服务器请求的过程是迭代查询的过程，因为每一次域名服务器只返回单次 查询的结果，下一级的查询由本地 DNS 服务器自己进行。\n\n\n5. DNS 记录和报文\n\nDNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为\n\n（Name，Value，Type，TTL）\n\n\n其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。\n\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：\n\n * 如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP\n   地址的映射。\n * 如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式\n   查询时，返回下一级需要查询的 DNS 服务器的信息。\n * 如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名\n   对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。\n * 如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一\n   样的，都是为了解决规范主机名不利于记忆的缺点。\n\n\n五、网络模型\n\n\n1. OSI七层模型\n\nISO为了更好的使网络应用更为普及，推出了OSI参考模型。\n\n（1）应用层\n\nOSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP等。\n\n * 在客户端与服务器中经常会有数据的请求，这个时候就是会用到http(hyper text transfer\n   protocol)(超文本传输协议)或者https.在后端设计数据接口时，我们常常使用到这个协议。\n * FTP是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘``迅雷应该是基于此协议的。\n * SMTP是simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。\n\n（2）表示层\n\n表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。\n\n在项目开发中，为了方便数据传输，可以使用base64对数据进行编解码。如果按功能来划分，base64应该是工作在表示层。\n\n（3）会话层\n\n会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。\n\n（4）传输层\n\n传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP\nUDP就是在这一层。端口号既是这里的“端”。\n\n（5）网络层\n\n本层通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的IP层。这一层就是我们经常说的IP协议层。IP协议是Internet的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。\n\n（6）数据链路层\n\n将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。\n网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。\n\n（7）物理层\n\n实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。\n\nOSI七层模型通信特点：对等通信\n对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。\n\n\n2. TCP/IP五层协议\n\nTCP/IP五层协议和OSI的七层协议对应关系如下：\n\n * 应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如\n   HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。\n * 传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：\n   * 传输控制协议 (Transmission Control\n     Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；\n   * 用户数据报协议 (User Datagram\n     Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。\n * 网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。\n * 数据链路层 (data link layer)：负责将网络层交下来的 IP\n   数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。\n * 物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。\n\n从上图中可以看出，TCP/IP模型比OSI模型更加简洁，它把应用层/表示层/会话层全部整合为了应用层。\n\n在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。\n在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：\n\n同样，TCP/IP五层协议的通信方式也是对等通信：\n\n\n六、TCP与UDP\n\n\n1. TCP 和 UDP的概念及特点\n\nTCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：\n\n（1）UDP\n\nUDP的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\n\n它的特点如下：\n\n1）面向无连接\n\n首先 UDP 是不需要和\nTCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\n\n具体来说就是：\n\n * 在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\n * 在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\n\n2）有单播，多播，广播的功能\n\nUDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n\n3）面向报文\n\n发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文\n\n4）不可靠性\n\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。\n\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\n\n再者网络环境时好时坏，但是 UDP\n因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用\nUDP 而不是 TCP。\n\n5）头部开销小，传输数据报文时是很高效的。\n\nUDP 头部包含了以下几个数据：\n\n * 两个十六位的端口号，分别为源端口（可选字段）和目标端口\n * 整个数据报文的长度\n * 整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误\n\n因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。\n\n（2）TCP TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。\n\n它有以下几个特点：\n\n1）面向连接\n\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。\n\n2）仅支持单播传输\n\n每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。\n\n3）面向字节流\n\nTCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。\n\n4）可靠传输\n\n对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。\n\n5）提供拥塞控制\n\n当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。\n\n6）提供全双工通信\n\nTCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）\n\n\n2. TCP和UDP的区别\n\nUDP TCP 是否连接 无连接 面向连接 是否可靠 不可靠传输，不使用流量控制和拥塞控制 可靠传输（数据顺序和正确性），使用流量控制和拥塞控制 连接对象个数\n支持一对一，一对多，多对一和多对多交互通信 只能是一对一通信 传输方式 面向报文 面向字节流 首部开销 首部开销小，仅8字节 首部最小20字节，最大60字节\n适用场景 适用于实时应用，例如视频会议、直播 适用于要求可靠传输的应用，例如文件传输\n\n\n3. TCP和UDP的使用场景\n\n * TCP应用场景：\n   效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。\n * UDP应用场景：\n   效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。\n\n\n4. UDP协议为什么不可靠？\n\nUDP在传输数据之前不需要先建立连接，远地主机的运输层在接收到UDP报文后，不需要确认，提供不可靠交付。总结就以下四点：\n\n * 不保证消息交付：不确认，不重传，无超时\n * 不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞\n * 不跟踪连接状态：不必建立连接或重启状态机\n * 不进行拥塞控制：不内置客户端或网络反馈机制\n\n\n5. TCP的重传机制\n\n由于TCP的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。TCP使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。\n\nTCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。\n\n\n6. TCP的拥塞控制机制\n\nTCP的拥塞控制机制主要是以下四种机制：\n\n * 慢启动（慢开始）\n * 拥塞避免\n * 快速重传\n * 快速恢复\n\n（1）慢启动（慢开始）\n\n * 在开始发送的时候设置cwnd = 1（cwnd指的是拥塞窗口）\n * 思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。\n * 为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限(ssthresh 状态变量)\n   * 当cnwd < ssthresh，使用慢开始算法\n   * 当cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法\n   * 当cnwd > ssthresh，使用拥塞避免算法\n\n（2）拥塞避免\n\n * 拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。\n * 思路： 让拥塞窗口cwnd缓慢的增大，即每经过一个返回时间RTT就把发送方的拥塞控制窗口加一\n * 无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如图所示:\n   其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n\n（3）快速重传\n\n * 快重传要求接收方在收到一个失序的报文段后就立即发出重复确认(为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\n * 由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量\n\n（4）快速恢复\n\n * 当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。\n * 考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。\n\n\n7. TCP的流量控制机制\n\n一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。\n\n * 当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。\n * 当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告\n   。接收方在发送的每一确认中都含有一个窗口通告。）\n * 如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。\n * 如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口\n   。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。\n\n\n8. TCP的可靠传输机制\n\nTCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。\n\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但\n未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发\n送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。\n如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如\n果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送\n但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示，\n说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。\n\n接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文\n段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都\n已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。\n\n发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。\n\n但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP\n协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。\n\n\n9. TCP的三次握手和四次挥手\n\n（1）三次握手\n\n三次握手（Three-way\nHandshake)其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n\n刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n\n * 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。\n\n> 首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。\n\n * 第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN +\n   1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。\n\n> 在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y\n\n * 第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的\n   SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n> 确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。\n\n那为什么要三次握手呢？两次不行吗？\n\n * 为了确认双方的接收能力和发送能力都正常\n * 如果是用两次握手，则会出现下面这种情况：\n\n> 如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。\n\n简单来说就是以下三步：\n\n * 第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。\n * 第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入\n   SYN-RECEIVED 状态。\n * 第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED\n   状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\n\nTCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。\n第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否\n已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。\n\n（2）四次挥手\n\n刚开始双方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n\n * 第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n\n> 即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n\n * 第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK\n   报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n\n> 即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n\n * 第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n\n> 即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n\n * 第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于\n   TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK\n   报文之后，就处于关闭连接了，处于 CLOSED 状态。\n\n> 即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n\n那为什么需要四次挥手呢？\n\n> 因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四次挥手。\n\n简单来说就是以下四步：\n\n * 第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。\n * 第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT\n   状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。\n * 第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。\n * 第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续\n   2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED\n   状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n\nTCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代\n表不能再向对方发送数据，连接处于的是半释放的状态。\n\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。\n\n\n10. TCP粘包是怎么回事，如何处理?\n\n默认情况下, TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们. 如果短时间有多个数据发送, 会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅\nsocket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.\n\n如果是传输⽂件的话, 那么根本不⽤处理粘包的问题, 来⼀个包拼⼀个包就好了。但是如果是多条消息, 或者是别的⽤途的数据那么就需要处理粘包.\n\n下面看⼀个例⼦, 连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况: A. 先接收到 data1,\n然后接收到 data2 . B. 先接收到 data1 的部分数据, 然后接收到 data1 余下的部分以及 data2 的全部. C. 先接收到了 data1\n的全部数据和 data2 的部分数据, 然后接收到了 data2 的余下的数据. D. ⼀次性接收到了 data1 和 data2 的全部数据.\n\n其中的 BCD 就是我们常⻅的粘包的情况. ⽽对于处理粘包的问题, 常⻅的解决⽅案有:\n\n * 多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好, 适⽤于交互频率特别低的场景. 缺点也很明显,\n   对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.\n * 关闭 Nagle 算法：关闭 Nagle 算法, 在 Node.js 中你可以通过 socket.setNoDelay() ⽅法来关闭 Nagle 算法,\n   让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤),\n   并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩, 并且频率特别⾼的, 关闭 Nagle 纯属⾃废武功。另外, 该⽅法不适⽤于⽹络较差的情况, 因为\n   Nagle 算法是在服务端进⾏的包合并情况, 但是如果短时间内客户端的⽹络情况不好, 或者应⽤层由于某些原因不能及时将 TCP 的数据 recv,\n   就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)\n * 进⾏封包/拆包： 封包/拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前, 于其前/后放⼀些有特征的数据, 然后收到数据的时\n   候根据特征数据分割出来各个数据包。\n\n\n11. 为什么UDP不会粘包？\n\n * TCP协议是⾯向流的协议，UDP是⾯向消息的协议。UDP段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据\n * UDP具有保护消息边界，在每个UDP包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包,如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。\n\n\n七、WEBSOCKET\n\n\n1. 对 WEBSOCKET 的理解\n\nWebSocket是HTML5提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，\n并进行双向数据传输。\n\nWebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。\n\nWebSocket原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients\nIDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。\n\nWebSocket 特点的如下：\n\n * 支持双向通信，实时性更强\n * 可以发送文本，也可以发送二进制数据‘’\n * 建立在TCP协议之上，服务端的实现比较容易\n * 数据格式比较轻量，性能开销小，通信高效\n * 没有同源限制，客户端可以与任意服务器通信\n * 协议标识符是ws（如果加密，则为wss），服务器网址就是 URL\n * 与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n\nWebsocket的使用方法如下：\n\n在客户端中：\n\n// 在index.html中直接写WebSocket，设置服务端的端口号为 9999\nlet ws = new WebSocket('ws://localhost:9999');\n// 在客户端与服务端建立连接后触发\nws.onopen = function() {\n    console.log(\"Connection open.\"); \n    ws.send('hello');\n};\n// 在服务端给客户端发来消息的时候触发\nws.onmessage = function(res) {\n    console.log(res);       // 打印的是MessageEvent对象\n    console.log(res.data);  // 打印的是收到的消息\n};\n// 在客户端与服务端建立关闭后触发\nws.onclose = function(evt) {\n  console.log(\"Connection closed.\");\n}; \n\n\n\n2. 即时通讯的实现：短轮询、长轮询、SSE 和 WEBSOCKET 间的区别？\n\n短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。\n\n短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http\n请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立\nhttp 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。\n\n长轮询的基本思路：\n首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端\nJavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http\n请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。\n\nSSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http\n协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE\n就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的\nhttp 请求，相比之下节约了资源。\n\nWebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket\n协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE\n的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。\n\n上面的四个通信协议，前三个都是基于HTTP协议的。\n\n对于这四种即使通信协议，从性能的角度来看： WebSocket > 长连接（SEE） > 长轮询 > 短轮询\n但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了： 短轮询 > 长轮询 > 长连接（SEE） > WebSocket\n所以，还是要根据具体的使用场景来判断使用哪种方式。","frontMatter":{"title":"计算机网络"}},{"name":"浏览器原理","path":"参考八股文/浏览器原理.html","texts":"一、浏览器安全\n\n\n1.  什么是 XSS 攻击？\n\n（1）概念\n\nXSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\n\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n\n攻击者可以通过这种攻击方式可以进行以下操作：\n\n * 获取页面的数据，如DOM、cookie、localStorage；\n * DOS攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；\n * 破坏页面结构；\n * 流量劫持（将链接指向某网站）；\n\n（2）攻击类型\n\nXSS 可以分为存储型、反射型和 DOM 型：\n\n * 存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。\n * 反射型指的是攻击者诱导用户访问一个带有恶意代码的 URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS\n   代码的数据后当做脚本执行，最终完成 XSS 攻击。 \n * DOM 型指的通过修改页面的 DOM 节点形成的 XSS。\n\n1）存储型 XSS 的攻击步骤：\n\n 1. 攻击者将恶意代码提交到⽬标⽹站的数据库中。\n 2. ⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。\n 3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n 4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。\n\n2）反射型 XSS 的攻击步骤：\n\n 1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n 2. ⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。\n 3. ⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。\n 4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\n反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在 URL ⾥。\n\n反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL\n才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。\n\n3）DOM 型 XSS 的攻击步骤：\n\n 1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n 2. ⽤户打开带有恶意代码的 URL。\n 3. ⽤户浏览器接收到响应后解析执⾏，前端 JavaScript 取出 URL 中的恶意代码并执⾏。\n 4. 恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。\n\nDOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript\n⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。\n\n\n2. 如何防御 XSS 攻击？\n\n可以看到XSS危害如此之大， 那么在开发网站时就要做好防御措施，具体措施如下：\n\n * 可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到 HTML\n   中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n * 使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n\n>  1. CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n>  2. 通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式\n\n * 对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。\n\n\n3. 什么是 CSRF 攻击？\n\n（1）概念\n\nCSRF\n攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\n\nCSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n\n（2）攻击类型\n\n常见的 CSRF 攻击有三种：\n\n * GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。\n * POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n * 链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。\n\n\n4. 如何防御 CSRF 攻击？\n\nCSRF 攻击可以使用以下方法来防护：\n\n * 进行同源检测，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin\n   或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer\n   可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer\n   字段会告诉服务器该网页是从哪个页面链接过来的）\n * 使用 CSRF Token 进行验证，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token\n   ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie\n   单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个\n   token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session\n   中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。\n * 对 Cookie 进行双重验证，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从\n   cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie\n   中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比\n   CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS\n   漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n * 在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite\n   一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是\n   GET 请求，且会发生页面跳转的请求所使用。\n\n\n5. 什么是中间人攻击？如何防范中间人攻击？\n\n中间⼈ (Man-in-the-middle attack, MITM) 是指攻击者与通讯的两端分别创建独⽴的联系, 并交换其所收到的数据,\n使通讯的两端认为他们正在通过⼀个私密的连接与对⽅直接对话, 但事实上整个会话都被攻击者完全控制。在中间⼈攻击中，攻击者可以拦截通讯双⽅的通话并插⼊新的内容。\n\n攻击过程如下:\n\n * 客户端发送请求到服务端，请求被中间⼈截获\n * 服务器向客户端发送公钥\n * 中间⼈截获公钥，保留在⾃⼰⼿上。然后⾃⼰⽣成⼀个伪造的公钥，发给客户端\n * 客户端收到伪造的公钥后，⽣成加密hash值发给服务器\n * 中间⼈获得加密hash值，⽤⾃⼰的私钥解密获得真秘钥,同时⽣成假的加密hash值，发给服务器\n * 服务器⽤私钥解密获得假密钥,然后加密数据传输给客户端\n\n\n6. 有哪些可能引起前端安全的问题?\n\n * 跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛,\n   起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于\n   JavaScript / CSS / Flash 等；\n * iframe的滥⽤:\n   iframe中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在iframe中运⾏JavaScirpt脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；\n * 跨站点请求伪造（Cross-Site Request Forgeries，CSRF）:\n   指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击\n * 恶意第三⽅库: ⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。\n\n\n7. 网络劫持有哪几种，如何防范？\n\n⽹络劫持分为两种:\n\n（1）DNS劫持: (输⼊京东被强制跳转到淘宝这就属于dns劫持)\n\n * DNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器\n * 302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容\n\n（2）HTTP劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告)\n\nDNS劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。\n\n\n二、进程与线程\n\n\n1. 进程与线程的概念\n\n从本质上说，进程和线程都是 CPU 工作时间片的一个描述：\n\n * 进程描述了 CPU 在运行指令及加载和保存上下文所需的时间，放在应用上来说就代表了一个程序。\n * 线程是进程中的更小单位，描述了执行一段指令所需的时间。\n\n进程是资源分配的最小单位，线程是CPU调度的最小单位。\n\n一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程。进程是运行在虚拟内存上的，虚拟内存是用来解决用户对硬件资源的无限需求和有限的硬件资源之间的矛盾的。从操作系统角度来看，虚拟内存即交换文件；从处理器角度看，虚拟内存即虚拟地址空间。\n\n如果程序很多时，内存可能会不够，操作系统为每个进程提供一套独立的虚拟地址空间，从而使得同一块物理内存在不同的进程中可以对应到不同或相同的虚拟地址，变相的增加了程序可以使用的内存。\n\n进程和线程之间的关系有以下四个特点：\n\n（1）进程中的任意一线程执行出错，都会导致整个进程的崩溃。\n\n（2）线程之间共享进程中的数据。\n\n（3）当一个进程关闭之后，操作系统会回收进程所占用的内存，\n当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。\n\n（4）进程之间的内容相互隔离。 进程隔离就是为了使操作系统中的进程互不干扰，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B\n的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信的机制了。\n\nChrome浏览器的架构图： 从图中可以看出，最新的 Chrome 浏览器包括：\n\n * 1 个浏览器主进程\n * 1 个 GPU 进程\n * 1 个网络进程\n * 多个渲染进程\n * 多个插件进程\n\n这些进程的功能：\n\n * 浏览器进程：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。\n * 渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎\n   V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。\n * GPU 进程：其实， GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得\n   GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。\n * 网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。\n * 插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。\n\n所以，打开一个网页，最少需要四个进程：1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程。如果打开的页面有运行插件的话，还需要再加上 1\n个插件进程。\n\n虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：\n\n * 更高的资源占用：因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。\n * 更复杂的体系架构：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。\n\n\n2. 进程和线程的区别\n\n * 进程可以看做独立应用，线程不能\n * 资源：进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）；线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）。\n * 通信方面：线程间可以通过直接共享同一进程中的资源，而进程通信需要借助 进程间通信。\n * 调度：进程切换比线程切换的开销要大。线程是CPU调度的基本单位，线程的切换不会引起进程切换，但某个进程中的线程切换到另一个进程中的线程时，会引起进程切换。\n * 系统开销：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存、I/O\n   等，其开销远大于创建或撤销线程时的开销。同理，在进行进程切换时，涉及当前执行进程 CPU\n   环境还有各种各样状态的保存及新调度进程状态的设置，而线程切换时只需保存和设置少量寄存器内容，开销较小。\n\n\n3. 浏览器渲染进程的线程有哪些\n\n浏览器的渲染进程的线程总共有五种： （1)GUI渲染线程\n负责渲染浏览器页面，解析HTML、CSS，构建DOM树、构建CSSOM树、构建渲染树和绘制页面；当界面需要重绘或由于某种操作引发回流时，该线程就会执行。\n\n注意：GUI渲染线程和JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。\n\n（2）JS引擎线程\nJS引擎线程也称为JS内核，负责处理Javascript脚本程序，解析Javascript脚本，运行代码；JS引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个Tab页中无论什么时候都只有一个JS引擎线程在运行JS程序；\n\n注意：GUI渲染线程与JS引擎线程的互斥关系，所以如果JS执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n\n（3）时间触发线程\n时间触发线程属于浏览器而不是JS引擎，用来控制事件循环；当JS引擎执行代码块如setTimeOut时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理；\n\n注意：由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）；\n\n（4）定时器触发进程\n定时器触发进程即setInterval与setTimeout所在线程；浏览器定时计数器并不是由JS引擎计数的，因为JS引擎是单线程的，如果处于阻塞线程状态就会影响记计时的准确性；因此使用单独线程来计时并触发定时器，计时完毕后，添加到事件队列中，等待JS引擎空闲后执行，所以定时器中的任务在设定的时间点不一定能够准时执行，定时器只是在指定时间点将任务添加到事件队列中；\n\n注意：W3C在HTML标准中规定，定时器的定时时间不能小于4ms，如果是小于4ms，则默认为4ms。\n\n（5）异步http请求线程\n\n * XMLHttpRequest连接后通过浏览器新开一个线程请求；\n * 检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将回调函数放入事件队列中，等待JS引擎空闲后执行；\n\n\n4. 进程之前的通信方式\n\n（1）管道通信\n\n管道是一种最基本的进程间通信机制。管道就是操作系统在内核中开辟的一段缓冲区，进程1可以将需要交互的数据拷贝到这段缓冲区，进程2就可以读取了。\n\n管道的特点：\n\n * 只能单向通信\n * 只能血缘关系的进程进行通信\n * 依赖于文件系统\n * 生命周期随进程\n * 面向字节流的服务\n * 管道内部提供了同步机制\n\n（2）消息队列通信\n\n消息队列就是一个消息的列表。用户可以在消息队列中添加消息、读取消息等。消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。\n每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。可以通过发送消息来避免命名管道的同步和阻塞问题。但是消息队列与命名管道一样，每个数据块都有一个最大长度的限制。\n\n使用消息队列进行进程间通信，可能会收到数据块最大长度的限制约束等，这也是这种通信方式的缺点。如果频繁的发生进程间的通信行为，那么进程需要频繁地读取队列中的数据到内存，相当于间接地从一个进程拷贝到另一个进程，这需要花费时间。\n\n（3）信号量通信\n\n共享内存最大的问题就是多进程竞争内存的问题，就像类似于线程安全问题。我们可以使用信号量来解决这个问题。信号量的本质就是一个计数器，用来实现进程之间的互斥与同步。例如信号量的初始值是\n1，然后 a 进程来访问内存1的时候，我们就把信号量的值设为 0，然后进程b 也要来访问内存1的时候，看到信号量的值为 0\n就知道已经有进程在访问内存1了，这个时候进程 b 就会访问不了内存1。所以说，信号量也是进程之间的一种通信方式。\n\n（4）信号通信\n\n信号（Signals\n）是Unix系统中使用的最古老的进程间通信的方法之一。操作系统通过信号来通知进程系统中发生了某种预先规定好的事件（一组事件中的一个），它也是用户进程之间通信和同步的一种原始机制。\n\n（5）共享内存通信\n\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问（使多个进程可以访问同一块内存空间）。共享内存是最快的 IPC\n方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\n\n（6）套接字通信\n\n上面说的共享内存、管道、信号量、消息队列，他们都是多个进程在一台主机之间的通信，那两个相隔几千里的进程能够进行通信吗？答是必须的，这个时候 Socket\n这家伙就派上用场了，例如我们平时通过浏览器发起一个 http 请求，然后服务器给你返回对应的数据，这种就是采用 Socket 的通信方式了。\n\n\n5. 僵尸进程和孤儿进程是什么？\n\n * 孤儿进程：父进程退出了，而它的一个或多个进程还在运行，那这些子进程都会成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。\n * 僵尸进程：子进程比父进程先结束，而父进程又没有释放子进程占用的资源，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵死进程。\n\n\n6. 死锁产生的原因？ 如果解决死锁的问题？\n\n所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。\n\n系统中的资源可以分为两类：\n\n * 可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺，CPU和主存均属于可剥夺性资源；\n * 不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。\n\n产生死锁的原因：\n\n（1）竞争资源\n\n * 产生死锁中的竞争资源之一指的是竞争不可剥夺资源（例如：系统中只有一台打印机，可供进程P1使用，假定P1已占用了打印机，若P2继续要求打印机打印将阻塞）\n * 产生死锁中的竞争资源另外一种资源指的是竞争临时资源（临时资源包括硬件中断、信号、消息、缓冲区内的消息等），通常消息通信顺序进行不当，则会产生死锁\n\n（2）进程间推进顺序非法\n\n若P1保持了资源R1，P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。例如，当P1运行到P1：Request（R2）时，将因R2已被P2占用而阻塞；当P2运行到P2：Request（R1）时，也将因R1已被P1占用而阻塞，于是发生进程死锁\n\n产生死锁的必要条件：\n\n * 互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。\n * 请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。\n * 不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。\n * 环路等待条件：在发生死锁时，必然存在一个进程——资源的环形链。\n\n预防死锁的方法：\n\n * 资源一次性分配：一次性分配所有资源，这样就不会再有请求了（破坏请求条件）\n * 只要有一个资源得不到分配，也不给这个进程分配其他的资源（破坏请保持条件）\n * 可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）\n * 资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）\n\n\n7. 如何实现浏览器内多个标签页之间的通信?\n\n实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：\n\n * 使用 websocket 协议，因为 websocket\n   协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。\n * 使用 ShareWorker 的方式，shareWorker\n   会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。\n * 使用 localStorage 的方式，我们可以在一个标签页对 localStorage\n   的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 localStorage\n   对象就是充当的中介者的角色。\n * 使用 postMessage 方法，如果我们能够获得对应标签页的引用，就可以使用postMessage 方法，进行通信。\n\n\n8. 对SERVICE WORKER的理解\n\nService Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为\nService Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。\n\nService Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install\n事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：\n\n// index.js\nif (navigator.serviceWorker) {\n  navigator.serviceWorker\n    .register('sw.js')\n    .then(function(registration) {\n      console.log('service worker 注册成功')\n    })\n    .catch(function(err) {\n      console.log('servcie worker 注册失败')\n    })\n}\n// sw.js\n// 监听 `install` 事件，回调中缓存所需文件\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches.open('my-cache').then(function(cache) {\n      return cache.addAll(['./index.html', './index.js'])\n    })\n  )\n})\n// 拦截所有请求事件\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\nself.addEventListener('fetch', e => {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response) {\n        return response\n      }\n      console.log('fetch source')\n    })\n  )\n})\n\n\n打开页面，可以在开发者工具中的 Application 看到 Service Worker 已经启动了： 在 Cache 中也可以发现所需的文件已被缓存：\n\n\n三、浏览器缓存\n\n\n1. 对浏览器的缓存机制的理解\n\n浏览器缓存的全过程：\n\n * 浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；\n * 下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的\n   max-age，则没有过期，并命中强缓存，直接从本地读取资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；\n * 如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；\n * 服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回\n   304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；\n * 如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回\n   304；不一致则返回新的 last-modified 和文件并返回 200；\n\n很多网站的资源后面都加了版本号，这样做的目的是：每次升级了 JS 或 CSS 文件后，为了防止浏览器进行缓存，强制改变版本号，客户端浏览器就会重新下载新的 JS\n或 CSS 文件 ，以保证用户能够及时获得网站的最新更新。\n\n\n2. 浏览器资源缓存的位置有哪些？\n\n资源缓存的位置一共有 3 种，按优先级从高到低分别是：\n\n 1. Service Worker：Service Worker 运行在 JavaScript 主线程之外，虽然由于脱离了浏览器窗体无法直接访问\n    DOM，但是它可以完成离线缓存、消息推送、网络代理等功能。它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。当\n    Service Worker 没有命中缓存的时候，需要去调用 fetch 函数获取 数据。也就是说，如果没有在 Service Worker\n    命中缓存，会根据缓存查找优先级去查找数据。但是不管是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示是从 Service\n    Worker 中获取的内容。\n\n 2. Memory Cache： Memory Cache\n    就是内存缓存，它的效率最快，**但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。**一旦我们关闭 Tab\n    页面，内存中的缓存也就被释放了。\n\n 3. Disk Cache： Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache\n    **胜在容量和存储时效性上。**在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder\n    中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。\n\nDisk Cache： Push Cache 是 HTTP/2\n中的内容，当以上三种缓存都没有命中时，它才会被使用。并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。其具有以下特点：\n\n * 所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好\n * 可以推送 no-cache 和 no-store 的资源\n * 一旦连接被关闭，Push Cache 就被释放\n * 多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存\n * Push Cache 中的缓存只能被使用一次\n * 浏览器可以拒绝接受已经存在的资源推送\n * 可以给其他域名推送资源\n\n\n3. 协商缓存和强缓存的区别\n\n（1）强缓存\n\n使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。\n\n强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。\n\n（1）服务器通过在响应头中添加 Expires\n属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。\n\n（2）Expires 是 http1.0 中的方式，因为它的一些缺点，在 HTTP 1.1 中提出了一个新的头部属性就是 Cache-Control\n属性，它提供了对资源的缓存的更精确的控制。它有很多不同的值，\n\nCache-Control可设置的字段：\n\n * public：设置了该字段值的资源表示可以被任何对象（包括：发送请求的客户端、代理服务器等等）缓存。这个字段值不常用，一般还是使用max-age=来精确控制；\n * private：设置了该字段值的资源只能被用户浏览器缓存，不允许任何代理服务器缓存。在实际开发当中，对于一些含有用户信息的HTML，通常都要设置这个字段值，避免代理服务器(CDN)缓存；\n * no-cache：设置了该字段需要先和服务端确认返回的资源是否发生了变化，如果资源未发生变化，则直接使用缓存好的资源；\n * no-store：设置了该字段表示禁止任何缓存，每次都会向服务端发起新的请求，拉取最新的资源；\n * max-age=：设置缓存的最大有效期，单位为秒；\n * s-maxage=：优先级高于max-age=，仅适用于共享缓存(CDN)，优先级高于max-age或者Expires头；\n * max-stale[=]：设置了该字段表明客户端愿意接收已经过期的资源，但是不能超过给定的时间限制。\n\n一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires。\n\nno-cache和no-store很容易混淆：\n\n * no-cache 是指先要和服务器确认是否有资源更新，在进行判断。也就是说没有强缓存，但是会有协商缓存；\n * no-store 是指不使用任何缓存，每次请求都直接从服务器获取资源。\n\n（2）协商缓存\n\n如果命中强制缓存，我们无需发起新的请求，直接使用缓存内容，如果没有命中强制缓存，如果设置了协商缓存，这个时候协商缓存就会发挥作用了。\n\n上面已经说到了，命中协商缓存的条件有两个：\n\n * max-age=xxx 过期了\n * 值为no-store\n\n使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304\n状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。\n\n协商缓存也可以通过两种方式来设置，分别是 http 头信息中的Etag 和Last-Modified属性。\n\n（1）服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个\nIf-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified\n的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304\n状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified\n标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified\n却没有改变，这样会造成缓存命中的不准确。\n\n（2）因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag\n属性。服务器在返回资源的时候，在头信息中添加了 Etag\n属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match\n属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag\n的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。\n\n当 Last-Modified 和 Etag 属性同时出现的时候，Etag\n的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag\n的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。\n\n总结：\n\n强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。\n\n\n4. 为什么需要浏览器缓存？\n\n对于浏览器的缓存，主要针对的是前端的静态资源，最好的效果就是，在发起请求之后，拉取相应的静态资源，并保存在本地。如果服务器的静态资源没有更新，那么在下次请求的时候，就直接从本地读取即可，如果服务器的静态资源已经更新，那么我们再次请求的时候，就到服务器拉取新的资源，并保存在本地。这样就大大的减少了请求的次数，提高了网站的性能。这就要用到浏览器的缓存策略了。\n\n所谓的浏览器缓存指的是浏览器将用户请求过的静态资源，存储到电脑本地磁盘中，当浏览器再次访问时，就可以直接从本地加载，不需要再去服务端请求了。\n\n使用浏览器缓存，有以下优点：\n\n * 减少了服务器的负担，提高了网站的性能\n * 加快了客户端网页的加载速度\n * 减少了多余网络数据传输\n\n\n5. 点击刷新按钮或者按 F5、按 CTRL+F5 （强制刷新）、地址栏回车有什么区别？\n\n * 点击刷新按钮或者按 F5：\n   浏览器直接对本地的缓存文件过期，但是会带上If-Modifed-Since，If-None-Match，这就意味着服务器会对文件检查新鲜度，返回结果可能是\n   304，也有可能是 200。\n * 用户按 Ctrl+F5（强制刷新）： 浏览器不仅会对本地文件过期，而且不会带上\n   If-Modifed-Since，If-None-Match，相当于之前从来没有请求过，返回结果是 200。\n * 地址栏回车： 浏览器发起请求，按照正常流程，本地检查是否过期，然后服务器检查新鲜度，最后返回内容。\n\n\n四、浏览器组成\n\n\n1. 对浏览器的理解\n\n浏览器的主要功能是将用户选择的 web 资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是 HTML，也包括 PDF、image\n及其他格式。用户用 URI（Uniform Resource Identifier 统一资源标识符）来指定所请求资源的位置。\n\nHTML 和 CSS 规范中规定了浏览器解释 html 文档的方式，由 W3C 组织对这些规范进行维护，W3C 是负责制定 web\n标准的组织。但是浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为 web 开发者带来了严重的兼容性问题。\n\n浏览器可以分为两部分，shell 和 内核。其中 shell 的种类相对比较多，内核则比较少。也有一些浏览器并不区分外壳和内核。从 Mozilla 将\nGecko 独立出来后，才有了外壳和内核的明确划分。\n\n * shell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，参数设置等等。它是调用内核来实现各种功能的。\n * 内核是浏览器的核心。内核是基于标记语言显示内容的程序或模块。\n\n\n2. 对浏览器内核的理解\n\n浏览器内核主要分成两部分：\n\n * 渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml\n   文档及图片，它也可以借助插件显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。\n * JS 引擎：解析和执行 javascript 来实现网页的动态效果。\n\n最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。\n\n\n3. 常见的浏览器内核比较\n\n * Trident： 这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE\n   占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE\n   的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量\n   Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。\n * Gecko： 这是 Firefox 和 Flock\n   所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。\n * Presto： Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理\n   JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。\n * Webkit： Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和\n   Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的\n   KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。\n * Blink： 谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发\n   Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit\n   是KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto\n   内核，加入 Google 阵营，跟随谷歌一起研发 Blink。\n\n\n4. 常见浏览器所用内核\n\n（1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；\n\n（2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；\n\n（3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；\n\n（4） Safari 浏览器内核：Webkit 内核；\n\n（5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；\n\n（6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；\n\n（7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；\n\n（8） 百度浏览器、世界之窗内核：IE 内核；\n\n（9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；\n\n（10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说是基于火狐内核。\n\n\n5. 浏览器的主要组成部分\n\n * ⽤户界⾯ 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗⼝显示的您请求的⻚⾯外，其他显示的各个部分都属于⽤户界⾯。\n * 浏览器引擎 在⽤户界⾯和呈现引擎之间传送指令。\n * 呈现引擎 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。\n * ⽹络 ⽤于⽹络调⽤，⽐如 HTTP 请求。其接⼝与平台⽆关，并为所有平台提供底层实现。\n * ⽤户界⾯后端 ⽤于绘制基本的窗⼝⼩部件，⽐如组合框和窗⼝。其公开了与平台⽆关的通⽤接⼝，⽽在底层使⽤操作系统的⽤户界⾯⽅法。\n * JavaScript 解释器。⽤于解析和执⾏ JavaScript 代码。\n * 数据存储 这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5)\n   定义了“⽹络数据库”，这是⼀个完整（但是轻便）的浏览器内数据库。\n\n值得注意的是，和⼤多数浏览器不同，Chrome 浏览器的每个标签⻚都分别对应⼀个呈现引擎实例。每个标签⻚都是⼀个独⽴的进程。\n\n\n五、浏览器渲染原理\n\n\n1. 浏览器的渲染过程\n\n浏览器渲染主要有以下步骤：\n\n * 首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。\n * 然后对 CSS 进行解析，生成 CSSOM 规则树。\n * 根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM\n   元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些\n   DOM元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。\n * 当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。\n * 布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。\n\n大致过程如图所示：\n\n注意： 这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html 都解析完成之后再去构建和布局 render\n树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。\n\n\n2. 浏览器渲染优化\n\n（1）针对JavaScript：\nJavaScript既会阻塞HTML的解析，也会阻塞CSS的解析。因此我们可以对JavaScript的加载方式进行改变，来进行优化：\n\n（1）尽量将JavaScript文件放在body的最后\n\n（2） body中间尽量不要写<script>标签\n\n（3）<script>标签的引入资源方式有三种，有一种就是我们常用的直接引入，还有两种就是使用 async 属性和 defer\n属性来异步引入，两者都是去异步加载外部的JS文件，不会阻塞DOM的解析（尽量使用异步加载）。三者的区别如下：\n\n * script 立即停止页面渲染去加载资源文件，当资源加载完毕后立即执行js代码，js代码执行完毕后继续渲染页面；\n * async 是在下载完成之后，立即异步加载，加载好后立即执行，多个带async属性的标签，不能保证加载的顺序；\n * defer 是在下载完成之后，立即异步加载。加载好后，如果 DOM 树还没构建好，则先等 DOM\n   树解析好再执行；如果DOM树已经准备好，则立即执行。多个带defer属性的标签，按照顺序执行。\n\n（2）针对CSS：使用CSS有三种方式：使用link、@import、内联样式，其中link和@import都是导入外部样式。它们之间的区别：\n\n * link：浏览器会派发一个新等线程(HTTP线程)去加载资源文件，与此同时GUI渲染线程会继续向下渲染代码\n * @import：GUI渲染线程会暂时停止渲染，去服务器加载资源文件，资源文件没有返回之前不会继续渲染(阻碍浏览器渲染)\n * style：GUI直接渲染\n\n外部样式如果长时间没有加载完毕，浏览器为了用户体验，会使用浏览器会默认样式，确保首次渲染的速度。所以CSS一般写在headr中，让浏览器尽快发送请求去获取css样式。\n\n所以，在开发过程中，导入外部样式使用link，而不用@import。如果css少，尽可能采用内嵌样式，直接写在style标签中。\n\n（3）针对DOM树、CSSOM树： 可以通过以下几种方式来减少渲染的时间：\n\n * HTML文件的代码层级尽量不要太深\n * 使用语义化的标签，来避免不标准语义化的特殊处理\n * 减少CSSD代码的层级，因为选择器是从左向右进行解析的\n\n（4）减少回流与重绘：\n\n * 操作DOM时，尽量在低层级的DOM节点进行操作\n * 不要使用table布局， 一个小的改动可能会使整个table进行重新布局\n * 使用CSS的表达式\n * 不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n * 使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n * 避免频繁操作DOM，可以创建一个文档片段documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中\n * 将元素先设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。\n * 将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列\n\n浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n\n将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。\n\n\n3. 渲染过程中遇到 JS 文件如何处理？\n\nJavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了\nJavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript\n引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。也就是说，如果想要首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在\nbody 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。\n\n\n4. 什么是文档的预解析？\n\nWebkit 和 Firefox 都做了这个优化，当执行 JavaScript\n脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 DOM\n树，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。\n\n\n5. CSS 如何阻塞文档解析？\n\n理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们。然而，存在一个问题，JavaScript\n脚本执行时可能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。所以如果浏览器尚未完成 CSSOM\n的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档的解析，直至其完成 CSSOM\n的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。\n\n\n6. 如何优化关键渲染路径？\n\n为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：\n\n（1）关键资源的数量。\n\n（2）关键路径长度。\n\n（3）关键字节的数量。\n\n关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU\n以及其他资源的占用也就越少。同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，并且资源越大，下载所需的往返次数就越多。最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。\n\n优化关键渲染路径的常规步骤如下：\n\n（1）对关键路径进行分析和特性描述：资源数、字节数、长度。\n\n（2）最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。\n\n（3）优化关键字节数以缩短下载时间（往返次数）。\n\n（4）优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度\n\n\n7. 什么情况会阻塞渲染？\n\n首先渲染的前提是生成渲染树，所以 HTML 和 CSS\n肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件大小，并且扁平层级，优化选择器。然后当浏览器在解析到 script 标签时，会暂停构建\nDOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body\n标签底部的原因。\n\n当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。当 script 标签加上\ndefer 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 script\n标签放在任意位置。对于没有任何依赖的 JS 文件可以加上 async 属性，表示 JS 文件下载和解析不会阻塞渲染。\n\n\n六、浏览器本地存储\n\n\n1. 浏览器本地存储方式及使用场景\n\n（1）COOKIE\n\nCookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie的大小只有4kb，它是一种纯文本文件，每次发起HTTP请求都会携带Cookie。\n\nCookie的特性：\n\n * Cookie一旦创建成功，名称就无法修改\n * Cookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie\n * 每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb\n * 有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的\n * Cookie在请求一个新的页面的时候都会被发送过去\n\n如果需要域名之间跨域共享Cookie，有两种方法：\n\n 1. 使用Nginx反向代理\n 2. 在一个站点登陆之后，往其他网站写Cookie。服务端的Session存储到一个节点，Cookie存储sessionId\n\nCookie的使用场景：\n\n * 最常见的使用场景就是Cookie和session结合使用，我们将sessionId存储到Cookie中，每次发请求都会携带这个sessionId，这样服务端就知道是谁发起的请求，从而响应相应的信息。\n * 可以用来统计页面的点击次数\n\n（2）LOCALSTORAGE\n\nLocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。\n\nLocalStorage的优点：\n\n * 在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息\n * LocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在\n * 仅储存在本地，不像Cookie那样每次HTTP请求都会被携带\n\nLocalStorage的缺点：\n\n * 存在浏览器兼容问题，IE8以下版本的浏览器不支持\n * 如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage\n * LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问\n\nLocalStorage的常用API：\n\n// 保存数据到 localStorage\nlocalStorage.setItem('key', 'value');\n\n// 从 localStorage 获取数据\nlet data = localStorage.getItem('key');\n\n// 从 localStorage 删除保存的数据\nlocalStorage.removeItem('key');\n\n// 从 localStorage 删除所有保存的数据\nlocalStorage.clear();\n\n// 获取某个索引的Key\nlocalStorage.key(index)\n\n\nLocalStorage的使用场景：\n\n * 有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的LocalStorage中，当需要换肤的时候，直接操作LocalStorage即可\n * 在网站中的用户浏览信息也会存储在LocalStorage中，还有网站的一些不常变动的个人信息等也可以存储在本地的LocalStorage中\n\n（3）SESSIONSTORAGE\n\nSessionStorage和LocalStorage都是在HTML5才提出来的存储方案，SessionStorage\n主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。\n\nSessionStorage与LocalStorage对比：\n\n * SessionStorage和LocalStorage都在本地进行数据存储；\n * SessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，SessionStorage只有在同一浏览器的同一窗口下才能够共享；\n * LocalStorage和SessionStorage都不能被爬虫爬取；\n\nSessionStorage的常用API：\n\n// 保存数据到 sessionStorage\nsessionStorage.setItem('key', 'value');\n\n// 从 sessionStorage 获取数据\nlet data = sessionStorage.getItem('key');\n\n// 从 sessionStorage 删除保存的数据\nsessionStorage.removeItem('key');\n\n// 从 sessionStorage 删除所有保存的数据\nsessionStorage.clear();\n\n// 获取某个索引的Key\nsessionStorage.key(index)\n\n\nSessionStorage的使用场景\n\n * 由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。\n\n\n2. COOKIE有哪些字段，作用分别是什么\n\nCookie由以下字段组成：\n\n * Name：cookie的名称\n * Value：cookie的值，对于认证cookie，value值包括web服务器所提供的访问令牌；\n * Size： cookie的大小\n * Path：可以访问此cookie的页面路径。\n   比如domain是abc.com，path是/test，那么只有/test路径下的页面可以读取此cookie。\n * Secure：\n   指定是否使用HTTPS安全协议发送Cookie。使用HTTPS安全协议，可以保护Cookie在浏览器和Web服务器间的传输过程中不被窃取和篡改。该方法也可用于Web站点的身份鉴别，即在HTTPS的连接建立阶段，浏览器会检查Web网站的SSL证书的有效性。但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到SSL证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。\n * Domain：可以访问该cookie的域名，Cookie 机制并未遵循严格的同源策略，允许一个子域可以设置或获取其父域的\n   Cookie。当需要实现单点登录方案时，Cookie 的上述特性非常有用，然而也增加了\n   Cookie受攻击的危险，比如攻击者可以借此发动会话定置攻击。因而，浏览器禁止在 Domain 属性中设置.org、.com\n   等通用顶级域名、以及在国家及地区顶级域下注册的二级域名，以减小攻击发生的范围。\n * HTTP： 该字段包含HTTPOnly 属性\n   ，该属性用来设置cookie能否通过脚本来访问，默认为空，即可以通过脚本访问。在客户端是不能通过js代码去设置一个httpOnly类型的cookie的，这种类型的cookie只能通过服务端来设置。该属性用于防止客户端脚本通过document.cookie属性访问Cookie，有助于保护Cookie不被跨站脚本攻击窃取或篡改。但是，HTTPOnly的应用仍存在局限性，一些浏览器可以阻止客户端脚本对Cookie的读操作，但允许写操作；此外大多数浏览器仍允许通过XMLHTTP对象读取HTTP响应中的Set-Cookie头。\n * Expires/Max-size ：\n   此cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器)\n   后，此cookie失效。\n\n总结： 服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值\nexpires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain\n是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie\n只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。\n\n\n3. COOKIE、LOCALSTORAGE、SESSIONSTORAGE区别\n\n浏览器端常用的存储技术是 cookie 、localStorage 和 sessionStorage。\n\n * cookie： 其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie\n   最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。\n * sessionStorage： html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session\n   的概念，代表的是一次会话中所保存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage\n   只能被同一个窗口的同源页面所访问共享。\n * localStorage： html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage\n   不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。\n\n上面几种方式都是存储少量数据的时候的存储方式，当需要在本地存储大量数据的时候，我们可以使用浏览器的 indexDB\n这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 NoSQL 数据库。\n\n\n4. 前端储存的⽅式有哪些？\n\n * cookies：\n   在HTML5标准前本地储存的主要⽅式，优点是兼容性好，请求头⾃带cookie⽅便，缺点是⼤⼩只有4k，⾃动请求头加⼊cookie浪费流量，每个domain限制20个cookie，使⽤起来麻烦，需要⾃⾏封装；\n * localStorage：HTML5加⼊的以键值对(Key-Value)为标准的⽅式，优点是操作⽅便，永久性储存（除⾮⼿动删除），⼤⼩为5M，兼容IE8+\n   ；\n * sessionStorage：与localStorage基本类似，区别是sessionStorage当⻚⾯关闭后会被清理，⽽且与cookie、localStorage不同，他不能在所有同源窗⼝中共享，是会话级别的储存⽅式；\n * Web SQL：2010年被W3C废弃的本地数据库数据存储⽅案，但是主流浏览器（⽕狐除外）都已经有了相关的实现，web\n   sql类似于SQLite，是真正意义上的关系型数据库，⽤sql进⾏操作，当我们⽤JavaScript时要进⾏转换，较为繁琐；\n * IndexedDB：\n   是被正式纳⼊HTML5标准的数据库储存⽅案，它是NoSQL数据库，⽤键值对进⾏储存，可以进⾏快速读取操作，⾮常适合web场景，同时⽤JavaScript进⾏操作会⾮常便。\n\n\n5. INDEXEDDB有哪些特点？\n\nIndexedDB 具有以下特点：\n\n * 键值对储存：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript\n   对象。对象仓库中，数据以\"键值对\"的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。\n * 异步：IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage\n   形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。\n * 支持事务：IndexedDB\n   支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。\n * 同源限制： IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。\n * 储存空间大：IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。\n * 支持二进制储存：IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。\n\n\n七、浏览器同源策略\n\n\n1. 什么是同源策略\n\n跨域问题其实就是浏览器的同源策略造成的。\n\n> 同源策略限制了从同一个源加载的文档或脚本如何与另一个源的资源进行交互。这是浏览器的一个用于隔离潜在恶意文件的重要的安全机制。同源指的是：协议、端口号、域名必须一致。\n\n下表给出了与 URL http://store.company.com/dir/page.html 的源进行对比的示例:\n\nURL 是否跨域 原因 http://store.company.com/dir/page.html 同源 完全相同\nhttp://store.company.com/dir/inner/another.html 同源 只有路径不同\nhttps://store.company.com/secure.html 跨域 协议不同\nhttp://store.company.com:81/dir/etc.html 跨域 端口不同 ( http:// 默认端口是80)\nhttp://news.company.com/dir/other.html 跨域 主机不同\n\n同源策略：protocol（协议）、domain（域名）、port（端口）三者必须一致。\n\n同源政策主要限制了三个方面：\n\n * 当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。\n * 当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。\n * 当前域下 ajax 无法发送跨域请求。\n\n同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者script\n脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。\n\n\n2. 如何解决跨越问题\n\n（1）CORS\n\n下面是MDN对于CORS的定义：\n\n> 跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin\n> (domain)上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP\n> 请求。\n\nCORS需要浏览器和服务器同时支持，整个CORS过程都是浏览器完成的，无需用户参与。因此实现CORS的关键就是服务器，只要服务器实现了CORS请求，就可以跨源通信了。\n\n浏览器将CORS分为简单请求和非简单请求：\n\n简单请求不会触发CORS预检请求。若该请求满足以下两个条件，就可以看作是简单请求：\n\n1）请求方法是以下三种方法之一：\n\n * HEAD\n * GET\n * POST\n\n2）HTTP的头信息不超出以下几种字段：\n\n * Accept\n * Accept-Language\n * Content-Language\n * Last-Event-ID\n * Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n若不满足以上条件，就属于非简单请求了。\n\n（1）简单请求过程：\n\n对于简单请求，浏览器会直接发出CORS请求，它会在请求的头信息中增加一个Orign字段，该字段用来说明本次请求来自哪个源（协议+端口+域名），服务器会根据这个值来决定是否同意这次请求。如果Orign指定的域名在许可范围之内，服务器返回的响应就会多出以下信息头：\n\nAccess-Control-Allow-Origin: http://api.bob.com  // 和Orign一直\nAccess-Control-Allow-Credentials: true   // 表示是否允许发送Cookie\nAccess-Control-Expose-Headers: FooBar   // 指定返回其他字段的值\nContent-Type: text/html; charset=utf-8   // 表示文档类型\n\n\n如果Orign指定的域名不在许可范围之内，服务器会返回一个正常的HTTP回应，浏览器发现没有上面的Access-Control-Allow-Origin头部信息，就知道出错了。这个错误无法通过状态码识别，因为返回的状态码可能是200。\n\n在简单请求中，在服务器内，至少需要设置字段：Access-Control-Allow-Origin\n\n（2）非简单请求过程\n\n非简单请求是对服务器有特殊要求的请求，比如请求方法为DELETE或者PUT等。非简单请求的CORS请求会在正式通信之前进行一次HTTP查询请求，称为预检请求。\n\n浏览器会询问服务器，当前所在的网页是否在服务器允许访问的范围内，以及可以使用哪些HTTP请求方式和头信息字段，只有得到肯定的回复，才会进行正式的HTTP请求，否则就会报错。\n\n预检请求使用的请求方法是OPTIONS，表示这个请求是来询问的。他的头信息中的关键字段是Orign，表示请求来自哪个源。除此之外，头信息中还包括两个字段：\n\n * Access-Control-Request-Method：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法。\n * Access-Control-Request-Headers： 该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段。\n\n服务器在收到浏览器的预检请求之后，会根据头信息的三个字段来进行判断，如果返回的头信息在中有Access-Control-Allow-Origin这个字段就是允许跨域请求，如果没有，就是不同意这个预检请求，就会报错。\n\n服务器回应的CORS的字段如下：\n\nAccess-Control-Allow-Origin: http://api.bob.com  // 允许跨域的源地址\nAccess-Control-Allow-Methods: GET, POST, PUT // 服务器支持的所有跨域请求的方法\nAccess-Control-Allow-Headers: X-Custom-Header  // 服务器支持的所有头信息字段\nAccess-Control-Allow-Credentials: true   // 表示是否允许发送Cookie\nAccess-Control-Max-Age: 1728000  // 用来指定本次预检请求的有效期，单位为秒\n\n\n只要服务器通过了预检请求，在以后每次的CORS请求都会自带一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。\n\n在非简单请求中，至少需要设置以下字段：\n\n'Access-Control-Allow-Origin'  \n'Access-Control-Allow-Methods'\n'Access-Control-Allow-Headers'\n\n\n减少OPTIONS请求次数：\n\nOPTIONS请求次数过多就会损耗页面加载的性能，降低用户体验度。所以尽量要减少OPTIONS请求次数，可以后端在请求的返回头部添加：Access-Control-Max-Age：number。它表示预检请求的返回结果可以被缓存多久，单位是秒。该字段只对完全一样的URL的缓存设置生效，所以设置了缓存时间，在这个时间范围内，再次发送请求就不需要进行预检请求了。\n\nCORS中COOKIE相关问题：\n\n在CORS请求中，如果想要传递Cookie，就要满足以下三个条件：\n\n * 在请求中设置 withCredentials\n\n默认情况下在跨域请求，浏览器是不带 cookie 的。但是我们可以通过设置 withCredentials 来进行传递 cookie.\n\n// 原生 xml 的设置方式\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n// axios 设置方式\naxios.defaults.withCredentials = true;\n\n\n * Access-Control-Allow-Credentials 设置为 true\n * Access-Control-Allow-Origin 设置为非 *\n\n（2）JSONP\n\njsonp的原理就是利用<script>标签没有跨域限制，通过<script>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。\n1）原生JS实现：\n\n<script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数\n    script.src = 'http://www.domain2.com:8080/login?user=admin&callback=handleCallback';\n    document.head.appendChild(script);\n    // 回调执行函数\n    function handleCallback(res) {\n        alert(JSON.stringify(res));\n    }\n </script>\n\n\n服务端返回如下（返回时即执行全局函数）：\n\nhandleCallback({\"success\": true, \"user\": \"admin\"})\n\n\n2）Vue axios实现：\n\nthis.$http = axios;\nthis.$http.jsonp('http://www.domain2.com:8080/login', {\n    params: {},\n    jsonp: 'handleCallback'\n}).then((res) => {\n    console.log(res); \n})\n\n\n后端node.js代码：\n\nvar querystring = require('querystring');\nvar http = require('http');\nvar server = http.createServer();\nserver.on('request', function(req, res) {\n    var params = querystring.parse(req.url.split('?')[1]);\n    var fn = params.callback;\n    // jsonp返回设置\n    res.writeHead(200, { 'Content-Type': 'text/javascript' });\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n    res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n\n\nJSONP的缺点：\n\n * 具有局限性， 仅支持get方法\n * 不安全，可能会遭受XSS攻击\n\n（3）POSTMESSAGE 跨域\n\npostMessage是HTML5 XMLHttpRequest Level\n2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：\n\n * 页面和其打开的新窗口的数据传递\n * 多窗口之间消息传递\n * 页面与嵌套的iframe消息传递\n * 上面三个场景的跨域数据传递\n\n用法：postMessage(data,origin)方法接受两个参数：\n\n * data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。\n * origin： 协议+主机+端口号，也可以设置为\"*\"，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为\"/\"。\n\n1）a.html：(domain1.com/a.html)\n\n<iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\n<script>       \n    var iframe = document.getElementById('iframe');\n    iframe.onload = function() {\n        var data = {\n            name: 'aym'\n        };\n        // 向domain2传送跨域数据\n        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com');\n    };\n    // 接受domain2返回数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain2 ---> ' + e.data);\n    }, false);\n</script>\n\n\n2）b.html：(domain2.com/b.html)\n\n<script>\n    // 接收domain1的数据\n    window.addEventListener('message', function(e) {\n        alert('data from domain1 ---> ' + e.data);\n        var data = JSON.parse(e.data);\n        if (data) {\n            data.number = 16;\n            // 处理后再发回domain1\n            window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com');\n        }\n    }, false);\n</script>\n\n\n（4）NGINX代理跨域\n\nnginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。\n\n1）nginx配置解决iconfont跨域\n浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。\n\nlocation / {\n  add_header Access-Control-Allow-Origin *;\n}\n\n\n2）nginx反向代理接口跨域 跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。\n实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。\n\nnginx具体配置：\n\n#proxy服务器\nserver {\n    listen       81;\n    server_name  www.domain1.com;\n    location / {\n        proxy_pass   http://www.domain2.com:8080;  #反向代理\n        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名\n        index  index.html index.htm;\n        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*\n        add_header Access-Control-Allow-Credentials true;\n    }\n}\n\n\n（5）NODEJS 中间件代理跨域\n\nnode中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。\n\n1）非vue框架的跨域 使用node + express + http-proxy-middleware搭建一个proxy服务器。\n\n * 前端代码：\n\nvar xhr = new XMLHttpRequest();\n// 前端开关：浏览器是否读写cookie\nxhr.withCredentials = true;\n// 访问http-proxy-middleware代理服务器\nxhr.open('get', 'http://www.domain1.com:3000/login?user=admin', true);\nxhr.send();\n\n\n * 中间件服务器代码：\n\nvar express = require('express');\nvar proxy = require('http-proxy-middleware');\nvar app = express();\napp.use('/', proxy({\n    // 代理跨域目标接口\n    target: 'http://www.domain2.com:8080',\n    changeOrigin: true,\n    // 修改响应头信息，实现跨域并允许带cookie\n    onProxyRes: function(proxyRes, req, res) {\n        res.header('Access-Control-Allow-Origin', 'http://www.domain1.com');\n        res.header('Access-Control-Allow-Credentials', 'true');\n    },\n    // 修改响应信息中的cookie域名\n    cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改\n}));\napp.listen(3000);\nconsole.log('Proxy server is listen at port 3000...');\n\n\n2）vue框架的跨域\n\nnode + vue + webpack +\nwebpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。\n\nwebpack.config.js部分配置：\n\nmodule.exports = {\n    entry: {},\n    module: {},\n    ...\n    devServer: {\n        historyApiFallback: true,\n        proxy: [{\n            context: '/login',\n            target: 'http://www.domain2.com:8080',  // 代理跨域目标接口\n            changeOrigin: true,\n            secure: false,  // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改\n        }],\n        noInfo: true\n    }\n}\n\n\n（6）DOCUMENT.DOMAIN + IFRAME跨域\n\n此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。\n1）父窗口：(domain.com/a.html)\n\n<iframe id=\"iframe\" src=\"http://child.domain.com/b.html\"></iframe>\n<script>\n    document.domain = 'domain.com';\n    var user = 'admin';\n</script>\n\n\n1）子窗口：(child.domain.com/a.html)\n\n<script>\n    document.domain = 'domain.com';\n    // 获取父窗口中变量\n    console.log('get js data from parent ---> ' + window.parent.user);\n</script>\n\n\n（7）LOCATION.HASH + IFRAME跨域\n\n实现原理：a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。\n\n具体实现：A域：a.html -> B域：b.html ->\nA域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。\n\n1）a.html：(domain1.com/a.html)\n\n<iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe');\n    // 向b.html传hash值\n    setTimeout(function() {\n        iframe.src = iframe.src + '#user=admin';\n    }, 1000);\n    \n    // 开放给同域c.html的回调方法\n    function onCallback(res) {\n        alert('data from c.html ---> ' + res);\n    }\n</script>\n\n\n2）b.html：(.domain2.com/b.html)\n\n<iframe id=\"iframe\" src=\"http://www.domain1.com/c.html\" style=\"display:none;\"></iframe>\n<script>\n    var iframe = document.getElementById('iframe');\n    // 监听a.html传来的hash值，再传给c.html\n    window.onhashchange = function () {\n        iframe.src = iframe.src + location.hash;\n    };\n</script>\n\n\n3）c.html：(http://www.domain1.com/c.html)\n\n<script>\n    // 监听b.html传来的hash值\n    window.onhashchange = function () {\n        // 再通过操作同域a.html的js回调，将结果传回\n        window.parent.parent.onCallback('hello: ' + location.hash.replace('#user=', ''));\n    };\n</script>\n\n\n（8）WINDOW.NAME + IFRAME跨域\n\nwindow.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。\n\n1）a.html：(domain1.com/a.html)\n\nvar proxy = function(url, callback) {\n    var state = 0;\n    var iframe = document.createElement('iframe');\n    // 加载跨域页面\n    iframe.src = url;\n    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n    iframe.onload = function() {\n        if (state === 1) {\n            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据\n            callback(iframe.contentWindow.name);\n            destoryFrame();\n        } else if (state === 0) {\n            // 第1次onload(跨域页)成功后，切换到同域代理页面\n            iframe.contentWindow.location = 'http://www.domain1.com/proxy.html';\n            state = 1;\n        }\n    };\n    document.body.appendChild(iframe);\n    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）\n    function destoryFrame() {\n        iframe.contentWindow.document.write('');\n        iframe.contentWindow.close();\n        document.body.removeChild(iframe);\n    }\n};\n// 请求跨域b页面数据\nproxy('http://www.domain2.com/b.html', function(data){\n    alert(data);\n});\n\n\n2）proxy.html：(domain1.com/proxy.html)\n\n中间代理页，与a.html同域，内容为空即可。 3）b.html：(domain2.com/b.html)\n\n<script>    \n    window.name = 'This is domain2 data!';\n</script>\n\n\n通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n（9）WEBSOCKET协议跨域\n\nWebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。\n\n原生WebSocket\nAPI使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。\n\n1）前端代码：\n\n<div>user input：<input type=\"text\"></div>\n<script src=\"https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js\"></script>\n<script>\nvar socket = io('http://www.domain2.com:8080');\n// 连接成功处理\nsocket.on('connect', function() {\n    // 监听服务端消息\n    socket.on('message', function(msg) {\n        console.log('data from server: ---> ' + msg); \n    });\n    // 监听服务端关闭\n    socket.on('disconnect', function() { \n        console.log('Server socket has closed.'); \n    });\n});\ndocument.getElementsByTagName('input')[0].onblur = function() {\n    socket.send(this.value);\n};\n</script>\n\n\n2）Nodejs socket后台：\n\nvar http = require('http');\nvar socket = require('socket.io');\n// 启http服务\nvar server = http.createServer(function(req, res) {\n    res.writeHead(200, {\n        'Content-type': 'text/html'\n    });\n    res.end();\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n// 监听socket连接\nsocket.listen(server).on('connection', function(client) {\n    // 接收信息\n    client.on('message', function(msg) {\n        client.send('hello：' + msg);\n        console.log('data from client: ---> ' + msg);\n    });\n    // 断开处理\n    client.on('disconnect', function() {\n        console.log('Client socket has closed.'); \n    });\n});\n\n\n\n3. 正向代理和反向代理的区别\n\n * 正向代理：\n\n客户端想获得一个服务器的数据，但是因为种种原因无法直接获取。于是客户端设置了一个代理服务器，并且指定目标服务器，之后代理服务器向目标服务器转交请求并将获得的内容发送给客户端。这样本质上起到了对真实服务器隐藏真实客户端的目的。实现正向代理需要修改客户端，比如修改浏览器配置。\n\n * 反向代理：\n\n服务器为了能够将工作负载分不到多个服务器来提高网站性能\n(负载均衡)等目的，当其受到请求后，会首先根据转发规则来确定请求应该被转发到哪个服务器上，然后将请求转发到对应的真实服务器上。这样本质上起到了对客户端隐藏真实服务器的作用。\n一般使用反向代理后，需要通过修改 DNS 让域名解析到代理服务器 IP，这时浏览器无法察觉到真正服务器的存在，当然也就不需要修改配置了。\n\n两者区别如图示： 正向代理和反向代理的结构是一样的，都是 client-proxy-server 的结构，它们主要的区别就在于中间这个 proxy\n是哪一方设置的。在正向代理中，proxy 是 client 设置的，用来隐藏 client；而在反向代理中，proxy 是 server 设置的，用来隐藏\nserver。\n\n\n4. NGINX的概念及其工作原理\n\nNginx 是一款轻量级的 Web 服务器，也可以用于反向代理、负载平衡和 HTTP 缓存等。Nginx 使用异步事件驱动的方法来处理请求，是一款面向性能设计的\nHTTP 服务器。\n\n传统的 Web 服务器如 Apache 是 process-based 模型的，而 Nginx 是基于event-driven模型的。正是这个主要的区别带给了\nNginx 在性能上的优势。\n\nNginx 架构的最顶层是一个 master process，这个 master process 用于产生其他的 worker\nprocess，这一点和Apache 非常像，但是 Nginx 的 worker process 可以同时处理大量的HTTP请求，而每个 Apache\nprocess 只能处理一个。\n\n\n八、浏览器事件机制\n\n\n1. 事件是什么？事件模型？\n\n事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event\n对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。\n\n事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型：\n\n * DOM0 级事件模型，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实现，它可以在网页中直接定义监听函数，也可以通过 js\n   属性来指定监听函数。所有浏览器都兼容这种方式。直接在dom对象上注册事件名称，就是DOM0写法。\n * IE\n   事件模型，在该事件模型中，一次事件共有两个过程，事件处理阶段和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到\n   document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过attachEvent\n   来添加监听函数，可以添加多个监听函数，会按顺序依次执行。\n * DOM2 级事件模型，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document\n   一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE\n   事件模型的两个阶段相同。这种事件模型，事件绑定的函数是addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。\n\n\n2. 如何阻止事件冒泡\n\n * 普通浏览器使用：event.stopPropagation()\n * IE浏览器使用：event.cancelBubble = true;\n\n\n3. 对事件委托的理解\n\n（1）事件委托的概念\n\n事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，父节点可以通过事件对象获取到目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件委托（事件代理）。\n\n使用事件委托可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理还可以实现事件的动态绑定，比如说新增了一个子节点，并不需要单独地为它添加一个监听事件，它绑定的事件会交给父元素中的监听函数来处理。\n\n（2）事件委托的特点\n\n * 减少内存消耗\n\n如果有一个列表，列表之中有大量的列表项，需要在点击列表项的时候响应一个事件：\n\n<ul id=\"list\">\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  ......\n  <li>item n</li>\n</ul>\n\n\n如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能。因此，比较好的方法就是把这个点击事件绑定到他的父层，也就是 ul\n上，然后在执行事件时再去匹配判断目标元素，所以事件委托可以减少大量的内存消耗，节约效率。\n\n * 动态绑定事件\n\n给上述的例子中每个列表项都绑定事件，在很多时候，需要通过 AJAX\n或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件；如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的，所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。\n\n// 来实现把 #list 下的 li 元素的事件代理委托到它的父层元素也就是 #list 上：\n// 给父层元素绑定事件\ndocument.getElementById('list').addEventListener('click', function (e) {\n  // 兼容性处理\n  var event = e || window.event;\n  var target = event.target || event.srcElement;\n  // 判断是否匹配目标元素\n  if (target.nodeName.toLocaleLowerCase === 'li') {\n    console.log('the content is: ', target.innerHTML);\n  }\n});\n\n\n在上述代码中， target 元素则是在 #list 元素之下具体被点击的元素，然后通过判断 target 的一些属性（比如：nodeName，id\n等等）可以更精确地匹配到某一类 #list li 元素之上；\n\n（3）局限性\n\n当然，事件委托也是有局限的。比如 focus、blur 之类的事件没有事件冒泡机制，所以无法实现事件委托；mousemove、mouseout\n这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。\n\n当然事件委托不是只有优点，它也是有缺点的，事件委托会影响页面性能，主要影响因素有：\n\n * 元素中，绑定事件委托的次数；\n * 点击的最底层元素，到绑定事件元素之间的DOM层数；\n\n在必须使用事件委托的地方，可以进行如下的处理：\n\n * 只在必须的地方，使用事件委托，比如：ajax的局部刷新区域\n * 尽量的减少绑定的层级，不在body元素上，进行绑定\n * 减少绑定的次数，如果可以，那么把多个事件的绑定，合并到一次事件委托中去，由这个事件委托的回调，来进行分发。\n\n\n4. 事件委托的使用场景\n\n场景：给页面的所有的a标签添加click事件，代码如下：\n\ndocument.addEventListener(\"click\", function(e) {\n    if (e.target.nodeName == \"A\")\n        console.log(\"a\");\n}, false);\n\n\n但是这些a标签可能包含一些像span、img等元素，如果点击到了这些a标签中的元素，就不会触发click事件，因为事件绑定上在a标签元素上，而触发这些内部的元素时，e.target指向的是触发click事件的元素（span、img等其他元素）。\n\n这种情况下就可以使用事件委托来处理，将事件绑定在a标签的内部元素上，当点击它的时候，就会逐级向上查找，知道找到a标签为止，代码如下：\n\ndocument.addEventListener(\"click\", function(e) {\n    var node = e.target;\n    while (node.parentNode.nodeName != \"BODY\") {\n        if (node.nodeName == \"A\") {\n            console.log(\"a\");\n            break;\n        }\n        node = node.parentNode;\n    }\n}, false);\n\n\n\n5. 同步和异步的区别\n\n * 同步指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返回为止再继续向下执行。\n * 异步指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等待消息的返回，当消息返回时系统再通知进程进行处理。\n\n\n6. 对事件循环的理解\n\n因为 js 是单线程运行的，在代码执行时，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码时，如果遇到异步事件，js\n引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到一个任务队列中等待执行。任务队列可以分为宏任务队列和微任务队列，当当前执行栈中的事件执行完毕后，js\n引擎首先会判断微任务队列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务队列中的任务都执行完成后再去执行宏任务队列中的任务。\n\n\n\nEvent Loop 执行顺序如下所示：\n\n * 首先执行同步代码，这属于宏任务\n * 当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行\n * 执行所有微任务\n * 当执行完所有微任务后，如有必要会渲染页面\n * 然后开始下一轮 Event Loop，执行宏任务中的异步代码\n\n\n7. 宏任务和微任务分别有哪些\n\n * 微任务包括： promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\n * 宏任务包括： script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O\n   操作、UI 渲染等。\n\n\n8. 什么是执行栈\n\n可以把执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则。 当开始执行 JS 代码时，根据先进后出的原则，后执行的函数会先弹出栈，可以看到，foo\n函数后执行，当执行完毕后就从栈中弹出了。\n\n平时在开发中，可以在报错中找到执行栈的痕迹：\n\nfunction foo() {\n  throw new Error('error')\n}\nfunction bar() {\n  foo()\n}\nbar()\n\n\n可以看到报错在 foo 函数，foo 函数又是在 bar\n函数中调用的。当使用递归时，因为栈可存放的函数是有限制的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈的问题\n\nfunction bar() {  bar()}bar()\n\n\n\n\n\n9. NODE 中的 EVENT LOOP 和浏览器中的有什么区别？PROCESS.NEXTTICK 执行顺序？\n\nNode 中的 Event Loop 和浏览器中的是完全不相同的东西。\n\nNode 的 Event Loop 分为 6\n个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。\n\n（1）Timers（计时器阶段）：初次进入事件循环，会从计时器阶段开始。此阶段会判断是否存在过期的计时器回调（包含 setTimeout 和\nsetInterval），如果存在则会执行所有过期的计时器回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入\nPending callbacks 阶段。\n\n（2）Pending callbacks：执行推迟到下一个循环迭代的I / O回调（系统调用相关的回调）。\n\n（3）Idle/Prepare：仅供内部使用。\n\n（4）Poll（轮询阶段）：\n\n * 当回调队列不为空时：会执行回调，若回调中触发了相应的微任务，这里的微任务执行时机和其他地方有所不同，不会等到所有回调执行完毕后才执行，而是针对每一个回调执行完毕后，就执行相应微任务。执行完所有的回调后，变为下面的情况。\n * 当回调队列为空时（没有回调或所有回调执行完毕）：但如果存在有计时器（setTimeout、setInterval和setImmediate）没有执行，会结束轮询阶段，进入\n   Check 阶段。否则会阻塞并等待任何正在执行的I/O操作完成，并马上执行相应的回调，直到所有回调执行完毕。\n\n（5）Check（查询阶段）：会检查是否存在 setImmediate\n相关的回调，如果存在则执行所有回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Close callbacks 阶段。\n\n（6）Close callbacks：执行一些关闭回调，比如socket.on('close', ...)等。\n\n下面来看一个例子，首先在有些情况下，定时器的执行顺序其实是随机的\n\nsetTimeout(() => {    console.log('setTimeout')}, 0)setImmediate(() => {    console.log('setImmediate')})\n\n\n对于以上代码来说，setTimeout 可能执行在前，也可能执行在后\n\n * 首先 setTimeout(fn, 0) === setTimeout(fn, 1)，这是由源码决定的\n * 进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调\n * 那么如果准备时间花费小于 1ms，那么就是 setImmediate 回调先执行了\n\n当然在某些情况下，他们的执行顺序一定是固定的，比如以下代码：\n\nconst fs = require('fs')\nfs.readFile(__filename, () => {\n    setTimeout(() => {\n        console.log('timeout');\n    }, 0)\n    setImmediate(() => {\n        console.log('immediate')\n    })\n})\n\n\n在上述代码中，setImmediate 永远先执行。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在\nsetImmediate 回调，所以就直接跳转到 check 阶段去执行回调了。\n\n上面都是 macrotask 的执行情况，对于 microtask 来说，它会在以上每个阶段完成前清空 microtask 队列，下图中的 Tick 就代表了\nmicrotask\n\nsetTimeout(() => {\n  console.log('timer21')\n}, 0)\nPromise.resolve().then(function() {\n  console.log('promise1')\n})\n\n\n对于以上代码来说，其实和浏览器中的输出是一样的，microtask 永远执行在 macrotask 前面。\n\n最后来看 Node 中的 process.nextTick，这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在\nnextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。\n\nsetTimeout(() => {\n console.log('timer1')\n Promise.resolve().then(function() {\n   console.log('promise1')\n })\n}, 0)\nprocess.nextTick(() => {\n console.log('nextTick')\n process.nextTick(() => {\n   console.log('nextTick')\n   process.nextTick(() => {\n     console.log('nextTick')\n     process.nextTick(() => {\n       console.log('nextTick')\n     })\n   })\n })\n})\n\n\n对于以上代码，永远都是先把 nextTick 全部打印出来。\n\n\n10. 事件触发的过程是怎样的\n\n事件触发有三个阶段：\n\n * window 往事件触发处传播，遇到注册的捕获事件会触发\n * 传播到事件触发处时触发注册的事件\n * 从事件触发处往 window 传播，遇到注册的冒泡事件会触发\n\n事件触发一般来说会按照上面的顺序进行，但是也有特例，如果给一个 body 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。\n\n// 以下会先打印冒泡然后是捕获\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('冒泡')\n  },\n  false\n)\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('捕获 ')\n  },\n  true\n)\n\n\n通常使用 addEventListener 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 useCapture 参数来说，该参数默认值为\nfalse ，useCapture 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性：\n\n * capture：布尔值，和 useCapture 作用一样\n * once：布尔值，值为 true 表示该回调只会调用一次，调用后会移除监听\n * passive：布尔值，表示永远不会调用 preventDefault\n\n一般来说，如果只希望事件只触发在目标上，这时候可以使用 stopPropagation 来阻止事件的进一步传播。通常认为 stopPropagation\n是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。\n\nstopImmediatePropagation 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。\n\nnode.addEventListener(\n  'click',\n  event => {\n    event.stopImmediatePropagation()\n    console.log('冒泡')\n  },\n  false\n)\n// 点击 node 只会执行上面的函数，该函数不会执行\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('捕获 ')\n  },\n  true\n)\n\n\n\n九、浏览器垃圾回收机制\n\n\n1. V8的垃圾回收机制是怎样的\n\nV8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。\n\n（1）新生代算法\n\n新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。\n\n在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入\nFrom 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To\n空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。\n\n（2）老生代算法\n\n老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。\n\n先来说下什么情况下对象会出现在老生代空间中：\n\n * 新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。\n * To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。\n\n老生代中的空间很复杂，有如下几个空间\n\nenum AllocationSpace {\n  // TODO(v8:7464): Actually map this space's memory as read-only.\n  RO_SPACE,    // 不变的对象空间\n  NEW_SPACE,   // 新生代用于 GC 复制算法的空间\n  OLD_SPACE,   // 老生代常驻对象空间\n  CODE_SPACE,  // 老生代代码对象空间\n  MAP_SPACE,   // 老生代 map 对象\n  LO_SPACE,    // 老生代大空间对象\n  NEW_LO_SPACE,  // 新生代大空间对象\n  FIRST_SPACE = RO_SPACE,\n  LAST_SPACE = NEW_LO_SPACE,\n  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,\n  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE\n};\n\n\n在老生代中，以下情况会先启动标记清除算法：\n\n * 某一个空间没有分块的时候\n * 空间中被对象超过一定限制\n * 空间不能保证新生代中的对象移动到老生代中\n\n在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011\n年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS\n应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC\n扫描和标记对象时，同时允许 JS 运行。\n\n清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象向一端移动，直到所有对象都移动完成然后清理掉不需要的内存。\n\n\n2. 哪些操作会造成内存泄漏？\n\n * 第一种情况是由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n * 第二种情况是设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。\n * 第三种情况是获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回收。\n * 第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。","frontMatter":{"title":"浏览器原理"}},{"name":"手写代码","path":"参考八股文/手写代码.html","texts":"一、JAVASCRIPT 基础\n\n\n1. 手写 OBJECT.CREATE\n\n思路：将传入的对象作为原型\n\nfunction create(obj) {\n  function F() {}\n  F.prototype = obj\n  return new F()\n}\n\n\n\n2. 手写 INSTANCEOF 方法\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\n实现步骤：\n\n 1. 首先获取类型的原型\n 2. 然后获得对象的原型\n 3. 然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 null，因为原型链最终为 null\n\n具体实现：\n\nfunction myInstanceof(left, right) {\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\n      prototype = right.prototype; // 获取构造函数的 prototype 对象\n\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n\n\n\n3. 手写 NEW 操作符\n\n在调用 new 的过程中会发生以上四件事情：\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n\n\n\n4. 手写 PROMISE\n\nconst PENDING = \"pending\";\nconst RESOLVED = \"resolved\";\nconst REJECTED = \"rejected\";\n\nfunction MyPromise(fn) {\n  // 保存初始化状态\n  var self = this;\n\n  // 初始化状态\n  this.state = PENDING;\n\n  // 用于保存 resolve 或者 rejected 传入的值\n  this.value = null;\n\n  // 用于保存 resolve 的回调函数\n  this.resolvedCallbacks = [];\n\n  // 用于保存 reject 的回调函数\n  this.rejectedCallbacks = [];\n\n  // 状态转变为 resolved 方法\n  function resolve(value) {\n    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变\n    if (value instanceof MyPromise) {\n      return value.then(resolve, reject);\n    }\n\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变，\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = RESOLVED;\n\n        // 设置传入的值\n        self.value = value;\n\n        // 执行回调函数\n        self.resolvedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n\n  // 状态转变为 rejected 方法\n  function reject(value) {\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = REJECTED;\n\n        // 设置传入的值\n        self.value = value;\n\n        // 执行回调函数\n        self.rejectedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n\n  // 将两个方法传入函数执行\n  try {\n    fn(resolve, reject);\n  } catch (e) {\n    // 遇到错误时，捕获错误，执行 reject 函数\n    reject(e);\n  }\n}\n\nMyPromise.prototype.then = function(onResolved, onRejected) {\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n  onResolved =\n    typeof onResolved === \"function\"\n      ? onResolved\n      : function(value) {\n          return value;\n        };\n\n  onRejected =\n    typeof onRejected === \"function\"\n      ? onRejected\n      : function(error) {\n          throw error;\n        };\n\n  // 如果是等待状态，则将函数加入对应列表中\n  if (this.state === PENDING) {\n    this.resolvedCallbacks.push(onResolved);\n    this.rejectedCallbacks.push(onRejected);\n  }\n\n  // 如果状态已经凝固，则直接执行对应状态的函数\n\n  if (this.state === RESOLVED) {\n    onResolved(this.value);\n  }\n\n  if (this.state === REJECTED) {\n    onRejected(this.value);\n  }\n};\n\n\n\n5. 手写 PROMISE.THEN\n\nthen 方法返回一个新的 promise 实例，为了在 promise 状态发生变化时（resolve / reject 被调用时）再执行 then\n里的函数，我们使用一个 callbacks 数组先把传给then的函数暂存起来，等状态改变时再调用。\n\n那么，怎么保证后一个 **then** 里的方法在前一个 **then**（可能是异步）结束之后再执行呢？ 我们可以将传给 then 的函数和新 promise\n的 resolve 一起 push 到前一个 promise 的 callbacks 数组中，达到承前启后的效果：\n\n * 承前：当前一个 promise 完成后，调用其 resolve 变更状态，在这个 resolve 里会依次调用 callbacks 里的回调，这样就执行了\n   then 里的方法了\n * 启后：上一步中，当 then 里的方法执行完成后，返回一个结果，如果这个结果是个简单的值，就直接调用新 promise 的\n   resolve，让其状态变更，这又会依次调用新 promise 的 callbacks 数组里的方法，循环往复。。如果返回的结果是个\n   promise，则需要等它完成之后再触发新 promise 的 resolve，所以可以在其结果的 then 里调用新 promise 的 resolve\n\nthen(onFulfilled, onReject){\n    // 保存前一个promise的this\n    const self = this; \n    return new MyPromise((resolve, reject) => {\n      // 封装前一个promise成功时执行的函数\n      let fulfilled = () => {\n        try{\n          const result = onFulfilled(self.value); // 承前\n          return result instanceof MyPromise? result.then(resolve, reject) : resolve(result); //启后\n        }catch(err){\n          reject(err)\n        }\n      }\n      // 封装前一个promise失败时执行的函数\n      let rejected = () => {\n        try{\n          const result = onReject(self.reason);\n          return result instanceof MyPromise? result.then(resolve, reject) : reject(result);\n        }catch(err){\n          reject(err)\n        }\n      }\n      switch(self.status){\n        case PENDING: \n          self.onFulfilledCallbacks.push(fulfilled);\n          self.onRejectedCallbacks.push(rejected);\n          break;\n        case FULFILLED:\n          fulfilled();\n          break;\n        case REJECT:\n          rejected();\n          break;\n      }\n    })\n   }\n\n\n注意：\n\n * 连续多个 then 里的回调方法是同步注册的，但注册到了不同的 callbacks 数组中，因为每次 then 都返回新的 promise\n   实例（参考上面的例子和图）\n * 注册完成后开始执行构造函数中的异步事件，异步完成之后依次调用 callbacks 数组中提前注册的回调\n\n\n6. 手写 PROMISE.ALL\n\n1) 核心思路\n\n 1. 接收一个 Promise 实例的数组或具有 Iterator 接口的对象作为参数\n 2. 这个方法返回一个新的 promise 对象，\n 3. 遍历传入的参数，用Promise.resolve()将参数\"包一层\"，使其变成一个promise对象\n 4. 参数所有回调成功才是成功，返回值数组与参数顺序一致\n 5. 参数数组其中一个失败，则触发失败状态，第一个触发失败的 Promise 错误信息作为 Promise.all 的错误信息。\n\n2）实现代码\n\n一般来说，Promise.all\n用来处理多个并发请求，也是为了页面数据构造的方便，将一个页面所用到的在不同接口的数据一起请求过来，不过，如果其中一个接口失败了，多个请求也就失败了，页面可能啥也出不来，这就看当前页面的耦合程度了\n\nfunction promiseAll(promises) {\n  return new Promise(function(resolve, reject) {\n    if(!Array.isArray(promises)){\n        throw new TypeError(`argument must be a array`)\n    }\n    var resolvedCounter = 0;\n    var promiseNum = promises.length;\n    var resolvedResult = [];\n    for (let i = 0; i < promiseNum; i++) {\n      Promise.resolve(promises[i]).then(value=>{\n        resolvedCounter++;\n        resolvedResult[i] = value;\n        if (resolvedCounter == promiseNum) {\n            return resolve(resolvedResult)\n          }\n      },error=>{\n        return reject(error)\n      })\n    }\n  })\n}\n// test\nlet p1 = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve(1)\n    }, 1000)\n})\nlet p2 = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve(2)\n    }, 2000)\n})\nlet p3 = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve(3)\n    }, 3000)\n})\npromiseAll([p3, p1, p2]).then(res => {\n    console.log(res) // [3, 1, 2]\n})\n\n\n\n7. 手写 PROMISE.RACE\n\n该方法的参数是 Promise 实例数组, 然后其 then 注册的回调方法是数组中的某一个 Promise 的状态变为 fulfilled 的时候就执行.\n因为 Promise 的状态只能改变一次, 那么我们只需要把 Promise.race 中产生的 Promise 对象的 resolve 方法,\n注入到数组中的每一个 Promise 实例中的回调函数中即可.\n\nPromise.race = function (args) {\n  return new Promise((resolve, reject) => {\n    for (let i = 0, len = args.length; i < len; i++) {\n      args[i].then(resolve, reject)\n    }\n  })\n}\n\n\n\n8. 手写防抖函数\n\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n\n秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  let timer = null;\n\n  return function() {\n    let context = this,\n        args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n\n\n\n9. 手写节流函数\n\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在\nscroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  let curTime = Date.now();\n\n  return function() {\n    let context = this,\n        args = arguments,\n        nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - curTime >= delay) {\n      curTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n\n\n\n10. 手写类型判断函数\n\nfunction getType(value) {\n  // 判断数据是 null 的情况\n  if (value === null) {\n    return value + \"\";\n  }\n  // 判断数据是引用类型的情况\n  if (typeof value === \"object\") {\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(\" \")[1].split(\"\");\n    type.pop();\n    return type.join(\"\").toLowerCase();\n  } else {\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  }\n}\n\n\n\n11. 手写 CALL 函数\n\ncall 函数的实现步骤：\n\n 1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n 2. 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n 3. 处理传入的参数，截取第一个参数后的所有参数。\n 4. 将函数作为上下文对象的一个属性。\n 5. 使用上下文对象来调用这个方法，并保存返回结果。\n 6. 删除刚才新增的属性。\n 7. 返回结果。\n\n// call函数实现\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== \"function\") {\n    console.error(\"type error\");\n  }\n  // 获取参数\n  let args = [...arguments].slice(1),\n      result = null;\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n  // 将调用函数设为对象的方法\n  context.fn = this;\n  // 调用函数\n  result = context.fn(...args);\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n\n\n\n12. 手写 APPLY 函数\n\napply 函数的实现步骤：\n\n 1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n 2. 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n 3. 将函数作为上下文对象的一个属性。\n 4. 判断参数值是否传入\n 5. 使用上下文对象来调用这个方法，并保存返回结果。\n 6. 删除刚才新增的属性\n 7. 返回结果\n\n// apply 函数实现\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n\n\n\n13. 手写 BIND 函数\n\nbind 函数的实现步骤：\n\n 1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n 2. 保存当前函数的引用，获取其余传入参数值。\n 3. 创建一个函数返回\n 4. 函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply\n    调用，其余情况都传入指定的上下文对象。\n\n// bind 函数实现\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  // 获取参数\n  var args = [...arguments].slice(1),\n      fn = this;\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n\n\n\n14. 函数柯里化的实现\n\n函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\nfunction curry(fn, args) {\n  // 获取函数需要的参数长度\n  let length = fn.length;\n\n  args = args || [];\n\n  return function() {\n    let subArgs = args.slice(0);\n\n    // 拼接得到现有的所有参数\n    for (let i = 0; i < arguments.length; i++) {\n      subArgs.push(arguments[i]);\n    }\n\n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) {\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    } else {\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    }\n  };\n}\n\n// es6 实现\nfunction curry(fn, ...args) {\n  return fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n}\n\n\n\n15. 实现AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML\n文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n * 创建一个 XMLHttpRequest 对象。\n * 在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n * 在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader\n   方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5\n   个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState\n   变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过\n   response 中的数据来对页面进行更新了。\n * 当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", SERVER_URL, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n\n\n\n16. 使用PROMISE封装AJAX请求\n\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n\n\n\n17. 实现浅拷贝\n\n浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。\n\n（1）OBJECT.ASSIGN()\n\nObject.assign()是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：Object.assign(target,\nsource_1, ···)，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。\n\n注意：\n\n * 如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n * 如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。\n * 因为null 和 undefined 不能转化为对象，所以第一个参数不能为null或 undefined，会报错。\n\nlet target = {a: 1};\nlet object2 = {b: 2};\nlet object3 = {c: 3};\nObject.assign(target,object2,object3);  \nconsole.log(target);  // {a: 1, b: 2, c: 3}\n\n\n（2）扩展运算符\n\n使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法：let cloneObj = { ...obj };\n\nlet obj1 = {a:1,b:{c:1}}\nlet obj2 = {...obj1};\nobj1.a = 2;\nconsole.log(obj1); //{a:2,b:{c:1}}\nconsole.log(obj2); //{a:1,b:{c:1}}\nobj1.b.c = 2;\nconsole.log(obj1); //{a:2,b:{c:2}}\nconsole.log(obj2); //{a:1,b:{c:2}}\n\n\n（3）数组方法实现数组浅拷贝\n\n1）ARRAY.PROTOTYPE.SLICE\n\n * slice()方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：array.slice(start,\n   end)，该方法不会改变原始数组。\n * 该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\nlet arr = [1,2,3,4];\nconsole.log(arr.slice()); // [1,2,3,4]\nconsole.log(arr.slice() === arr); //false\n\n\n2）ARRAY.PROTOTYPE.CONCAT\n\n * concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n * 该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\nlet arr = [1,2,3,4];\nconsole.log(arr.concat()); // [1,2,3,4]\nconsole.log(arr.concat() === arr); //false\n\n\n（4）手写实现浅拷贝\n\n// 浅拷贝的实现;\n\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n\n  return newObject;\n}// 浅拷贝的实现;\n\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n\n  return newObject;\n}// 浅拷贝的实现;\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n  return newObject;\n}\n\n\n\n18. 实现深拷贝\n\n * 浅拷贝：\n   浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用\n    Object.assign 和展开运算符来实现。\n * 深拷贝：\n   深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用\n   JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol\n   类型的值时，会转换失败\n\n（1）JSON.STRINGIFY()\n\n * JSON.parse(JSON.stringify(obj))是目前比较常用的深拷贝方法之一，它的原理就是利用JSON.stringify\n   将js对象序列化（JSON字符串），再使用JSON.parse来反序列化(还原)js对象。\n * 这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，u\n   ndefined，symbol，当使用过JSON.stringify()进行处理之后，都会消失。\n\nlet obj1 = {  a: 0,\n              b: {\n                 c: 0\n                 }\n            };\nlet obj2 = JSON.parse(JSON.stringify(obj1));\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj1); // {a: 1, b: {c: 1}}\nconsole.log(obj2); // {a: 0, b: {c: 0}}\n\n\n（2）函数库LODASH的_.CLONEDEEP方法\n\n该函数库也有提供_.cloneDeep用来做 Deep Copy\n\nvar _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);// false\n\n\n（3）手写实现深拷贝函数\n\n// 深拷贝的实现\nfunction deepCopy(object) {\n  if (!object || typeof object !== \"object\") return;\n\n  let newObject = Array.isArray(object) ? [] : {};\n\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] =\n        typeof object[key] === \"object\" ? deepCopy(object[key]) : object[key];\n    }\n  }\n\n  return newObject;\n}\n\n\n\n二、数据处理\n\n\n1. 实现日期格式化函数\n\n输入：\n\ndateFormat(new Date('2020-12-01'), 'yyyy/MM/dd') // 2020/12/01\ndateFormat(new Date('2020-04-01'), 'yyyy/MM/dd') // 2020/04/01\ndateFormat(new Date('2020-04-01'), 'yyyy年MM月dd日') // 2020年04月01日\n\n\nconst dateFormat = (dateInput, format)=>{\n    var day = dateInput.getDate() \n    var month = dateInput.getMonth() + 1  \n    var year = dateInput.getFullYear()   \n    format = format.replace(/yyyy/, year)\n    format = format.replace(/MM/,month)\n    format = format.replace(/dd/,day)\n    return format\n}\n\n\n\n2. 交换A,B的值，不能用临时变量\n\n巧妙的利用两个数的和、差：\n\na = a + b\nb = a - b\na = a - b\n\n\n\n3. 实现数组的乱序输出\n\n主要的实现思路就是：\n\n * 取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。\n * 第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换\n * 按照上面的规律执行，直到遍历完成\n\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nfor (var i = 0; i < arr.length; i++) {\n  const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;\n  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];\n}\nconsole.log(arr)\n\n\n还有一方法就是倒序遍历：\n\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nlet length = arr.length,\n    randomIndex,\n    temp;\n  while (length) {\n    randomIndex = Math.floor(Math.random() * length--);\n    temp = arr[length];\n    arr[length] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\nconsole.log(arr)\n\n\n\n4. 实现数组元素求和\n\n * arr=[1,2,3,4,5,6,7,8,9,10]，求和\n\nlet arr=[1,2,3,4,5,6,7,8,9,10]\nlet sum = arr.reduce( (total,i) => total += i,0);\nconsole.log(sum);\n\n\n * arr=[1,2,3,[[4,5],6],7,8,9]，求和\n\nvar = arr=[1,2,3,[[4,5],6],7,8,9]\nlet arr= arr.toString().split(',').reduce( (total,i) => total += Number(i),0);\nconsole.log(arr);\n\n\n递归实现：\n\nlet arr = [1, 2, 3, 4, 5, 6] \n\nfunction add(arr) {\n    if (arr.length == 1) return arr[0] \n    return arr[0] + add(arr.slice(1)) \n}\nconsole.log(add(arr)) // 21\n\n\n\n5. 实现数组的扁平化\n\n（1）递归实现\n\n普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：\n\nlet arr = [1, [2, [3, 4, 5]]];\nfunction flatten(arr) {\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++) {\n    if(Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nflatten(arr);  //  [1, 2, 3, 4，5]\n\n\n（2）reduce 函数迭代\n\n从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：\n\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.reduce(function(prev, next){\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    }, [])\n}\nconsole.log(flatten(arr));//  [1, 2, 3, 4，5]\n\n\n（3）扩展运算符实现\n\n这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：\n\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n\n\n（4）split 和 toString\n\n可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString\n的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：\n\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.toString().split(',');\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n\n\n通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。\n\n（5）ES6 中的 flat\n\n我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法：arr.flat([depth])\n\n其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进\nInfinity，代表不论多少层都要展开：\n\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  return arr.flat(Infinity);\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n\n\n可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成\n2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。 （6）正则和 JSON 方法\n在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify\n的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：\n\nlet arr = [1, [2, [3, [4, 5]]], 6];\nfunction flatten(arr) {\n  let str = JSON.stringify(arr);\n  str = str.replace(/(/[|/])/g, '');\n  str = '[' + str + ']';\n  return JSON.parse(str); \n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n\n\n\n6. 实现数组去重\n\n给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。\n\nES6方法（使用数据结构集合）：\n\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nArray.from(new Set(array)); // [1, 2, 3, 5, 9, 8]\n\n\nES5方法：使用map存储不重复的数字\n\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nuniqueArray(array); // [1, 2, 3, 5, 9, 8]\n\nfunction uniqueArray(array) {\n  let map = {};\n  let res = [];\n  for(var i = 0; i < array.length; i++) {\n    if(!map.hasOwnProperty([array[i]])) {\n      map[array[i]] = 1;\n      res.push(array[i]);\n    }\n  }\n  return res;\n}\n\n\n\n7. 实现数组的FLAT方法\n\nfunction _flat(arr, depth) {\n  if(!Array.isArray(arr) || depth <= 0) {\n    return arr;\n  }\n  return arr.reduce((prev, cur) => {\n    if (Array.isArray(cur)) {\n      return prev.concat(_flat(cur, depth - 1))\n    } else {\n      return prev.concat(cur);\n    }\n  }, []);\n}\n\n\n\n8. 实现数组的PUSH方法\n\nlet arr = [];\nArray.prototype.push = function() {\n    for( let i = 0 ; i < arguments.length ; i++){\n        this[this.length] = arguments[i] ;\n    }\n    return this.length;\n}\n\n\n\n9. 实现数组的FILTER方法\n\nArray.prototype._filter = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        fn(this[i]) && res.push(this[i]);\n    }\n    return res;\n}\n\n\n\n10. 实现数组的MAP方法\n\nArray.prototype._map = function(fn) {\n   if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        res.push(fn(this[i]));\n    }\n    return res;\n}\n\n\n\n11. 实现字符串的REPEAT方法\n\n输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。\n\nfunction repeat(s, n) {\n    return (new Array(n + 1)).join(s);\n}\n\n\n递归：\n\nfunction repeat(s, n) {\n    return (n > 0) ? s.concat(repeat(s, --n)) : \"\";\n}\n\n\n\n12. 实现字符串翻转\n\n在字符串的原型链上添加一个方法，实现字符串翻转：\n\nString.prototype._reverse = function(a){\n    return a.split(\"\").reverse().join(\"\");\n}\nvar obj = new String();\nvar res = obj._reverse ('hello');\nconsole.log(res);    // olleh\n\n\n需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。\n\n\n13. 将数字每千分位用逗号隔开\n\n数字有小数版本：\n\nlet format = n => {\n    let num = n.toString() // 转成字符串\n    let decimals = ''\n        // 判断是否有小数\n    num.indexOf('.') > -1 ? decimals = num.split('.')[1] : decimals\n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let temp = ''\n        let remainder = len % 3\n        decimals ? temp = '.' + decimals : temp\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(//d{3}/g).join(',') + temp\n        } else { // 是3的整数倍\n            return num.slice(0, len).match(//d{3}/g).join(',') + temp \n        }\n    }\n}\nformat(12323.33)  // '12,323.33'\n\n\n数字无小数版本：\n\nlet format = n => {\n    let num = n.toString() \n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let remainder = len % 3\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(//d{3}/g).join(',') \n        } else { // 是3的整数倍\n            return num.slice(0, len).match(//d{3}/g).join(',') \n        }\n    }\n}\nformat(1232323)  // '1,232,323'\n\n\n\n14. 实现非负大整数相加\n\nJavaScript对数值有范围的限制，限制如下：\n\nNumber.MAX_VALUE // 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_VALUE // 5e-324\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n\n\n如果想要对一个超大的整数(> Number.MAX_SAFE_INTEGER)进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过\nNumber.MAX_SAFE_INTEGER 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。\n\n实现一个算法进行大数的相加：\n\nfunction sumBigNumber(a, b) {\n  let res = '';\n  let temp = 0;\n  \n  a = a.split('');\n  b = b.split('');\n  \n  while (a.length || b.length || temp) {\n    temp += ~~a.pop() + ~~b.pop();\n    res = (temp % 10) + res;\n    temp  = temp > 9\n  }\n  return res.replace(/^0+/, '');\n}\n\n\n其主要的思路如下：\n\n * 首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化\n * 初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算\n * 将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位\n * 判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加\n * 重复上述操作，直至计算结束\n\n\n13. 实现 ADD(1)(2)(3)\n\n函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。\n\n1）粗暴版\n\nfunction add (a) {\nreturn function (b) {\n     return function (c) {\n      return a + b + c;\n     }\n}\n}\nconsole.log(add(1)(2)(3)); // 6\n\n\n2）柯里化解决方案\n\n * 参数长度固定\n\nvar add = function (m) {\n  var temp = function (n) {\n    return add(m + n);\n  }\n  temp.toString = function () {\n    return m;\n  }\n  return temp;\n};\nconsole.log(add(3)(4)(5)); // 12\nconsole.log(add(3)(6)(9)(25)); // 43\n\n\n对于add(3)(4)(5)，其执行过程如下：\n\n 1. 先执行add(3)，此时m=3，并且返回temp函数；\n 2. 执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数\n 3. 执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数\n 4. 由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return\n    m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。\n\n * 参数长度不固定\n\nfunction add (...args) {\n    //求和\n    return args.reduce((a, b) => a + b)\n}\nfunction currying (fn) {\n    let args = []\n    return function temp (...newArgs) {\n        if (newArgs.length) {\n            args = [\n                ...args,\n                ...newArgs\n            ]\n            return temp\n        } else {\n            let val = fn.apply(this, args)\n            args = [] //保证再次调用时清空\n            return val\n        }\n    }\n}\nlet addCurry = currying(add)\nconsole.log(addCurry(1)(2)(3)(4, 5)())  //15\nconsole.log(addCurry(1)(2)(3, 4, 5)())  //15\nconsole.log(addCurry(1)(2, 3, 4, 5)())  //15\n\n\n\n14. 实现类数组转化为数组\n\n类数组转换为数组的方法有这样几种：\n\n * 通过 call 调用数组的 slice 方法来实现转换\n\nArray.prototype.slice.call(arrayLike);\n\n\n * 通过 call 调用数组的 splice 方法来实现转换\n\nArray.prototype.splice.call(arrayLike, 0);\n\n\n * 通过 apply 调用数组的 concat 方法来实现转换\n\nArray.prototype.concat.apply([], arrayLike);\n\n\n * 通过 Array.from 方法来实现转换\n\nArray.from(arrayLike);\n\n\n\n15. 使用 REDUCE 求和\n\narr = [1,2,3,4,5,6,7,8,9,10]，求和\n\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.reduce((prev, cur) => { return prev + cur }, 0)\n\n\narr = [1,2,3,[[4,5],6],7,8,9]，求和\n\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.flat(Infinity).reduce((prev, cur) => { return prev + cur }, 0)\n\n\narr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和\n\nlet arr = [{a:9, b:3, c:4}, {a:1, b:3}, {a:3}] \n\narr.reduce((prev, cur) => {\n    return prev + cur[\"a\"];\n}, 0)\n\n\n\n16. 将JS对象转化为树形结构\n\n// 转换前：\nsource = [{\n            id: 1,\n            pid: 0,\n            name: 'body'\n          }, {\n            id: 2,\n            pid: 1,\n            name: 'title'\n          }, {\n            id: 3,\n            pid: 2,\n            name: 'div'\n          }]\n// 转换为: \ntree = [{\n          id: 1,\n          pid: 0,\n          name: 'body',\n          children: [{\n            id: 2,\n            pid: 1,\n            name: 'title',\n            children: [{\n              id: 3,\n              pid: 1,\n              name: 'div'\n            }]\n          }\n        }]\n\n\n代码实现：\n\nfunction jsonToTree(data) {\n  // 初始化结果数组，并判断输入数据的格式\n  let result = []\n  if(!Array.isArray(data)) {\n    return result\n  }\n  // 使用map，将当前对象的id与当前对象对应存储起来\n  let map = {};\n  data.forEach(item => {\n    map[item.id] = item;\n  });\n  // \n  data.forEach(item => {\n    let parent = map[item.pid];\n    if(parent) {\n      (parent.children || (parent.children = [])).push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n\n\n\n17. 使用ES5和ES6求函数参数的和\n\nES5：\n\nfunction sum() {\n    let sum = 0\n    Array.prototype.forEach.call(arguments, function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n\n\nES6：\n\nfunction sum(...nums) {\n    let sum = 0\n    nums.forEach(function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n\n\n\n18. 解析 URL PARAMS 为对象\n\nlet url = 'http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&enabled';\nparseParam(url)\n/* 结果\n{ user: 'anonymous',\n  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京', // 中文需解码\n  enabled: true, // 未指定值得 key 约定为 true\n}\n*/\n\n\nfunction parseParam(url) {\n  const paramsStr = /.+/?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来\n  const paramsArr = paramsStr.split('&'); // 将字符串以 & 分割后存到数组中\n  let paramsObj = {};\n  // 将 params 存到对象中\n  paramsArr.forEach(param => {\n    if (/=/.test(param)) { // 处理有 value 的参数\n      let [key, val] = param.split('='); // 分割 key 和 value\n      val = decodeURIComponent(val); // 解码\n      val = /^/d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字\n      if (paramsObj.hasOwnProperty(key)) { // 如果对象有 key，则添加一个值\n        paramsObj[key] = [].concat(paramsObj[key], val);\n      } else { // 如果对象没有这个 key，创建 key 并设置值\n        paramsObj[key] = val;\n      }\n    } else { // 处理没有 value 的参数\n      paramsObj[param] = true;\n    }\n  })\n  return paramsObj;\n}\n\n\n\n三、场景应用\n\n\n1. 循环打印红黄绿\n\n下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？\n\n三个亮灯函数：\n\nfunction red() {\n    console.log('red');\n}\nfunction green() {\n    console.log('green');\n}\nfunction yellow() {\n    console.log('yellow');\n}\n\n\n这道题复杂的地方在于需要“交替重复”亮灯，而不是“亮完一次”就结束了。\n\n（1）用 CALLBACK 实现\n\nconst task = (timer, light, callback) => {\n    setTimeout(() => {\n        if (light === 'red') {\n            red()\n        }\n        else if (light === 'green') {\n            green()\n        }\n        else if (light === 'yellow') {\n            yellow()\n        }\n        callback()\n    }, timer)\n}\ntask(3000, 'red', () => {\n    task(2000, 'green', () => {\n        task(1000, 'yellow', Function.prototype)\n    })\n})\n\n\n这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？\n\n上面提到过递归，可以递归亮灯的一个周期：\n\nconst step = () => {\n    task(3000, 'red', () => {\n        task(2000, 'green', () => {\n            task(1000, 'yellow', step)\n        })\n    })\n}\nstep()\n\n\n注意看黄灯亮的回调里又再次调用了 step 方法 以完成循环亮灯。\n\n（2）用 PROMISE 实现\n\nconst task = (timer, light) => \n    new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (light === 'red') {\n                red()\n            }\n            else if (light === 'green') {\n                green()\n            }\n            else if (light === 'yellow') {\n                yellow()\n            }\n            resolve()\n        }, timer)\n    })\nconst step = () => {\n    task(3000, 'red')\n        .then(() => task(2000, 'green'))\n        .then(() => task(2100, 'yellow'))\n        .then(step)\n}\nstep()\n\n\n这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。\n\n（3）用 ASYNC/AWAIT 实现\n\nconst taskRunner =  async () => {\n    await task(3000, 'red')\n    await task(2000, 'green')\n    await task(2100, 'yellow')\n    taskRunner()\n}\ntaskRunner()\n\n\n\n2. 实现每隔一秒打印 1,2,3,4\n\n// 使用闭包实现\nfor (var i = 0; i < 5; i++) {\n  (function(i) {\n    setTimeout(function() {\n      console.log(i);\n    }, i * 1000);\n  })(i);\n}\n// 使用 let 块级作用域\nfor (let i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n}\n\n\n\n3. 小孩报数问题\n\n有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数\n1、2、3，问最后剩下的那个小孩儿的编号是多少?\n\nfunction childNum(num, count){\n    let allplayer = [];    \n    for(let i = 0; i < num; i++){\n        allplayer[i] = i + 1;\n    }\n    \n    let exitCount = 0;    // 离开人数\n    let counter = 0;      // 记录报数\n    let curIndex = 0;     // 当前下标\n    \n    while(exitCount < num - 1){\n        if(allplayer[curIndex] !== 0) counter++;    \n        \n        if(counter == count){\n            allplayer[curIndex] = 0;                 \n            counter = 0;\n            exitCount++;  \n        }\n        curIndex++;\n        if(curIndex == num){\n            curIndex = 0               \n        };           \n    }    \n    for(i = 0; i < num; i++){\n        if(allplayer[i] !== 0){\n            return allplayer[i]\n        }      \n    }\n}\nchildNum(30, 3)\n\n\n\n4. 用PROMISE实现图片的异步加载\n\nlet imageAsync=(url)=>{\n            return new Promise((resolve,reject)=>{\n                let img = new Image();\n                img.src = url;\n                img.οnlοad=()=>{\n                    console.log(`图片请求成功，此处进行通用操作`);\n                    resolve(image);\n                }\n                img.οnerrοr=(err)=>{\n                    console.log(`失败，此处进行失败的通用操作`);\n                    reject(err);\n                }\n            })\n        }\n        \nimageAsync(\"url\").then(()=>{\n    console.log(\"加载成功\");\n}).catch((error)=>{\n    console.log(\"加载失败\");\n})\n\n\n\n5. 实现发布-订阅模式\n\nclass EventCenter{\n  // 1. 定义事件容器，用来装事件数组\n    let handlers = {}\n\n  // 2. 添加事件方法，参数：事件名 事件方法\n  addEventListener(type, handler) {\n    // 创建新数组容器\n    if (!this.handlers[type]) {\n      this.handlers[type] = []\n    }\n    // 存入事件\n    this.handlers[type].push(handler)\n  }\n\n  // 3. 触发事件，参数：事件名 事件参数\n  dispatchEvent(type, params) {\n    // 若没有注册该事件则抛出错误\n    if (!this.handlers[type]) {\n      return new Error('该事件未注册')\n    }\n    // 触发事件\n    this.handlers[type].forEach(handler => {\n      handler(...params)\n    })\n  }\n\n  // 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布\n  removeEventListener(type, handler) {\n    if (!this.handlers[type]) {\n      return new Error('事件无效')\n    }\n    if (!handler) {\n      // 移除事件\n      delete this.handlers[type]\n    } else {\n      const index = this.handlers[type].findIndex(el => el === handler)\n      if (index === -1) {\n        return new Error('无该绑定事件')\n      }\n      // 移除事件\n      this.handlers[type].splice(index, 1)\n      if (this.handlers[type].length === 0) {\n        delete this.handlers[type]\n      }\n    }\n  }\n}\n\n\n\n6. 查找文章中出现频率最高的单词\n\nfunction findMostWord(article) {\n  // 合法性判断\n  if (!article) return;\n  // 参数处理\n  article = article.trim().toLowerCase();\n  let wordList = article.match(/[a-z]+/g),\n    visited = [],\n    maxNum = 0,\n    maxWord = \"\";\n  article = \" \" + wordList.join(\"  \") + \" \";\n  // 遍历判断单词出现次数\n  wordList.forEach(function(item) {\n    if (visited.indexOf(item) < 0) {\n      // 加入 visited \n      visited.push(item);\n      let word = new RegExp(\" \" + item + \" \", \"g\"),\n        num = article.match(word).length;\n      if (num > maxNum) {\n        maxNum = num;\n        maxWord = item;\n      }\n    }\n  });\n  return maxWord + \"  \" + maxNum;\n}\n\n\n\n7. 封装异步的FETCH，使用ASYNC AWAIT方式来使用\n\n(async () => {\n    class HttpRequestUtil {\n        async get(url) {\n            const res = await fetch(url);\n            const data = await res.json();\n            return data;\n        }\n        async post(url, data) {\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async put(url, data) {\n            const res = await fetch(url, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async delete(url, data) {\n            const res = await fetch(url, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n    }\n    const httpRequestUtil = new HttpRequestUtil();\n    const res = await httpRequestUtil.get('http://golderbrother.cn/');\n    console.log(res);\n})();\n\n\n\n8. 实现PROTOTYPE继承\n\n所谓的原型链继承就是让新实例的原型等于父类的实例：\n\n//父方法\nfunction SupperFunction(flag1){\n    this.flag1 = flag1;\n}\n\n//子方法\nfunction SubFunction(flag2){\n    this.flag2 = flag2;\n}\n\n//父实例\nvar superInstance = new SupperFunction(true);\n\n//子继承父\nSubFunction.prototype = superInstance;\n\n//子实例\nvar subInstance = new SubFunction(false);\n//子调用自己和父的属性\nsubInstance.flag1;   // true\nsubInstance.flag2;   // false\n\n\n\n9. 实现双向数据绑定\n\nlet obj = {}\nlet input = document.getElementById('input')\nlet span = document.getElementById('span')\n// 数据劫持\nObject.defineProperty(obj, 'text', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    console.log('获取数据了')\n  },\n  set(newVal) {\n    console.log('数据更新了')\n    input.value = newVal\n    span.innerHTML = newVal\n  }\n})\n// 输入监听\ninput.addEventListener('keyup', function(e) {\n  obj.text = e.target.value\n})\n\n\n\n10. 实现简单路由\n\n// hash路由\nclass Route{\n  constructor(){\n    // 路由存储对象\n    this.routes = {}\n    // 当前hash\n    this.currentHash = ''\n    // 绑定this，避免监听时this指向改变\n    this.freshRoute = this.freshRoute.bind(this)\n    // 监听\n    window.addEventListener('load', this.freshRoute, false)\n    window.addEventListener('hashchange', this.freshRoute, false)\n  }\n  // 存储\n  storeRoute (path, cb) {\n    this.routes[path] = cb || function () {}\n  }\n  // 更新\n  freshRoute () {\n    this.currentHash = location.hash.slice(1) || '/'\n    this.routes[this.currentHash]()\n  }\n}\n\n\n\n11. 实现斐波那契数列\n\n// 递归\nfunction fn (n){\n    if(n==0) return 0\n    if(n==1) return 1\n    return fn(n-2)+fn(n-1)\n}\n// 优化\nfunction fibonacci2(n) {\n    const arr = [1, 1, 2];\n    const arrLen = arr.length;\n\n    if (n <= arrLen) {\n        return arr[n];\n    }\n\n    for (let i = arrLen; i < n; i++) {\n        arr.push(arr[i - 1] + arr[ i - 2]);\n    }\n\n    return arr[arr.length - 1];\n}\n// 非递归\nfunction fn(n) {\n    let pre1 = 1;\n    let pre2 = 1;\n    let current = 2;\n\n    if (n <= 2) {\n        return current;\n    }\n\n    for (let i = 2; i < n; i++) {\n        pre1 = pre2;\n        pre2 = current;\n        current = pre1 + pre2;\n    }\n\n    return current;\n}\n\n\n\n12. 字符串出现的不重复最长长度\n\n用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：\n\nvar lengthOfLongestSubstring = function (s) {\n    let map = new Map();\n    let i = -1\n    let res = 0\n    let n = s.length\n    for (let j = 0; j < n; j++) {\n        if (map.has(s[j])) {\n            i = Math.max(i, map.get(s[j]))\n        }\n        res = Math.max(res, j - i)\n        map.set(s[j], j)\n    }\n    return res\n};\n\n\n\n13. 使用 SETTIMEOUT 实现 SETINTERVAL\n\nsetInterval\n的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\n\n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟\nsetInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\n\n实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\n\nfunction mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n  // 设置递归函数，模拟定时器执行。\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n  // 启动定时器\n  setTimeout(interval, timeout);\n  // 返回控制器\n  return timer;\n}\n\n\n\n14. 实现 JSONP\n\n// 动态的加载js文件\nfunction addScript(src) {\n  const script = document.createElement('script');\n  script.src = src;\n  script.type = \"text/javascript\";\n  document.body.appendChild(script);\n}\naddScript(\"http://xxx.xxx.com/xxx.js?callback=handleRes\");\n// 设置一个全局的callback函数来接收回调结果\nfunction handleRes(res) {\n  console.log(res);\n}\n// 接口返回的数据格式\nhandleRes({a: 1, b: 2});\n\n\n\n15. 判断对象是否存在循环引用\n\n循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用JSON.stringify()对该类对象进行序列化，就会报错: Converting\ncircular structure to JSON.\n\n下面方法可以用来判断一个对象中是否已存在循环引用：\n\nconst isCycleObject = (obj,parent) => {\n    const parentArr = parent || [obj];\n    for(let i in obj) {\n        if(typeof obj[i] === 'object') {\n            let flag = false;\n            parentArr.forEach((pObj) => {\n                if(pObj === obj[i]){\n                    flag = true;\n                }\n            })\n            if(flag) return true;\n            flag = isCycleObject(obj[i],[...parentArr,obj[i]]);\n            if(flag) return true;\n        }\n    }\n    return false;\n}\n\n\nconst a = 1;\nconst b = {a};\nconst c = {b};\nconst o = {d:{a:3},c}\no.c.b.aa = a;\n\nconsole.log(isCycleObject(o)\n\n\n查找有序二维数组的目标值：\n\nvar findNumberIn2DArray = function(matrix, target) {\n    if (matrix == null || matrix.length == 0) {\n        return false;\n    }\n    let row = 0;\n    let column = matrix[0].length - 1;\n    while (row < matrix.length && column >= 0) {\n        if (matrix[row][column] == target) {\n            return true;\n        } else if (matrix[row][column] > target) {\n            column--;\n        } else {\n            row++;\n        }\n    }\n    return false;\n};\n\n\n二维数组斜向打印：\n\nfunction printMatrix(arr){\n  let m = arr.length, n = arr[0].length\n    let res = []\n  \n  // 左上角，从0 到 n - 1 列进行打印\n  for (let k = 0; k < n; k++) {\n    for (let i = 0, j = k; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n\n  // 右下角，从1 到 n - 1 行进行打印\n  for (let k = 1; k < m; k++) {\n    for (let i = k, j = n - 1; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n  return res\n}\n","frontMatter":{"title":"手写代码"}},{"name":"性能优化","path":"参考八股文/性能优化.html","texts":"一、CDN\n\n\n1. CDN的概念\n\nCDN（Content Delivery\nNetwork，内容分发网络）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n典型的CDN系统由下面三个部分组成：\n\n * 分发服务系统：\n   最基本的工作单元就是Cache设备，cache（边缘cache）负责直接响应最终用户的访问请求，把缓存在本地的内容快速地提供给用户。同时cache还负责与源站点进行内容同步，把更新的内容以及本地没有的内容从源站点获取并保存在本地。Cache设备的数量、规模、总服务能力是衡量一个CDN系统服务能力的最基本的指标。\n * 负载均衡系统：\n   主要功能是负责对所有发起服务请求的用户进行访问调度，确定提供给用户的最终实际访问地址。两级调度体系分为全局负载均衡（GSLB）和本地负载均衡（SLB）。全局负载均衡主要根据用户就近性原则，通过对每个服务节点进行“最优”判断，确定向用户提供服务的cache的物理位置。本地负载均衡主要负责节点内部的设备负载均衡\n * 运营管理系统：\n   运营管理系统分为运营管理和网络管理子系统，负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作，包含客户管理、产品管理、计费管理、统计分析等功能。\n\n\n2. CDN的作用\n\nCDN一般会用来托管Web资源（包括文本、图片和脚本等），可供下载的资源（媒体文件、软件、文档等），应用程序（门户网站等）。使用CDN来加速这些资源的访问。\n\n（1）在性能方面，引入CDN的作用在于：\n\n * 用户收到的内容来自最近的数据中心，延迟更低，内容加载更快\n * 部分资源请求分配给了CDN，减少了服务器的负载\n\n（2）在安全方面，CDN有助于防御DDoS、MITM等网络攻击：\n\n * 针对DDoS：通过监控分析异常流量，限制其请求频率\n * 针对MITM：从源服务器到 CDN 节点到 ISP（Internet Service Provider），全链路 HTTPS 通信\n\n除此之外，CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。\n\n\n3. CDN的原理\n\nCDN和DNS有着密不可分的联系，先来看一下DNS的解析域名过程，在浏览器输入 www.test.com 的解析过程如下： （1） 检查浏览器缓存\n（2）检查操作系统缓存，常见的如hosts文件 （3）检查路由器缓存 （4）如果前几步都没没找到，会向ISP(网络服务提供商)的LDNS服务器查询\n（5）如果LDNS服务器没找到，会向根域名服务器(Root Server)请求解析，分为以下几步：\n\n * 根服务器返回顶级域名(TLD)服务器如.com，.cn，.org等的地址，该例子中会返回.com的地址\n * 接着向顶级域名服务器发送请求，然后会返回次级域名(SLD)服务器的地址，本例子会返回.test的地址\n * 接着向次级域名服务器发送请求，然后会返回通过域名查询到的目标IP，本例子会返回www.test.com的地址\n * Local DNS Server会缓存结果，并返回给用户，缓存在系统中\n\nCDN的工作原理： （1）用户未使用CDN缓存资源的过程：\n\n 1. 浏览器通过DNS对域名进行解析（就是上面的DNS解析过程），依次得到此域名对应的IP地址\n 2. 浏览器根据得到的IP地址，向域名的服务主机发送数据请求\n 3. 服务器向浏览器返回响应数据\n\n（2）用户使用CDN缓存资源的过程：\n\n 1. 对于点击的数据的URL，经过本地DNS系统的解析，发现该URL对应的是一个CDN专用的DNS服务器，DNS系统就会将域名解析权交给CNAME指向的CDN专用的DNS服务器。\n 2. CND专用DNS服务器将CND的全局负载均衡设备IP地址返回给用户\n 3. 用户向CDN的全局负载均衡设备发起数据请求\n 4. CDN的全局负载均衡设备根据用户的IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求\n 5. 区域负载均衡设备选择一台合适的缓存服务器来提供服务，将该缓存服务器的IP地址返回给全局负载均衡设备\n 6. 全局负载均衡设备把服务器的IP地址返回给用户\n 7. 用户向该缓存服务器发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。\n\n如果缓存服务器没有用户想要的内容，那么缓存服务器就会向它的上一级缓存服务器请求内容，以此类推，直到获取到需要的资源。最后如果还是没有，就会回到自己的服务器去获取资源。\n\nCNAME（意为：别名)：在域名解析中，实际上解析出来的指定域名对应的IP地址，或者该域名的一个CNAME，然后再根据这个CNAME来查找对应的IP地址。\n\n\n4. CDN的使用场景\n\n * **使用第三方的CDN服务：**如果想要开源一些项目，可以使用第三方的CDN服务\n * **使用CDN进行静态资源的缓存：**将自己网站的静态资源放在CDN上，比如js、css、图片等。可以将整个项目放在CDN上，完成一键部署。\n * **直播传送：**直播本质上是使用流媒体进行传送，CDN也是支持流媒体传送的，所以直播完全可以使用CDN来提高访问速度。CDN在处理流媒体的时候与处理普通静态文件有所不同，普通文件如果在边缘节点没有找到的话，就会去上一层接着寻找，但是流媒体本身数据量就非常大，如果使用回源的方式，必然会带来性能问题，所以流媒体一般采用的都是主动推送的方式来进行。\n\n\n二、懒加载\n\n\n1. 懒加载的概念\n\n懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。\n\n如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。\n\n\n2. 懒加载的特点\n\n * 减少无用资源的加载：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。\n * 提升用户体验: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。\n * 防止加载过多图片而影响其他资源文件的加载 ：会影响网站应用的正常使用。\n\n\n3. 懒加载的实现原理\n\n图片的加载是由src引起的，当对src赋值时，浏览器就会请求图片资源。根据这个原理，我们使用HTML5\n的data-xxx属性来储存图片的路径，在需要加载图片的时候，将data-xxx中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。\n\n注意：data-xxx 中的xxx可以自定义，这里我们使用data-src来定义。\n\n懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。\n\n使用原生JavaScript实现懒加载：\n\n知识点：\n\n（1）window.innerHeight 是浏览器可视区的高度\n\n（2）document.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离\n\n（3）imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）\n\n（4）图片加载条件：img.offsetTop < window.innerHeight + document.body.scrollTop;\n\n图示：\n\n代码实现：\n\n<div class=\"container\">\n     <img src=\"loading.gif\"  data-src=\"pic.png\">\n     <img src=\"loading.gif\"  data-src=\"pic.png\">\n     <img src=\"loading.gif\"  data-src=\"pic.png\">\n     <img src=\"loading.gif\"  data-src=\"pic.png\">\n     <img src=\"loading.gif\"  data-src=\"pic.png\">\n     <img src=\"loading.gif\"  data-src=\"pic.png\">\n</div>\n<script>\nvar imgs = document.querySelectorAll('img');\nfunction lozyLoad(){\n        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        var winHeight= window.innerHeight;\n        for(var i=0;i < imgs.length;i++){\n            if(imgs[i].offsetTop < scrollTop + winHeight ){\n                imgs[i].src = imgs[i].getAttribute('data-src');\n            }\n        }\n    }\n  window.onscroll = lozyLoad();\n</script>\n\n\n\n4. 懒加载与预加载的区别\n\n这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\n\n * 懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的\n   src\n   属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的\n   src 属性，以此来实现图片的延迟加载。\n * 预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。\n   通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr\n   属性，来实现图片的预加载。\n\n\n三、回流与重绘\n\n\n1. 回流与重绘的概念及触发条件\n\n（1）回流\n\n当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。\n\n下面这些操作会导致回流：\n\n * 页面的首次渲染\n * 浏览器的窗口大小发生变化\n * 元素的内容发生变化\n * 元素的尺寸或者位置发生变化\n * 元素的字体大小发生变化\n * 激活CSS伪类\n * 查询某些属性或者调用某些方法\n * 添加或者删除可见的DOM元素\n\n在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的DOM元素重新排列，它的影响范围有两种：\n\n * 全局范围：从根节点开始，对整个渲染树进行重新布局\n * 局部范围：对渲染树的某部分或者一个渲染对象进行重新布局\n\n（2）重绘\n\n当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。\n\n下面这些操作会导致回流：\n\n * color、background 相关属性：background-color、background-image 等\n * outline 相关属性：outline-color、outline-width 、text-decoration\n * border-radius、visibility、box-shadow\n\n注意： 当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。\n\n\n2. 如何避免回流与重绘？\n\n减少回流与重绘的措施：\n\n * 操作DOM时，尽量在低层级的DOM节点进行操作\n * 不要使用table布局， 一个小的改动可能会使整个table进行重新布局\n * 使用CSS的表达式\n * 不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。\n * 使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素\n * 避免频繁操作DOM，可以创建一个文档片段documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中\n * 将元素先设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。\n * 将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。\n\n浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列\n\n浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。\n\n上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。\n\n\n3. 如何优化动画？\n\n对于如何优化动画，我们知道，一般情况下，动画需要频繁的操作DOM，就就会导致页面的性能问题，我们可以将动画的position属性设置为absolute或者fixed，将动画脱离文档流，这样他的回流就不会影响到页面了。\n\n\n4. DOCUMENTFRAGMENT 是什么？用它跟直接操作 DOM 的区别是什么？\n\nMDN中对documentFragment的解释：\n\n> DocumentFragment，文档片段接口，一个没有父对象的最小文档对象。它被作为一个轻量版的\n> Document使用，就像标准的document一样，存储由节点（nodes）组成的文档结构。与document相比，最大的区别是DocumentFragment不是真实\n> DOM 树的一部分，它的变化不会触发 DOM 树的重新渲染，且不会导致性能等问题。\n\n当我们把一个 DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment\n自身，而是它的所有子孙节点。在频繁的DOM操作时，我们就可以将DOM元素插入DocumentFragment，之后一次性的将所有的子孙节点插入文档中。和直接操作DOM相比，将DocumentFragment\n节点插入DOM树时，不会触发页面的重绘，这样就大大提高了页面的性能。\n\n\n四、节流与防抖\n\n\n1. 对节流与防抖的理解\n\n * 函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n\n   秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n * 函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在\n   scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n\n防抖函数的应用场景：\n\n * 按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次\n * 服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次，还有搜索联想词功能类似⽣存环境请⽤lodash.debounce\n\n节流函数的适⽤场景：\n\n * 拖拽场景：固定时间内只执⾏⼀次，防⽌超⾼频次触发位置变动\n * 缩放场景：监控浏览器resize\n * 动画场景：避免短时间内多次触发动画引起性能问题\n\n\n2. 实现节流函数和防抖函数\n\n函数防抖的实现：\n\nfunction debounce(fn, wait) {\n  var timer = null;\n\n  return function() {\n    var context = this,\n      args = [...arguments];\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n\n\n函数节流的实现：\n\n// 时间戳版\nfunction throttle(fn, delay) {\n  var preTime = Date.now();\n\n  return function() {\n    var context = this,\n      args = [...arguments],\n      nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - preTime >= delay) {\n      preTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n\n// 定时器版\nfunction throttle (fun, wait){\n  let timeout = null\n  return function(){\n    let context = this\n    let args = [...arguments]\n    if(!timeout){\n      timeout = setTimeout(() => {\n        fun.apply(context, args)\n        timeout = null \n      }, wait)\n    }\n  }\n}\n\n\n\n五、图片优化\n\n\n1. 如何对项目中的图片进行优化？\n\n 1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。\n 2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。\n 3. 小图使用 base64 格式\n 4. 将多个图标文件整合到一张图片中（雪碧图）\n 5. 选择正确的图片格式：\n    * 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP\n      格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n    * 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n    * 照片使用 JPEG\n\n\n2. 常见的图片格式及使用场景\n\n（1）BMP，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。\n\n（2）GIF是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n（3）JPEG是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。\n\n（4）PNG-8是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。\n\n（5）PNG-24是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。\n\n（6）SVG是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。这意味着SVG图片在放大时，不会失真，所以它非常适合用来绘制Logo、Icon等。\n\n（7）WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。\n\n * 在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；\n * 在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；\n * WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。\n\n\n六、WEBPACK优化\n\n\n1. 如何提⾼WEBPACK的打包速度?\n\n（1）优化 LOADER\n\n对于 Loader 来说，影响打包效率首当其冲必属 Babel 了。因为 Babel 会将代码转为字符串生成 AST，然后对 AST\n继续进行转变最后再生成新的代码，项目越大，转换代码越多，效率就越低。当然了，这是可以优化的。\n\n首先我们优化 Loader 的文件搜索范围\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        // js 文件才使用 babel\n        test: //.js$/,\n        loader: 'babel-loader',\n        // 只在 src 文件夹下查找\n        include: [resolve('src')],\n        // 不会去查找的路径\n        exclude: /node_modules/\n      }\n    ]\n  }\n}\n\n\n对于 Babel 来说，希望只作用在 JS 代码上的，然后 node_modules 中使用的代码都是编译过的，所以完全没有必要再去处理一遍。\n\n当然这样做还不够，还可以将 Babel 编译过的文件缓存起来，下次只需要编译更改过的代码文件即可，这样可以大幅度加快打包时间\n\nloader: 'babel-loader?cacheDirectory=true'\n\n\n（2）HAPPYPACK\n\n受限于 Node 是单线程运行的，所以 Webpack 在打包的过程中也是单线程的，特别是在执行 Loader\n的时候，长时间编译的任务很多，这样就会导致等待的情况。\n\nHappyPack 可以将 Loader 的同步执行转换为并行的，这样就能充分利用系统资源来加快打包效率了\n\nmodule: {\n  loaders: [\n    {\n      test: //.js$/,\n      include: [resolve('src')],\n      exclude: /node_modules/,\n      // id 后面的内容对应下面\n      loader: 'happypack/loader?id=happybabel'\n    }\n  ]\n},\nplugins: [\n  new HappyPack({\n    id: 'happybabel',\n    loaders: ['babel-loader?cacheDirectory'],\n    // 开启 4 个线程\n    threads: 4\n  })\n]\n\n\n（3）DLLPLUGIN\n\nDllPlugin\n可以将特定的类库提前打包然后引入。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。DllPlugin的使用方法如下：\n\n// 单独配置在一个文件中\n// webpack.dll.conf.js\nconst path = require('path')\nconst webpack = require('webpack')\nmodule.exports = {\n  entry: {\n    // 想统一打包的类库\n    vendor: ['react']\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].dll.js',\n    library: '[name]-[hash]'\n  },\n  plugins: [\n    new webpack.DllPlugin({\n      // name 必须和 output.library 一致\n      name: '[name]-[hash]',\n      // 该属性需要与 DllReferencePlugin 中一致\n      context: __dirname,\n      path: path.join(__dirname, 'dist', '[name]-manifest.json')\n    })\n  ]\n}\n\n\n然后需要执行这个配置文件生成依赖文件，接下来需要使用 DllReferencePlugin 将依赖文件引入项目中\n\n// webpack.conf.js\nmodule.exports = {\n  // ...省略其他配置\n  plugins: [\n    new webpack.DllReferencePlugin({\n      context: __dirname,\n      // manifest 就是之前打包出来的 json 文件\n      manifest: require('./dist/vendor-manifest.json'),\n    })\n  ]\n}\n\n\n（4）代码压缩\n\n在 Webpack3 中，一般使用 UglifyJS 来压缩代码，但是这个是单线程运行的，为了加快效率，可以使用\nwebpack-parallel-uglify-plugin 来并行运行 UglifyJS，从而提高效率。\n\n在 Webpack4 中，不需要以上这些操作了，只需要将 mode 设置为 production\n就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS\n代码的过程中，我们还可以通过配置实现比如删除 console.log 这类代码的功能。\n\n（5）其他\n\n可以通过一些小的优化点来加快打包速度\n\n * resolve.extensions：用来表明文件后缀列表，默认查找顺序是 ['.js',\n   '.json']，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面\n * resolve.alias：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径\n * module.noParse：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助\n\n\n2. 如何减少 WEBPACK 打包体积\n\n（1）按需加载\n\n在开发 SPA 项目的时候，项目中都会存在很多路由页面。如果将这些页面全部打包进一个 JS\n文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，希望首页能加载的文件体积越小越好，这时候就可以使用按需加载，将每个路由页面单独打包为一个文件。当然不仅仅路由可以按需加载，对于\nloadash 这种大型类库同样可以使用这个功能。\n\n按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个\nPromise，当 Promise 成功以后去执行回调。\n\n（2）SCOPE HOISTING\n\nScope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。\n\n比如希望打包两个文件：\n\n// test.js\nexport const a = 1\n// index.js\nimport { a } from './test.js'\n\n\n对于这种情况，打包出来的代码会类似这样：\n\n[\n  /* 0 */\n  function (module, exports, require) {\n    //...\n  },\n  /* 1 */\n  function (module, exports, require) {\n    //...\n  }\n]\n\n\n但是如果使用 Scope Hoisting ，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码：\n\n[\n  /* 0 */\n  function (module, exports, require) {\n    //...\n  }\n]\n\n\n这样的打包方式生成的代码明显比之前的少多了。如果在 Webpack4 中你希望开启这个功能，只需要启用\noptimization.concatenateModules 就可以了：\n\nmodule.exports = {\n  optimization: {\n    concatenateModules: true\n  }\n}\n\n\n（3）TREE SHAKING\n\nTree Shaking 可以实现删除项目中未被引用的代码，比如：\n\n// test.js\nexport const a = 1\nexport const b = 2\n// index.js\nimport { a } from './test.js'\n\n\n对于以上情况，test 文件中的变量 b 如果没有在项目中使用到的话，就不会被打包到文件中。\n\n如果使用 Webpack 4 的话，开启生产环境就会自动启动这个优化功能。\n\n\n3. 如何⽤WEBPACK来优化前端性能？\n\n⽤webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。\n\n * 压缩代码：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和\n   ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩css\n * 利⽤CDN加速: 在构建过程中，将引⽤的静态资源路径修改为CDN上对应的路径。可以利⽤webpack对于 output 参数和各loader的\n   publicPath 参数来修改资源路径\n * Tree Shaking: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动webpack时追加参数 --optimize-minimize 来实现\n * Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存\n * 提取公共第三⽅库: SplitChunksPlugin插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码\n\n\n4. 如何提⾼WEBPACK的构建速度？\n\n 1. 多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码\n 2. 通过 externals 配置来提取常⽤库\n 3. 利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin\n    来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。\n 4. 使⽤ Happypack 实现多线程加速编译\n 5. 使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上\n    webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度\n 6. 使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码","frontMatter":{"title":"性能优化"}},{"name":"CSS","path":"参考八股文/CSS.html","texts":"一、CSS基础\n\n\n1. CSS选择器及其优先级\n\n选择器 格式 优先级权重 id选择器 #id 100 类选择器 .classname 10 属性选择器 a[ref=“eee”] 10 伪类选择器\nli:last-child 10 标签选择器 div 1 伪元素选择器 li:after 1 相邻兄弟选择器 h1+p 0 子选择器 ul>li 0 后代选择器\nli a 0 通配符选择器 * 0\n\n对于选择器的优先级：\n\n * 标签选择器、伪元素选择器：1\n * 类选择器、伪类选择器、属性选择器：10\n * id 选择器：100\n * 内联样式：1000\n\n注意事项：\n\n * !important声明的样式的优先级最高；\n * 如果优先级相同，则最后出现的样式生效；\n * 继承得到的样式的优先级最低；\n * 通用选择器（*）、子选择器（>）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；\n * 样式表的来源不同时，优先级顺序为：内联样式 > 内部样式 > 外部样式 > 浏览器用户自定义样式 > 浏览器默认样式。\n\n\n2. CSS中可继承与不可继承属性有哪些\n\n一、无继承性的属性\n\n 1. display：规定元素应该生成的框的类型\n 2. 文本属性：\n\n * vertical-align：垂直文本对齐\n * text-decoration：规定添加到文本的装饰\n * text-shadow：文本阴影效果\n * white-space：空白符的处理\n * unicode-bidi：设置文本的方向\n\n 3. 盒子模型的属性：width、height、margin、border、padding\n 4. 背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment\n 5. 定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n 6. 生成内容属性：content、counter-reset、counter-increment\n 7. 轮廓样式属性：outline-style、outline-width、outline-color、outline\n 8. 页面样式属性：size、page-break-before、page-break-after\n 9. 声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n\n二、有继承性的属性\n\n 1. 字体系列属性\n\n * font-family：字体系列\n * font-weight：字体的粗细\n * font-size：字体的大小\n * font-style：字体的风格\n\n 2. 文本系列属性\n\n * text-indent：文本缩进\n * text-align：文本水平对齐\n * line-height：行高\n * word-spacing：单词之间的间距\n * letter-spacing：中文或者字母之间的间距\n * text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）\n * color：文本颜色\n\n 3. 元素可见性\n\n * visibility：控制元素显示隐藏\n\n 4. 列表布局属性\n\n * list-style：列表风格，包括list-style-type、list-style-image等\n\n 5. 光标属性\n\n * cursor：光标显示为何种形态\n\n\n3. DISPLAY的属性值及其作用\n\n属性值 作用 none 元素不显示，并且会从文档流中移除。 block 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。 inline\n行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。 inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。 list-item\n像块类型元素一样显示，并添加样式列表标记。 table 此元素会作为块级表格来显示。 inherit 规定应该从父元素继承display属性的值。\n\n\n4. DISPLAY的BLOCK、INLINE和INLINE-BLOCK的区别\n\n（1）block： 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；\n\n（2）inline：\n元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n\n（3）inline-block： 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。\n\n对于行内元素和块级元素，其特点如下：\n\n（1）行内元素\n\n * 设置宽高无效；\n * 可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n * 不会自动换行；\n\n（2）块级元素\n\n * 可以设置宽高；\n * 设置margin和padding都有效；\n * 可以自动换行；\n * 多个块状，默认排列从上到下。\n\n\n5. 隐藏元素的方法有哪些\n\n * display: none：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。\n * visibility: hidden：元素在页面中仍占据空间，但是不会响应绑定的监听事件。\n * opacity: 0：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。\n * position: absolute：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。\n * z-index: 负值：来使其他元素遮盖住该元素，以此来实现隐藏。\n * clip/clip-path ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n * transform: scale(0,0)：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n\n\n6. LINK和@IMPORT的区别\n\n两者都是外部引用CSS的方式，它们的区别如下：\n\n * link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n * link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n * link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n * link支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n\n7. TRANSITION和ANIMATION的区别\n\n * transition是过度属性，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。\n * animation是动画属性，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。\n\n\n8. DISPLAY:NONE与VISIBILITY:HIDDEN的区别\n\n这两个属性都是让元素隐藏，不可见。两者区别如下：\n\n（1）在渲染树中\n\n * display:none会让元素完全从渲染树中消失，渲染时不会占据任何空间；\n * visibility:hidden不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。\n\n（2）是否是继承属性\n\n * display:none是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；\n * visibility:hidden是继承属性，子孙节点消失是由于继承了hidden，通过设置visibility:visible可以让子孙节点显示；\n   （3）修改常规文档流中元素的 display 通常会造成文档的重排，但是修改visibility属性只会造成本元素的重绘；\n\n（4）如果使用读屏器，设置为display:none的内容不会被读取，设置为visibility:hidden的内容会被读取。\n\n\n9. 伪元素和伪类的区别和作用？\n\n * 伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：\n\np::before {content:\"第一章：\";}\np::after {content:\"Hot!\";}\np::first-line {background:red;}\np::first-letter {font-size:30px;}\n\n\n * 伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：\n\na:hover {color: #FF00FF}\np:first-child {color: red}\n\n\n总结： 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。\n\n\n10. 对REQUESTANIMATIONFRAME的理解\n\n实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和\nanimation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是\nrequestAnimationFrame，顾名思义就是请求动画帧。\n\nMDN对该方法的描述：\n\n> window.requestAnimationFrame()\n> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。\n\n语法： window.requestAnimationFrame(callback);\n其中，callback是下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame()\n开始去执行回调函数的时刻。该方法属于宏任务，所以会在执行完微任务之后再去执行。\n\n取消动画：\n使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。\n\n优势：\n\n * CPU节能：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval\n   仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。\n * 函数节流：在高频率事件( resize, scroll\n   等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。\n * 减少DOM操作：requestAnimationFrame\n   会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。\n\nsetTimeout执行动画的缺点：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：\n\n * settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；\n * settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。\n\n\n11. 对盒模型的理解\n\nCSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 盒模型都是由四个部分组成的，分别是margin、border、padding和content。\n\n标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：\n\n * 标准盒模型的width和height属性的范围只包含了content，\n * IE盒模型的width和height属性的范围包含了border、padding和content。\n\n可以通过修改元素的box-sizing属性来改变元素的盒模型：\n\n * box-sizeing: content-box表示标准盒模型（默认值）\n * box-sizeing: border-box表示IE盒模型（怪异盒模型）\n\n\n12. 为什么有时候⽤TRANSLATE来改变位置⽽不是定位？\n\ntranslate 是 transform\n属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个\nGPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。\n⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。\n\n\n13. LI 与 LI 之间有看不见的空白间隔是什么原因引起的？如何解决？\n\n浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个<li>放在一行，这导致<li>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。\n\n解决办法：\n\n（1）为<li>设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。\n\n（2）将所有<li>写在同一行。不足：代码不美观。\n\n（3）将<ul>内的字符尺寸直接设为0，即font-size:0。不足：<ul>中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。\n\n（4）消除<ul>的字符间隔letter-spacing:-8px，不足：这也设置了<li>内的字符间隔，因此需要将<li>内的字符间隔设为默认letter-spacing:normal。\n\n\n14. CSS3中有哪些新特性\n\n * 新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）\n * 圆角 （border-radius:8px）\n * 多列布局 （multi-column layout）\n * 阴影和反射 （Shadoweflect）\n * 文字特效 （text-shadow）\n * 文字渲染 （Text-decoration）\n * 线性渐变 （gradient）\n * 旋转 （transform）\n * 增加了旋转,缩放,定位,倾斜,动画,多背景\n\n\n15. 替换元素的概念及计算规则\n\n通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。\n\n替换元素除了内容可替换这一特性以外，还有以下特性：\n\n * 内容的外观不受页面上的CSS的影响：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。\n * 有自己的尺寸：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如\n * 在很多CSS属性上有自己的一套表现规则：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。\n * 所有的替换元素都是内联水平元素：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。\n\n替换元素的尺寸从内而外分为三类：\n\n * 固有尺寸： 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。\n * HTML尺寸： 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。\n * CSS尺寸：\n   特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content\n   box。\n\n这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。\n（2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。\n（4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。\n（5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。\n\n\n16. 常见的图片格式及使用场景\n\n（1）BMP，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。\n\n（2）GIF是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n（3）JPEG是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。\n\n（4）PNG-8是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。\n\n（5）PNG-24是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。\n\n（6）SVG是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。\n\n（7）WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。\n\n * 在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；\n * 在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；\n * WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。\n\n\n17. 对 CSSSPRITES 的理解\n\nCSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的\nbackground-image，background-repeat，background-position属性的组合进行背景定位。\n\n优点：\n\n * 利用CSS Sprites能很好地减少网页的http请求，从而大大提高了页面的性能，这是CSS Sprites最大的优点；\n * CSS Sprites能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n缺点：\n\n * 在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；\n * CSSSprites在开发的时候相对来说有点麻烦，需要借助photoshop或其他工具来对每个背景单元测量其准确的位置。\n * 维护方面：CSS\n   Sprites在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的CSS，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动CSS。\n\n\n18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3X, @2X这种图片？\n\n以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px & 896px，也就是说当赋予一个 DIV元素宽度为\n414px，这个 DIV 就会填满手机的宽度；\n\n而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688\n物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。\n\n对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900\n像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。\n当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。\n\n还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:\n\nmy-image { background: (low.png); }\n@media only screen and (min-device-pixel-ratio: 1.5) {\n  #my-image { background: (high.png); }\n}\n\n\n\n19. MARGIN 和 PADDING 的使用场景\n\n * 需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；\n * 需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。\n\n\n20. 对LINE-HEIGHT 的理解及其赋值方式\n\n（1）line-height的概念：\n\n * line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离；\n * 如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定；\n * 一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容；\n * 把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中；\n * line-height 和 height 都能撑开一个高度；\n\n（2）line-height 的赋值方式：\n\n * 带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高\n * 纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px\n * 百分比：将计算后的值传递给后代\n\n\n21. CSS 优化和提高性能的方法有哪些？\n\n加载性能：\n\n（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。\n\n（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom\n0；但margin-bottom:bottom;margin-left:left;执行效率会更高。\n\n（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。\n\n选择器性能：\n\n（1）关键选择器（key\nselector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；\n\n（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。\n\n（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。\n\n（4）尽量少的去对标签进行选择，而是用class。\n\n（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。\n\n（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。\n\n渲染性能：\n\n（1）慎重使用高性能属性：浮动、定位。\n\n（2）尽量减少页面重排、重绘。\n\n（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。\n\n（4）属性值为0时，不加单位。\n\n（5）属性值为浮动小数0.**，可以省略小数点之前的0。\n\n（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。\n\n（7）不使用@import前缀，它会影响css的加载速度。\n\n（8）选择器优化嵌套，尽量避免层级过深。\n\n（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。\n\n（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。\n\n（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web\nfonts时会阻塞页面渲染损伤性能。\n\n可维护性、健壮性：\n\n（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。\n\n（2）样式与内容分离：将css代码定义到外部css中。\n\n\n22. CSS预处理器/后处理器是什么？为什么要使用它们？\n\n预处理器， 如：less，sass，stylus，用来预编译sass或者less，增加了css代码的复用性。层级，mixin， 变量，循环，\n函数等对编写以及开发UI组件都极为方便。\n\n后处理器， 如：\npostCss，通常是在完成的样式表中根据css规范处理css，让其更加有效。目前最常做的是给css属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n\ncss预处理器为css增加一些编程特性，无需考虑浏览器的兼容问题，可以在CSS中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让css更加的简洁，增加适应性以及可读性，可维护性等。\n\n其它css预处理器语言：Sass（Scss）, Less, Stylus, Turbine, Swithch css, CSS Cacheer, DT Css。\n\n使用原因：\n\n * 结构清晰， 便于扩展\n * 可以很方便的屏蔽浏览器私有语法的差异\n * 可以轻松实现多重继承\n * 完美的兼容了CSS代码，可以应用到老项目中\n\n\n23. ::BEFORE 和 :AFTER 的双冒号和单冒号有什么区别？\n\n（1）冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。\n（2）::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n\n注意： :before 和 :after\n这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before、::after。\n\n\n24. DISPLAY:INLINE-BLOCK 什么时候会显示间隙？\n\n * 有空格时会有间隙，可以删除空格解决；\n * margin正值时，可以让margin使用负值解决；\n * 使用font-size时，可通过设置font-size:0、letter-spacing、word-spacing解决；\n\n\n25. 单行、多行文本溢出隐藏\n\n * 单行文本溢出\n\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;      // 溢出用省略号显示\nwhite-space: nowrap;         // 规定段落中的文本不进行换行\n\n\n * 多行文本溢出\n\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;     // 溢出用省略号显示\ndisplay:-webkit-box;         // 作为弹性伸缩盒子模型显示。\n-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列\n-webkit-line-clamp:3;        // 显示的行数\n\n\n注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个-webkit- 来兼容一部分浏览器。\n\n\n26. SASS、LESS 是什么？为什么要使用他们？\n\n他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS\n赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行\n(借助 Node.js)。\n\n为什么要使用它们？\n\n * 结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。\n * 可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与\n   LESS 代码一同编译。\n\n\n27. 对媒体查询的理解？\n\n媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。\n\n媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。\n\n<!-- link元素中的CSS媒体查询 --> \n<link rel=\"stylesheet\" media=\"(max-width: 800px)\" href=\"example.css\" /> \n<!-- 样式表中的CSS媒体查询 --> \n<style> \n@media (max-width: 600px) { \n  .facet_sidebar { \n    display: none; \n  } \n}\n</style>\n\n\n简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media\n可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media\n是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n\n\n28. 对 CSS 工程化的理解\n\nCSS 工程化是为了解决以下问题：\n\n 1. 宏观设计：CSS 代码如何组织、如何拆分、模块结构怎样设计？\n 2. 编码优化：怎样写出更好的 CSS？\n 3. 构建：如何处理我的 CSS，才能让它的打包结果最优？\n 4. 可维护性：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？\n\n以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：\n\n * 预处理器：Less、 Sass 等；\n * 重要的工程化插件： PostCss；\n * Webpack loader 等 。\n\n基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：\n\n（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？\n\n预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码： 那为什么写 CSS\n代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue\n的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：\n\n 1. 宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；\n 2. 编码优化上：我们希望能写出结构清晰、简明易懂的\n    CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；\n 3. 可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。\n\n这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：\n\n * 嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；\n * 支持定义 css 变量；\n * 提供计算函数；\n * 允许对代码片段进行 extend 和 mixin；\n * 支持循环语句的使用；\n * 支持将 CSS 文件模块化，实现复用。\n\n（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？\n\n它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS\n代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于\nPostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。\n\nPostCss 在业务中的使用场景非常多：\n\n * 提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；\n * 当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 Autoprefixer 插件可以帮助我们自动增加浏览器前缀；\n * 允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；\n\n（3）Webpack 能处理 CSS 吗？如何实现？ Webpack 能处理 CSS 吗：\n\n * Webpack 在裸奔的状态下，是不能处理 CSS 的，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript\n   代码的模块化打包工具；\n * Webpack 在 loader 的辅助下，是可以处理 CSS 的。\n\n如何用 Webpack 实现对 CSS 的处理：\n\n * Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader\n * 注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：\n   * css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；\n   * style-loader：创建style标签，把 CSS 内容写入标签。\n\n在实际使用中，css-loader 的执行顺序一定要安排在 style-loader 的前面。因为只有完成了编译过程，才可以对 css\n代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。\n\n\n29. 如何判断元素是否到达可视区域\n\n以图片显示为例：\n\n * window.innerHeight 是浏览器可视区的高度；\n * document.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离；\n * imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）；\n * 内容达到显示区域的：img.offsetTop < window.innerHeight + document.body.scrollTop;\n\n\n\n\n30. Z-INDEX属性在什么情况下会失效\n\n通常 z-index\n的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。\n\nz-index属性在下列情况下会失效：\n\n * 父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；\n * 元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；\n * 元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；\n\n\n31. CSS3中的TRANSFORM有哪些属性\n\n\n二、页面布局\n\n\n1. 常见的CSS布局单位\n\n常用的布局单位包括像素（px），百分比（%），em，rem，vw/vh。\n\n（1）像素（px）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：\n\n * CSS像素：为web开发者提供，在CSS中使用的一个抽象单位；\n * 物理像素：只与设备的硬件密度有关，任何设备的物理像素都是固定的。\n\n（2）百分比（%），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。\n\n（3）em和rem相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：em相对于父元素，rem相对于根元素。\n\n * em：\n   文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。\n * rem：\n   rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。作用：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。\n\n（4）vw/vh是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。\n\n * vw：相对于视窗的宽度，视窗宽度是100vw；\n * vh：相对于视窗的高度，视窗高度是100vh；\n * vmin：vw和vh中的较小值；\n * vmax：vw和vh中的较大值；\n\nvw/vh 和百分比很类似，两者的区别：\n\n * 百分比（%）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)\n * vw/vm：相对于视窗的尺寸\n\n\n2. PX、EM、REM的区别及使用场景\n\n三者的区别：\n\n * px是固定的像素，一旦设置了就无法因为适应页面大小而改变。\n * em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。\n * em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。\n\n使用场景：\n\n * 对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。\n * 对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。\n\n\n3. 两栏布局的实现\n\n一般两栏布局指的是左边一栏宽度固定，右边一栏宽度自适应，两栏布局的具体实现：\n\n * 利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。\n\n.outer {\n  height: 100px;\n}\n.left {\n  float: left;\n  width: 200px;\n  background: tomato;\n}\n.right {\n  margin-left: 200px;\n  width: auto;\n  background: gold;\n}\n\n\n * 利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden;\n   这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。\n\n.left{\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n }\n .right{\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n }\n\n\n * 利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。\n\n.outer {\n  display: flex;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  background: tomato;\n}\n.right {\n  flex: 1;\n  background: gold;\n}\n\n\n * 利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。\n\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  position: absolute;\n  width: 200px;\n  height: 100px;\n  background: tomato;\n}\n.right {\n  margin-left: 200px;\n  background: gold;\n}\n\n\n * 利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。\n\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  background: tomato;\n}\n.right {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 200px;\n  background: gold;\n}\n\n\n\n4. 三栏布局的实现\n\n三栏布局一般指的是页面中一共有三栏，左右两栏宽度固定，中间自适应的布局，三栏布局的具体实现：\n\n * 利用绝对定位，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。\n\n.outer {\n  position: relative;\n  height: 100px;\n}\n\n.left {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n  background: lightgreen;\n}\n\n\n * 利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。\n\n.outer {\n  display: flex;\n  height: 100px;\n}\n\n.left {\n  width: 100px;\n  background: tomato;\n}\n\n.right {\n  width: 100px;\n  background: gold;\n}\n\n.center {\n  flex: 1;\n  background: lightgreen;\n}\n\n\n * 利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式**，中间一栏必须放到最后：**\n\n.outer {\n  height: 100px;\n}\n\n.left {\n  float: left;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  float: right;\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  height: 100px;\n  margin-left: 100px;\n  margin-right: 200px;\n  background: lightgreen;\n}\n\n\n * 圣杯布局，利用浮动和负边距来实现。父级元素设置左右的\n   padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin\n   负值将其移动到上一行，再利用相对定位，定位到两边。\n\n.outer {\n  height: 100px;\n  padding-left: 100px;\n  padding-right: 200px;\n}\n\n.left {\n  position: relative;\n  left: -100px;\n\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  position: relative;\n  left: 200px;\n\n  float: right;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n}\n\n\n * 双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding\n   来实现的。本质上来说，也是通过浮动和外边距负值来实现的。\n\n.outer {\n  height: 100px;\n}\n\n.left {\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  float: left;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.wrapper {\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n}\n\n.center {\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n}\n\n\n\n5. 水平垂直居中的实现\n\n * 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要考虑浏览器兼容问题。\n\n.parent {    position: relative;} .child {    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%,-50%);}\n\n\n * 利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于盒子有宽高的情况：\n\n.parent {\n    position: relative;\n}\n \n.child {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n}\n\n\n * 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于盒子宽高已知的情况\n\n.parent {\n    position: relative;\n}\n \n.child {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -50px;     /* 自身 height 的一半 */\n    margin-left: -50px;    /* 自身 width 的一半 */\n}\n\n\n * 使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要考虑兼容的问题，该方法在移动端用的较多：\n\n.parent {\n    display: flex;\n    justify-content:center;\n    align-items:center;\n}\n\n\n\n6. 如何根据设计稿进行移动端适配？\n\n移动端适配主要有两个维度：\n\n * 适配不同像素密度， 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；\n * 适配不同屏幕大小， 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px\n   作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。\n\n为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。\n\n\n7. 对FLEX布局的理解及其使用场景\n\nFlex是FlexibleBox的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用Flex布局的元素，称为Flex容器（flex\ncontainer），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目（flex\nitem），简称\"项目\"。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。\n\n以下6个属性设置在容器上：\n\n * flex-direction属性决定主轴的方向（即项目的排列方向）。\n * flex-wrap属性定义，如果一条轴线排不下，如何换行。\n * flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n * justify-content属性定义了项目在主轴上的对齐方式。\n * align-items属性定义项目在交叉轴上如何对齐。\n * align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n以下6个属性设置在项目上：\n\n * order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n * flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n * flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n * flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n * flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。\n * align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n简单来说：\nflex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。\n\n\n8. 响应式设计的概念及基本原理\n\n响应式网站设计（Responsive Web design）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。\n\n关于原理： 基本原理是通过媒体查询（@media）查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的viewport。\n\n<meta name=\"’viewport’\" content=\"”width=device-width,\" initial-scale=\"1.\" maximum-scale=\"1,user-scalable=no”\"/>\n\n\n\n三、定位与浮动\n\n\n1. 为什么需要清除浮动？清除浮动的方式\n\n浮动的定义： 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。\n\n浮动的工作原理：\n\n * 浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）\n * 浮动元素碰到包含它的边框或者其他浮动元素的边框停留\n\n浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。\n\n浮动元素引起的问题？\n\n * 父元素的高度无法被撑开，影响与父元素同级的元素\n * 与浮动元素同级的非浮动元素会跟随其后\n * 若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构\n\n清除浮动的方式如下：\n\n * 给父级div定义height属性\n * 最后一个浮动元素之后添加一个空的div标签，并添加clear:both样式\n * 包含浮动元素的父级标签添加overflow:hidden或者overflow:auto\n * 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**\n\n.clearfix:after{\n    content: \"/200B\";\n    display: table; \n    height: 0;\n    clear: both;\n  }\n  .clearfix{\n    *zoom: 1;\n  }\n\n\n\n2. 使用 CLEAR 属性清除浮动的原理？\n\n使用clear属性清除浮动，其语法如下：\n\nclear:none|left|right|both\n\n\n如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。\n\n官方对clear属性解释：“元素盒子的边不能和前面的浮动元素相邻”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。\n\n还需要注意 clear\n属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“前面的”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。\n\n一般使用伪元素的方式清除浮动：\n\n.clear::after{  content:'';  display: block;   clear:both;}\n\n\nclear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。\n\n\n3. 对BFC的理解，如何创建BFC\n\n先来看两个相关的概念：\n\n * Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。\n * Formatting\n   context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。\n\n块格式化上下文（Block Formatting\nContext，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。\n\n通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。\n\n创建BFC的条件：\n\n * 根元素：body；\n * 元素设置浮动：float 除 none 以外的值；\n * 元素设置绝对定位：position (absolute、fixed)；\n * display 值为：inline-block、table-cell、table-caption、flex等；\n * overflow 值为：hidden、auto、scroll；\n\nBFC的特点：\n\n * 垂直方向上，自上而下排列，和文档流的排列方式一致。\n * 在BFC中上下相邻的两个容器的margin会重叠\n * 计算BFC的高度时，需要计算浮动元素的高度\n * BFC区域不会与浮动的容器发生重叠\n * BFC是独立的容器，容器内部元素不会影响外部元素\n * 每个元素的左margin值和容器的左border相接触\n\nBFC的作用：\n\n * 解决margin的重叠问题：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。\n * 解决高度塌陷的问题：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置overflow:hidden。\n * 创建自适应两栏布局：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。\n\n.left{\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n }\n .right{\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n }\n \n<div class=\"left\"></div>\n<div class=\"right\"></div>\n\n\n左侧设置float:left，右侧设置overflow:\nhidden。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。\n\n\n4. 什么是MARGIN重叠问题？如何解决？\n\n问题描述：\n两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，浮动的元素和绝对定位这种脱离文档流的元素的外边距不会折叠。重叠只会出现在垂直方向。\n\n计算原则： 折叠合并后外边距的计算原则如下：\n\n * 如果两者都是正数，那么就去最大者\n * 如果是一正一负，就会正值减去负值的绝对值\n * 两个都是负值时，用0减去两个中绝对值大的那个\n\n解决办法： 对于折叠的情况，主要有两种：兄弟之间重叠和父子之间重叠 （1）兄弟之间重叠\n\n * 底部元素变为行内盒子：display: inline-block\n * 底部元素设置浮动：float\n * 底部元素的position的值为absolute/fixed\n\n（2）父子之间重叠\n\n * 父元素加入：overflow: hidden\n * 父元素添加透明边框：border:1px solid transparent\n * 子元素变为行内盒子：display: inline-block\n * 子元素加入浮动属性或定位\n\n\n5. 元素的层叠顺序\n\n层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则： 对于上图，由上到下分别是：\n（1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。\n（3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。\n（6）z-index:0：层叠级数为0的定位元素。 （7)正z-index：z-index属性值为正的定位元素。\n\n注意: 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。\n\n\n6. POSITION的属性有哪些，区别是什么\n\nposition有以下属性值：\n\n属性值 概述 absolute\n生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。 relative\n生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。 fixed\n生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。\nstatic 默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index\n声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。 inherit 规定从父元素继承position属性的值\n\n前面三者的定位方式如下：\n\n * relative： 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\n\n\n\n * fixed： 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\n\n\n\n * absolute： 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了\n   top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了position:relative/absolute/fixed的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\n\n\n\n\n7. DISPLAY、FLOAT、POSITION的关系\n\n（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。\n\n（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。\n\n（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。\n\n（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。\n\n总的来说，可以把它看作是一个类似优先级的机制，\"position:absolute\"和\"position:fixed\"优先级最高，有它存在的时候，浮动不起作用，'display'的值也需要调整；其次，元素的'float'特性的值不是\"none\"的时候或者它是根元素的时候，调整'display'的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，'display'特性值同设置值。\n\n\n8. ABSOLUTE与FIXED共同点与不同点\n\n共同点：\n\n * 改变行内元素的呈现方式，将display置为inline-block  \n * 使元素脱离普通文档流，不再占据文档物理空间\n * 覆盖非定位文档元素\n\n不同点：\n\n * abuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。\n * 在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。\n\n\n9. 对 STICKY 定位的理解\n\nsticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：position: sticky; 基于用户的滚动位置来定位。\n\n粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。它的行为就像\nposition:relative; 而当页面滚动超出目标区域时，它的表现就像\nposition:fixed;，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right,\nbottom 或 left 之一，换言之，指定 top, right, bottom 或 left\n四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。\n\n\n四、场景应用\n\n\n1. 实现一个三角形\n\nCSS绘制三角形主要用到的是border属性，也就是边框。\n\n平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子：\n\ndiv {\n    width: 0;\n    height: 0;\n    border: 100px solid;\n    border-color: orange blue red green;\n}\n\n\n将元素的长宽都设置为0，显示出来的效果是这样的： 所以可以根据border这个特性来绘制三角形： （1)三角1\n\ndiv {    width: 0;    height: 0;    border-top: 50px solid red;    border-right: 50px solid transparent;    border-left: 50px solid transparent;}\n\n\n（2)三角2\n\ndiv {\n    width: 0;\n    height: 0;\n    border-bottom: 50px solid red;\n    border-right: 50px solid transparent;\n    border-left: 50px solid transparent;\n}\n\n\n（3)三角3\n\ndiv {\n    width: 0;\n    height: 0;\n    border-left: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n}\n\n\n（4)三角4\n\ndiv {\n    width: 0;\n    height: 0;\n    border-right: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n}\n\n\n（5)三角5\n\ndiv {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n\n还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。\n\n\n2. 实现一个扇形\n\n用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：\n\ndiv{\n    border: 100px solid transparent;\n    width: 0;\n    heigt: 0;\n    border-radius: 100px;\n    border-top-color: red;\n}\n\n\n\n\n\n3. 实现一个宽高自适应的正方形\n\n * 利用vw来实现：\n\n.square {\n  width: 10%;\n  height: 10vw;\n  background: tomato;\n}\n\n\n * 利用元素的margin/padding百分比是相对父元素width的性质来实现：\n\n.square {\n  width: 20%;\n  height: 0;\n  padding-top: 20%;\n  background: orange;\n}\n\n\n * 利用子元素的margin-top的值来实现：\n\n.square {\n  width: 30%;\n  overflow: hidden;\n  background: yellow;\n}\n.square::after {\n  content: '';\n  display: block;\n  margin-top: 100%;\n}\n\n\n\n4. 画一条0.5PX的线\n\n * 采用transform: scale()的方式，该方法用来定义元素的2D 缩放转换：\n\ntransform: scale(0.5,0.5);\n\n\n * 采用meta viewport的方式\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5\"/>\n\n\n这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport只针对于移动端，只在移动端上才能看到效果\n\n\n5. 设置小于12PX的字体\n\n在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。\n\n解决办法：\n\n * 使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。\n * 使用css3的transform缩放属性-webkit-transform:scale(0.5);\n   注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/...；\n * 使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n\n\n6. 如何解决 1PX 问题？\n\n1px 问题指的是：在一些 Retina屏幕 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px\n并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：\n\nwindow.devicePixelRatio = 设备的物理像素 / CSS像素。\n\n\n打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 devicePixelRatio 的值。这里选中 iPhone6/7/8\n这系列的机型，输出的结果就是2： 这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px\n粗一些。 解决1px 问题的三种思路：\n\n思路一：直接写 0.5PX\n\n如果之前 1px 的样式这样写：\n\nborder:1px solid #333\n\n\n可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data\n里，达到这样的效果（这里用 JSX 语法做示范）：\n\n<div id=\"container\" data-device={{window.devicePixelRatio}}></div>\n\n\n然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：\n\n#container[data-device=\"2\"] {\n  border:0.5px solid #333\n}\n\n\n直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS\n系统需要8及以上的版本，安卓系统则直接不兼容。\n\n思路二：伪元素先放大后缩小\n\n这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。\n\n思路是先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute\n之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS\n动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px\n的二分之一，间接地实现了 0.5px 的效果。\n\n代码如下：\n\n#container[data-device=\"2\"] {\n    position: relative;\n}\n#container[data-device=\"2\"]::after{\n      position:absolute;\n      top: 0;\n      left: 0;\n      width: 200%;\n      height: 200%;\n      content:\"\";\n      transform: scale(0.5);\n      transform-origin: left top;\n      box-sizing: border-box;\n      border: 1px solid #333;\n    }\n}\n\n\n思路三：VIEWPORT 缩放来解决\n\n这个思路就是对 meta 标签里几个关键属性下手：\n\n<meta name=\"viewport\" content=\"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no\">\n\n\n这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px\n样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：\n\nconst scale = 1 / window.devicePixelRatio;\n// 这里 metaEl 指的是 meta 标签对应的 Dom\nmetaEl.setAttribute('content', `width=device-width,user-scalable=no,initial-scale=${scale},maximum-scale=${scale},minimum-scale=${scale}`);\n\n\n这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px\n已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。","frontMatter":{"title":"CSS"}},{"name":"HTML","path":"参考八股文/HTML.html","texts":"1. SRC和HREF的区别\n\nsrc和href都是用来引用外部的资源，它们的区别如下：\n\n * src：\n   表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。\n * href：\n   表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。\n   常用在a、link等标签上。\n\n\n2. 对HTML语义化的理解\n\n语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）。通俗来讲就是用正确的标签做正确的事情。\n\n语义化的优点如下：\n\n * 对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；\n * 对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。\n\n常见的语义化标签：\n\n<header></header>  头部\n\n<nav></nav>  导航栏\n\n<section></section>  区块（有语义化的div）\n\n<main></main>  主要区域\n\n<article></article>  主要内容\n\n<aside></aside>  侧边栏\n\n<footer></footer>  底部\n\n\n\n3. DOCTYPE(⽂档类型) 的作⽤\n\nDOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档，不同的渲染模式会影响浏览器对\nCSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。\n\n浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是CSS1Compat）：\n\n * CSS1Compat：标准模式（Strick mode），默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。\n * BackCompat：怪异模式(混杂模式)(Quick\n   mode)，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。\n\n\n4. SCRIPT标签中DEFER和ASYNC的区别\n\n如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。\n\n下图可以直观的看出三者之间的区别:\n\n\n\n其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。\n\ndefer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下：\n\n * 执行顺序： 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；\n * 脚本是否并行执行：async属性，表示后续文档的加载和执行与js脚本的加载和执行是并行进行的，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。\n\n\n5. 常⽤的META标签有哪些\n\nmeta 标签由 name 和 content\n属性定义，用来描述网页文档的属性，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name。\n\n常用的meta标签： （1）charset，用来描述HTML文档的编码类型：\n\n<meta charset=\"UTF-8\" >\n\n\n（2） keywords，页面关键词：\n\n<meta name=\"keywords\" content=\"关键词\" />\n\n\n（3）description，页面描述：\n\n<meta name=\"description\" content=\"页面描述内容\" />\n\n\n（4）refresh，页面重定向和刷新：\n\n<meta http-equiv=\"refresh\" content=\"0;url=\" />\n\n\n（5）viewport，适配移动端，可以控制视口的大小和比例：\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n\n其中，content 参数有以下几种：\n\n * width viewport ：宽度(数值/device-width)\n * height viewport ：高度(数值/device-height)\n * initial-scale ：初始缩放比例\n * maximum-scale ：最大缩放比例\n * minimum-scale ：最小缩放比例\n * user-scalable ：是否允许用户缩放(yes/no）\n\n（6）搜索引擎索引方式：\n\n<meta name=\"robots\" content=\"index,follow\" />\n\n\n其中，content 参数有以下几种：\n\n * all：文件将被检索，且页面上的链接可以被查询；\n * none：文件将不被检索，且页面上的链接不可以被查询；\n * index：文件将被检索；\n * follow：页面上的链接可以被查询；\n * noindex：文件将不被检索；\n * nofollow：页面上的链接不可以被查询。\n\n\n6. HTML5有哪些更新\n\n1. 语义化标签\n\n * header：定义文档的页眉（头部）；\n * nav：定义导航链接的部分；\n * footer：定义文档或节的页脚（底部）；\n * article：定义文章内容；\n * section：定义文档中的节（section、区段）；\n * aside：定义其所处内容之外的内容（侧边）；\n\n2. 媒体标签\n\n（1） audio：音频\n\n<audio src='' controls autoplay loop='true'></audio>\n\n\n属性：\n\n * controls 控制面板\n * autoplay 自动播放\n * loop=‘true’ 循环播放\n\n（2）video视频\n\n<video src='' poster='imgs/aa.jpg' controls></video>\n\n\n属性：\n\n * poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。\n * controls 控制面板\n * width\n * height\n\n（3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。\n\n<video>\n     <source src='aa.flv' type='video/flv'></source>\n     <source src='aa.mp4' type='video/mp4'></source>\n</video>\n\n\n3. 表单\n\n表单类型：\n\n * email ：能够验证当前输入的邮箱地址是否合法\n * url ： 验证URL\n * number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。\n * search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。\n * range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值\n * color ： 提供了一个颜色拾取器\n * time ： 时分秒\n * data ： 日期选择年月日\n * datatime ： 时间和日期(目前只有Safari支持)\n * datatime-local ：日期时间控件\n * week ：周控件\n * month：月控件\n\n表单属性：\n\n * placeholder ：提示信息\n * autofocus ：自动获取焦点\n * autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：\n   * 表单必须提交过\n   * 必须有name属性。\n * required：要求输入框不能为空，必须有值才能够提交。\n * pattern=\" \" 里面写入想要的正则模式，例如手机号patte=\"^(+86)?/d{10}$\"\n * multiple：可以选择多个文件或者多个邮箱\n * form=\" form表单的ID\"\n\n表单事件：\n\n * oninput 每当input里的输入框内容发生变化都会触发此事件。\n * oninvalid 当验证不通过时触发此事件。\n\n4. 进度条、度量器\n\n * progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少\n * meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）\n   * high/low：规定被视作高/低的范围\n   * max/min：规定最大/小值\n   * value：规定当前度量值\n\n设置规则：min < low < high < max\n\n5.DOM查询操作\n\n * document.querySelector()\n * document.querySelectorAll()\n\n它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)\n\n6. WEB存储\n\nHTML5 提供了两种在客户端存储数据的新方法：\n\n * localStorage - 没有时间限制的数据存储\n * sessionStorage - 针对一个 session 的数据存储\n\n7. 其他\n\n * 拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：\n\n<img draggable=\"true\" />\n\n\n * 画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas\n   拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。\n\n<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n\n\n * SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML\n   格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准\n * 地理定位：Geolocation（地理定位）用于定位用户的位置。‘\n\n总结： （1）新增语义化标签：nav、header、footer、aside、section、article （2）音频、视频标签：audio、video\n（3）数据存储：localStorage、sessionStorage\n（4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议）\n（5）input标签新增属性：placeholder、autocomplete、autofocus、required （6）history\nAPI：go、forward、back、pushstate\n\n移除的元素有：\n\n * 纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n * 对可用性产生负面影响的元素：frame，frameset，noframes；\n\n\n7. IMG的SRCSET属性的作⽤？\n\n响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img\n会自动加载不同的图片。用法如下：\n\n<img src=\"image-128.png\" srcset=\"image-256.png 2x\" />\n\n\n使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。\n\n按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：\n\n<img src=\"image-128.png\"\n     srcset=\"image-128.png 128w, image-256.png 256w, image-512.png 512w\"\n     sizes=\"(max-width: 360px) 340px, 128px\" />\n\n\n其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w\n单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。\n\nsizes语法如下：\n\nsizes=\"[media query] [length], [media query] [length] ... \"\n\n\nsizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。\n\n\n8. 行内元素有哪些？块级元素有哪些？ 空(VOID)元素有那些？\n\n * 行内元素有：a b span img input select strong；\n * 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p；\n\n空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：\n\n * 常见的有：<br>、<hr>、<img>、<input>、<link>、<meta>；\n * 鲜见的有：<area>、<base>、<col>、<colgroup>、<command>、<embed>、<keygen>、<param>、<source>、<track>、<wbr>。\n\n\n9. 说一下 WEB WORKER\n\n在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的\njs，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。\n\n如何创建 web worker：\n\n 1. 检测浏览器对于 web worker 的支持性\n 2. 创建 web worker 文件（js，回传函数等）\n 3. 创建 web worker 对象\n\n\n10. HTML5的离线储存怎么使用，它的工作原理是什么\n\n离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n\n**原理：**HTML5的离线存储是基于一个新建的 .appcache\n文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示\n\n使用方法： （1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：\n\n<html lang=\"en\" manifest=\"index.manifest\">\n\n\n（2）在 cache.manifest 文件中编写需要离线存储的资源：\n\nCACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n\n\n * CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。\n * NETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和\n   NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。\n * FALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问\n   offline.html 。\n\n（3）在离线状态时，操作 window.applicationCache 进行离线缓存的操作。\n\n如何更新缓存：\n\n（1）更新 manifest 文件\n\n（2）通过 javascript 操作\n\n（3）清除浏览器缓存\n\n注意事项：\n\n（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。\n\n（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。\n\n（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。\n\n（4）FALLBACK 中的资源必须和 manifest 文件同源。\n\n（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。\n\n（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。\n\n（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。\n\n\n11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\n\n * 在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据\n   manifest\n   文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的\n   manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。\n * 离线的情况下，浏览器会直接使用离线存储的资源。\n\n\n12. TITLE与H1的区别、B与STRONG的区别、I与EM的区别？\n\n * strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。\n * title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响\n * i内容展示为斜体，em表示强调的文本\n\n\n13. IFRAME 有那些优点和缺点？\n\niframe 元素会创建包含另外一个文档的内联框架（即行内框架）。\n\n优点：\n\n * 用来加载速度较慢的内容（如广告）\n * 可以使脚本可以并行下载\n * 可以实现跨子域通信\n\n缺点：\n\n * iframe 会阻塞主页面的 onload 事件\n * 无法被一些搜索引擎索识别\n * 会产生很多页面，不容易管理\n\n\n14. LABEL 的作用是什么？如何使用？\n\nlabel标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。\n\n * 使用方法1：\n\n<label for=\"mobile\">Number:</label>\n<input type=\"text\" id=\"mobile\"/>\n\n\n * 使用方法2：\n\n<label>Date:<input type=\"text\"/></label>\n\n\n\n15. CANVAS和SVG的区别\n\n（1）SVG： SVG可缩放矢量图形（Scalable Vector\nGraphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG\nDOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG\n对象的属性发生变化，那么浏览器能够自动重现图形。\n\n其特点如下：\n\n * 不依赖分辨率\n * 支持事件处理器\n * 最适合带有大型渲染区域的应用程序（比如谷歌地图）\n * 复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）\n * 不适合游戏应用\n\n（2）Canvas： Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。\n\n其特点如下：\n\n * 依赖分辨率\n * 不支持事件处理器\n * 弱的文本渲染能力\n * 能够以 .png 或 .jpg 格式保存结果图像\n * 最适合图像密集型的游戏，其中的许多对象会被频繁重绘\n\n注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。\n\n\n16. HEAD 标签有什么作用，其中什么标签必不可少？\n\n标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。\n\n文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。\n\n下面这些标签可用在 head 部分：<base>, <link>, <meta>, <script>, <style>, <title>。\n\n其中 <title> 定义文档的标题，它是 head 部分中唯一必需的元素。\n\n\n17. 文档声明（DOCTYPE）和<!DOCTYPE HTML>有何作用? 严格模式与混杂模式如何区分？它们有何意义?\n\n文档声明的作用： 文档声明是为了告诉浏览器，当前HTML文档使用什么版本的HTML来写的，这样浏览器才能按照声明的版本来正确的解析。\n\n的作用：<!doctype html> 的作用就是让浏览器进入标准模式，使用最新的 HTML5\n标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。\n\n严格模式与混杂模式的区分：\n\n * 严格模式： 又称为标准模式，指浏览器按照W3C标准解析代码；\n * 混杂模式： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；\n\n区分：网页中的DTD，直接影响到使用的是严格模式还是浏览模式，可以说DTD的使用与这两种方式的区别息息相关。\n\n * 如果文档包含严格的DOCTYPE ，那么它一般以严格模式呈现（严格 DTD ——严格模式）；\n * 包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，但有过渡 DTD 而没有 URI\n   （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式）；\n * DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现（DTD不存在或者格式不正确——混杂模式）；\n * HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(HTML5\n   没有严格和混杂之分)。\n\n总之，严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。\n\n\n18. 浏览器乱码的原因是什么？如何解决？\n\n产生乱码的原因：\n\n * 网页源代码是gbk的编码，而内容中的中文字是utf-8编码的，这样浏览器打开即会出现html乱码，反之也会出现乱码；\n * html网页编码是gbk，而程序从数据库中调出呈现是utf-8编码的内容也会造成编码乱码；\n * 浏览器不能自动检测网页编码，造成网页乱码。\n\n解决办法：\n\n * 使用软件编辑HTML网页内容；\n * 如果网页设置编码是gbk，而数据库储存数据编码格式是UTF-8，此时需要程序查询数据库数据显示数据前进程序转码；\n * 如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。\n\n\n19. 渐进增强和优雅降级之间的区别\n\n（1）渐进增强（progressive\nenhancement）：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。\n（2）优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。\n\n两者区别：\n\n * 优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；\n * 降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。\n\n“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如\nIE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)”\n的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被\nYahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n\n\n20. 说一下 HTML5 DRAG API\n\n * dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。\n * darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。\n * dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。\n * dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。\n * dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。\n * drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。\n * dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。","frontMatter":{"title":"HTML"}},{"name":"JS上","path":"参考八股文/JS上.html","texts":"一、数据类型\n\n\n1. JAVASCRIPT有哪些数据类型，它们的区别？\n\nJavaScript共有八种数据类型，分别是\nUndefined、Null、Boolean、Number、String、Object、Symbol、BigInt。\n\n其中 Symbol 和 BigInt 是ES6 中新增的数据类型：\n\n * Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\n * BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number\n   能够表示的安全整数范围。\n\n这些数据可以分为原始数据类型和引用数据类型：\n\n * 栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n * 堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别在于存储位置的不同：\n\n * 原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n * 引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：\n\n * 在数据结构中，栈中数据的存取方式为先进后出。\n * 堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n在操作系统中，内存被分为栈区和堆区：\n\n * 栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n * 堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。\n\n\n2. 数据类型检测的方式有哪些\n\n（1）typeof\n\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n\n（2）instanceof\n\ninstanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。\n\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true\n\n\n可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof\n运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。\n\n（3） constructor\n\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n\n\nconstructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor\n对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了：\n\nfunction Fn(){};\n \nFn.prototype = new Array();\n \nvar f = new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n\n\n（4）Object.prototype.toString.call()\n\nObject.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型：\n\nvar a = Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n\n\n同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n这是因为toString是Object的原型方法，而Array、function等类型作为Object的实例，都重写了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。\n\n\n3. 判断数组的方式有哪些\n\n * 通过Object.prototype.toString.call()做判断\n\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n\n\n * 通过原型链做判断\n\nobj.__proto__ === Array.prototype;\n\n\n * 通过ES6的Array.isArray()做判断\n\nArray.isArrray(obj);\n\n\n * 通过instanceof做判断\n\nobj instanceof Array\n\n\n * 通过Array.prototype.isPrototypeOf\n\nArray.prototype.isPrototypeOf(obj)\n\n\n\n4. NULL和UNDEFINED区别\n\n首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n\nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回\nundefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对\nundefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回\ntrue，使用三个等号时会返回 false。\n\n\n5. TYPEOF NULL 的结果是什么，为什么？\n\ntypeof null 的结果是Object。\n\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签(1-3 bits)\n以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：\n\n000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n\n\n如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\n\n有两种特殊数据类型：\n\n * undefined的值是 (-2)30(一个超出整数范围的数字)；\n * null 的值是机器码 NULL 指针(null 指针的值全是 0)\n\n那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。\n\n\n6. INTANCEOF 操作符的实现原理及实现\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\nfunction myInstanceof(left, right) {\n  // 获取对象的原型\n  let proto = Object.getPrototypeOf(left)\n  // 获取构造函数的 prototype 对象\n  let prototype = right.prototype; \n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n\n\n\n7. 为什么0.1+0.2 ! == 0.3，如何让其相等\n\n在开发过程中遇到类似这样的问题：\n\nlet n1 = 0.1, n2 = 0.2\nconsole.log(n1 + n2)  // 0.30000000000000004\n\n\n这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：\n\n(n1 + n2).toFixed(2) // 注意，toFixed为四舍五入\n\n\ntoFixed(num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？\n\n计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是0.0001100110011001100...（1100循环），0.2的二进制是：0.00110011001100...（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？\n\n一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE\n754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。\n\n根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：0.30000000000000004。\n\n下面看一下双精度数是如何保存的：\n\n * 第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位\n * 第二部分（绿色）：用来存储指数（exponent），占用11位\n * 第三部分（红色）：用来存储小数（fraction），占用52位\n\n对于0.1，它的二进制为：\n\n0.00011001100110011001100110011001100110011001100110011001 10011...\n\n\n转为科学计数法（科学计数法的结果就是浮点数）：\n\n1.1001100110011001100110011001100110011001100110011001*2^-4\n\n\n可以看出0.1的符号位为0，指数位为-4，小数位为：\n\n1001100110011001100110011001100110011001100110011001\n\n\n那么问题又来了，指数位是负数，该如何保存呢？\n\nIEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定双精度数的偏移量为1023。\n\n * 当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023=\n   -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是-1022~1013。\n * 当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。\n * 当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。\n   具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。\n\n对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：1111111011.\n\n所以，0.1表示为：\n\n0 1111111011 1001100110011001100110011001100110011001100110011001\n\n\n说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？\n\n对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了Number.EPSILON属性，而它的值就是2-52，只要判断0.1+0.2-0.3是否小于Number.EPSILON，如果小于，就可以判断为0.1+0.2\n===0.3\n\nfunction numberepsilon(arg1,arg2){                   \n  return Math.abs(arg1 - arg2) < Number.EPSILON;        \n}        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n\n\n\n8. 如何获取安全的 UNDEFINED 值？\n\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___\n没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。\n\n\n9. TYPEOF NAN 的结果是什么？\n\nNaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel\nvalue，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n\ntypeof NaN; // \"number\"\n\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。\n\n\n10. ISNAN 和 NUMBER.ISNAN 函数的区别？\n\n * 函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响\n   NaN 的判断。\n * 函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN\n   的判断更为准确。\n\n\n11. == 操作符的强制类型转换规则？\n\n对于 == 来说，如果对比双方的类型不一样，就会进行类型转换。假如对比 x 和 y 是否相同，就会进行如下判断流程：\n\n 1. 首先会判断两者类型是否**相同，**相同的话就比较两者的大小；\n 2. 类型不相同的话，就会进行类型转换；\n 3. 会先判断是否在对比 null 和 undefined，是的话就会返回 true\n 4. 判断两者类型是否为 string 和 number，是的话就会将字符串转换为 number\n\n1 == '1'\n      ↓\n1 ==  1\n\n\n 5. 判断其中一方是否为 boolean，是的话就会把 boolean 转为 number 再进行判断\n\n'1' == true\n        ↓\n'1' ==  1\n        ↓\n 1  ==  1\n\n\n 6. 判断其中一方是否为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断\n\n'1' == { name: 'js' }        ↓'1' == '[object Object]'\n\n\n其流程图如下：\n\n\n12. 其他值到字符串的转换规则？\n\n * Null 和 Undefined 类型 ，null 转换为 \"null\"，undefined 转换为 \"undefined\"，\n * Boolean 类型，true 转换为 \"true\"，false 转换为 \"false\"。\n * Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n * Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n * 对普通对象来说，除非自行定义 toString() 方法，否则会调用\n   toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如\"[object\n   Object]\"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。\n\n\n13. 其他值到数字值的转换规则？\n\n * Undefined 类型的值转换为 NaN。\n * Null 类型的值转换为 0。\n * Boolean 类型的值，true 转换为 1，false 转换为 0。\n * String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\n * Symbol 类型的值不能转换为数字，会报错。\n * 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作\nDefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString()\n的返回值（如果存在）来进行强制类型转换。\n\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n\n\n14. 其他值到布尔类型的值的转换规则？\n\n以下这些是假值： • undefined • null • false • +0、-0 和 NaN • \"\"\n\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n\n\n15. || 和 && 操作符的返回值？\n\n|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。\n\n * 对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n * && 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果\n\n\n16. OBJECT.IS() 与比较操作符 “===”、“==” 的区别？\n\n * 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n * 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n * 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。\n\n\n17. 什么是 JAVASCRIPT 中的包装类型？\n\n在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript\n会在后台隐式地将基本类型的值转换为对象，如：\n\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n\n\n在访问'abc'.length时，JavaScript 将'abc'在后台转换成String('abc')，然后再访问其length属性。\n\nJavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\n\nvar a = 'abc'\nObject(a) // String {\"abc\"}\n\n\n也可以使用valueOf方法将包装类型倒转成基本类型：\n\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n\n\n看看如下代码会打印出什么：\n\nvar a = new Boolean( false );\nif (!a) {\n    console.log( \"Oops\" ); // never runs\n}\n\n\n答案是什么都不会打印，因为虽然包裹的基本类型是false，但是false被包裹成包装类型后就成了对象，所以其非值为false，所以循环体中的内容不会运行。\n\n\n18. JAVASCRIPT 中如何进行隐式类型转换？\n\n首先要介绍ToPrimitive方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值\n（无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：\n\n/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/\nToPrimitive(obj,type)\n\n\ntype的值为number或者string。\n\n（1）当type为number时规则如下：\n\n * 调用obj的valueOf方法，如果为原始值，则返回，否则下一步；\n * 调用obj的toString方法，后续同上；\n * 抛出TypeError 异常。\n\n（2）当type为string时规则如下：\n\n * 调用obj的toString方法，如果为原始值，则返回，否则下一步；\n * 调用obj的valueOf方法，后续同上；\n * 抛出TypeError 异常。\n\n可以看出两者的主要区别在于调用toString和valueOf的先后顺序。默认情况下：\n\n * 如果对象为 Date 对象，则type默认为string；\n * 其他情况下，type默认为number。\n\n总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：\n\nvar objToNumber = value => Number(value.valueOf().toString())\nobjToNumber([]) === 0\nobjToNumber({}) === NaN\n\n\n而 JavaScript\n中的隐式类型转换主要发生在+、-、*、/以及==、>、<这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用ToPrimitive转换成基本类型，再进行操作。\n\n以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被ToPrimitive转换成基本类型，所以最终还是要应用基本类型转换规则）：\n\n 1. +操作符 +操作符的两边有至少一个string类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。\n\n1 + '23' // '123'\n 1 + false // 1 \n 1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n '1' + false // '1false'\n false + true // 1\n\n\n 2. -、*、/操作符\n\nNaN也是一个数字\n\n1 * '23' // 23\n 1 * false // 0\n 1 / 'aa' // NaN\n\n\n 3. 对于==操作符\n\n操作符两边的值都尽量转成number：\n\n3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0\n\n\n 4. 对于<和>比较符\n\n如果两边都是字符串，则比较字母表顺序：\n\n'ca' < 'bd' // false\n'a' < 'b' // true\n\n\n其他情况下，转换为数字再比较：\n\n'12' < 13 // true\nfalse > -1 // true\n\n\n以上说的是基本类型的隐式转换，而对象会被ToPrimitive转换为基本类型再进行转换：\n\nvar a = {}\na > 2 // false\n\n\n其对比过程如下：\n\na.valueOf() // {}, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"，现在是一个字符串了\nNumber(a.toString()) // NaN，根据上面 < 和 > 操作符的规则，要转换成数字\nNaN > 2 //false，得出比较结果\n\n\n又比如：\n\nvar a = {name:'Jack'}\nvar b = {age: 18}\na + b // \"[object Object][object Object]\"\n\n\n运算过程如下：\n\na.valueOf() // {}，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"\nb.valueOf() // 同理\nb.toString() // \"[object Object]\"\na + b // \"[object Object][object Object]\"\n\n\n\n19. + 操作符什么时候用于字符串的拼接？\n\n根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用\nToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。\n\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n\n\n20. 为什么会有BIGINT的提案？\n\nJavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。\n\n\n21. OBJECT.ASSIGN和扩展运算法是深拷贝还是浅拷贝，两者区别\n\n扩展运算符：\n\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = {...outObj}\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n\n\nObject.assign():\n\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = Object.assign({}, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n\n\n可以看到，两者都是浅拷贝。\n\n * Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发\n   ES6 setter。\n * 扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols\n   属性。\n\n\n二、ES6\n\n\n1. LET、CONST、VAR的区别\n\n（1）块级作用域： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：\n\n * 内层变量可能覆盖外层变量\n * 用来计数的循环变量泄露为全局变量\n\n（2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。\n\n（3）给全局添加属性：\n浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n\n（4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。\n\n（5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。\n\n（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。\n\n（7）指针指向： let和const都是ES6新增的用于创建变量的语法。\nlet创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。\n\n区别 var let const 是否有块级作用域 × ✔️ ✔️ 是否存在变量提升 ✔️ × × 是否添加全局属性 ✔️ × × 能否重复声明变量 ✔️ ×\n× 是否存在暂时性死区 × ✔️ ✔️ 是否必须设置初始值 × × ✔️ 能否改变指针指向 ✔️ ✔️ ×\n\n\n2. CONST对象的属性可以修改吗\n\nconst保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。\n\n但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。\n\n\n3. 如果NEW一个箭头函数的会怎么样\n\n箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\n\nnew操作符的实现步骤如下：\n\n 1. 创建一个对象\n 2. 将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n 3. 指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n 4. 返回新的对象\n\n所以，上面的第二、三步，箭头函数都是没有办法执行的。\n\n\n4. 箭头函数与普通函数的区别\n\n（1）箭头函数比普通函数更加简洁\n\n * 如果没有参数，就直接写一个空括号即可\n * 如果只有一个参数，可以省去参数的括号\n * 如果有多个参数，用逗号分割\n * 如果函数体的返回值只有一句，可以省略大括号\n * 如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：\n\nlet fn = () => void doesNotReturn();\n\n\n（2）箭头函数没有自己的this\n\n箭头函数不会创建自己的this，\n所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。\n\n（3）箭头函数继承来的this指向永远不会改变\n\nvar id = 'GLOBAL';\nvar obj = {\n  id: 'OBJ',\n  a: function(){\n    console.log(this.id);\n  },\n  b: () => {\n    console.log(this.id);\n  }\n};\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n\n\n对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号{}是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。\n\n（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向\n\nvar id = 'Global';\nlet fun1 = () => {\n    console.log(this.id)\n};\nfun1();                     // 'Global'\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n\n\n（5）箭头函数不能作为构造函数使用\n\n构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。\n但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。\n\n（6）箭头函数没有自己的arguments\n\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。\n\n（7）箭头函数没有prototype\n\n（8）箭头函数不能用作Generator函数，不能使用yeild关键字\n\n\n5. 箭头函数的THIS指向哪⾥？\n\n箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this\n值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n\n可以⽤Babel理解⼀下箭头函数:\n\n// ES6 \nconst obj = { \n  getArrow() { \n    return () => { \n      console.log(this === obj); \n    }; \n  } \n}\n\n\n转化后：\n\n// ES5，由 Babel 转译\nvar obj = { \n   getArrow: function getArrow() { \n     var _this = this; \n     return function () { \n        console.log(_this === obj); \n     }; \n   } \n};\n\n\n\n6. 扩展运算符的作用及使用场景\n\n（1）对象扩展运算符\n\n对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。\n\nlet bar = { a: 1, b: 2 };\nlet baz = { ...bar }; // { a: 1, b: 2 }\n\n\n上述方法实际上等价于:\n\nlet bar = { a: 1, b: 2 };\nlet baz = Object.assign({}, bar); // { a: 1, b: 2 }\n\n\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。\n\n同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\n\nlet bar = {a: 1, b: 2};\nlet baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}\n\n\n利用上述特性就可以很方便的修改对象的部分属性。在redux中的reducer函数规定必须是一个纯函数，reducer中的state对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。\n\n需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。\n\n（2）数组扩展运算符\n\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\n\nconsole.log(...[1, 2, 3])\n// 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n// 1 [2, 3, 4] 5\n\n\n下面是数组的扩展运算符的应用：\n\n * 将数组转换为参数序列\n\nfunction add(x, y) {\n  return x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n\n\n * 复制数组\n\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n\n\n要记住：扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。\n\n * 合并数组\n\n如果想在数组内合并数组，可以这样：\n\nconst arr1 = ['two', 'three'];const arr2 = ['one', ...arr1, 'four', 'five'];// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n\n\n * 扩展运算符与解构赋值结合起来，用于生成数组\n\nconst [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest  // [2, 3, 4, 5]\n\n\n需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n\n\n * 将字符串转为真正的数组\n\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n\n * 任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组\n\n比较常见的应用是可以将某些数据结构转为数组：\n\n// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n\n\n用于替换es5中的Array.prototype.slice.call(arguments)写法。\n\n * 使用Math函数获取数组中特定的值\n\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n\n\n\n7. PROXY 可以实现什么功能？\n\n在 Vue3.0 中通过 Proxy 来替换原本的 Object.defineProperty 来实现数据响应式。\n\nProxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。\n\nlet p = new Proxy(target, handler)\n\n\ntarget 代表需要添加代理的对象，handler 用来自定义对象中的操作，比如可以用来自定义 set 或者 get 函数。\n\n下面来通过 Proxy 来实现一个数据响应式：\n\nlet onWatch = (obj, setBind, getLogger) => {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver)\n    },\n    set(target, property, value, receiver) {\n      setBind(value, property)\n      return Reflect.set(target, property, value)\n    }\n  }\n  return new Proxy(obj, handler)\n}\nlet obj = { a: 1 }\nlet p = onWatch(\n  obj,\n  (v, property) => {\n    console.log(`监听到属性${property}改变为${v}`)\n  },\n  (target, property) => {\n    console.log(`'${property}' = ${target[property]}`)\n  }\n)\np.a = 2 // 监听到属性a改变\np.a // 'a' = 2\n\n\n在上述代码中，通过自定义 set 和 get 函数的方式，在原本的逻辑中插入了我们的函数逻辑，实现了在对对象任何属性进行读写时发出通知。\n\n当然这是简单版的响应式实现，如果需要实现一个 Vue 中的响应式，需要在 get 中收集依赖，在 set 派发更新，之所以 Vue3.0 要使用 Proxy\n替换原本的 API 原因在于 Proxy 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是\nProxy 可以完美监听到任何方式的数据改变，唯一缺陷就是浏览器的兼容性不好。\n\n\n8. 对对象与数组的解构的理解\n\n解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 1）数组的解构\n在解构数组时，以元素的位置为匹配条件来提取想要的数据的：\n\nconst [a, b, c] = [1, 2, 3]\n\n\n最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：\n数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：\n\nconst [a,,c] = [1,2,3]\n\n\n通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量：\n\n2）对象的解构 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：\n\nconst stu = {\n  name: 'Bob',\n  age: 24\n}\n\n\n假如想要解构它的两个自有属性，可以这样：\n\nconst { name, age } = stu\n\n\n这样就得到了 name 和 age 两个和 stu 平级的变量：\n\n注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：\n\nconst { age, name } = stu\n\n\n\n9. 如何提取高度嵌套的对象里的指定属性？\n\n有时会遇到一些嵌套程度非常深的对象：\n\nconst school = {\n   classes: {\n      stu: {\n         name: 'Bob',\n         age: 24,\n      }\n   }\n}\n\n\n像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：\n\nconst { name } = school\n\n\n显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name\n提取出来，一种比较笨的方法是逐层解构：\n\nconst { classes } = school\nconst { stu } = classes\nconst { name } = stu\nname // 'Bob'\n\n\n但是还有一种更标准的做法，可以用一行代码来解决这个问题：\n\nconst { classes: { stu: { name } }} = school\n       \nconsole.log(name)  // 'Bob'\n\n\n可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。\n\n\n10. 对 REST 参数的理解\n\n扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：\n\nfunction mutiple(...args) {\n  let result = 1;\n  for (var val of args) {\n    result *= val;\n  }\n  return result;\n}\nmutiple(1, 2, 3, 4) // 24\n\n\n这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：\n\nfunction mutiple(...args) {\n  console.log(args)\n}\nmutiple(1, 2, 3, 4) // [1, 2, 3, 4]\n\n\n这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。\n\n\n11. ES6中模板语法与字符串处理\n\nES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：\n\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = 'my name is ' + name + ', I work as a ' + career + ', I love ' + hobby[0] + ' and ' + hobby[1]\n\n\n仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：\n\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = `my name is ${name}, I work as a ${career} I love ${hobby[0]} and ${hobby[1]}`\n\n\n字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：\n\n * 在模板字符串中，空格、缩进、换行都会被保留\n * 模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算\n\n基于第一点，可以在模板字符串里无障碍地直接写 html 代码：\n\nlet list = `\n    <ul>\n        <li>列表项1</li>\n        <li>列表项2</li>\n    </ul>\n`;\nconsole.log(message); // 正确输出，不存在报错\n\n\n基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：\n\nfunction add(a, b) {\n  const finalString = `${a} + ${b} = ${a+b}`\n  console.log(finalString)\n}\nadd(1, 2) // 输出 '1 + 2 = 3'\n\n\n除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：\n\n（1）存在性判定：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf > -1 来做。现在 ES6\n提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。\n\n * includes：判断字符串与子串的包含关系：\n\nconst son = 'haha' \nconst father = 'xixi haha hehe'\nfather.includes(son) // true\n\n\n * startsWith：判断字符串是否以某个/某串字符开头：\n\nconst father = 'xixi haha hehe'\nfather.startsWith('haha') // false\nfather.startsWith('xixi') // true\n\n\n * endsWith：判断字符串是否以某个/某串字符结尾：\n\nconst father = 'xixi haha hehe'\n  father.endsWith('hehe') // true\n\n\n（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：\n\nconst sourceCode = 'repeat for 3 times;'\nconst repeated = sourceCode.repeat(3) \nconsole.log(repeated) // repeat for 3 times;repeat for 3 times;repeat for 3 times;\n\n\n\n三、JAVASCRIPT基础\n\n\n1. NEW操作符的实现原理\n\nnew操作符的执行过程：\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n具体实现：\n\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n\n\n\n2. MAP和OBJECT的区别\n\nMap Object 意外的键 Map默认情况不包含任何键，只包含显式插入的键。 Object 有一个原型,\n原型链上的键名有可能和自己在对象上的设置的键名产生冲突。 键的类型 Map的键可以是任意值，包括函数、对象或任意基本类型。 Object 的键必须是\nString 或是Symbol。 键的顺序 Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。 Object 的键是无序的\nSize Map 的键值对个数可以轻易地通过size 属性获取 Object 的键值对个数只能手动计算 迭代 Map 是 iterable\n的，所以可以直接被迭代。 迭代Object需要以某种方式获取它的键然后才能迭代。 性能 在频繁增删键值对的场景下表现更好。\n在频繁添加和删除键值对的场景下未作出优化。\n\n\n3. MAP和WEAKMAP的区别\n\n（1）Map\nmap本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。\n\n实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\n\nconst map = [\n     [\"name\",\"张三\"],\n     [\"age\",18],\n]\n\n\nMap数据结构有以下操作方法：\n\n * size： map.size 返回Map结构的成员总数。\n * set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n * get(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\n * has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n * delete(key)：该方法删除某个键，返回true，如果删除失败，返回false。\n * clear()：map.clear()清除所有成员，没有返回值。\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\n * keys()：返回键名的遍历器。\n * values()：返回键值的遍历器。\n * entries()：返回所有成员的遍历器。\n * forEach()：遍历Map的所有成员。\n\nconst map = new Map([\n     [\"foo\",1],\n     [\"bar\",2],\n])\nfor(let key of map.keys()){\n    console.log(key);  // foo bar\n}\nfor(let value of map.values()){\n     console.log(value); // 1 2\n}\nfor(let items of map.entries()){\n    console.log(items);  // [\"foo\",1]  [\"bar\",2]\n}\nmap.forEach( (value,key,map) => {\n     console.log(key,value); // foo 1    bar 2\n})\n\n\n（2）WeakMap WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为key值，而值可以是任意的。\n\n该对象也有以下几种方法：\n\n * set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n * get(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\n * has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n * delete(key)：该方法删除某个键，返回true，如果删除失败，返回false。\n\n其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。\n\nWeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n\n而WeakMap的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap\n里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。\n\n总结：\n\n * Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n * WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null\n   除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\n\n\n4. JAVASCRIPT有哪些内置对象\n\n全局的对象（ global objects ）或称标准内置对象，不要和 \"全局对象（global object）\" 混淆。这里说的全局的对象是说在\n全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n\n标准内置对象的分类：\n\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量\n\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如\neval()、parseFloat()、parseInt() 等\n\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如\nObject、Function、Boolean、Symbol、Error 等\n\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date\n\n（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp\n\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet\n\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等\n\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等\n\n（10）控制抽象对象 例如 Promise、Generator 等\n\n（11）反射。例如 Reflect、Proxy\n\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等\n\n（13）WebAssembly\n\n（14）其他。例如 arguments\n\n总结： js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js\n定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如\nparseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n\n\n5. 常用的正则表达式有哪些？\n\n// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\n\n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n\n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;\n\n// （4）手机号码正则\nvar regex = /^1[34578]/d{9}$/g;\n\n// （5）用户名正则\nvar regex = /^[a-zA-Z/$][a-zA-Z0-9_/$]{4,16}$/;\n\n\n\n6. 对JSON的理解\n\nJSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n\n在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过\nJSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON\n中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，\n\n * JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON\n   格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。\n * JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON\n   格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n\n\n7. JAVASCRIPT脚本延迟加载的方式有哪些？\n\n延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n\n一般有以下几种方式：\n\n * defer 属性： 给 js 脚本添加 defer\n   属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer\n   属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n * async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js\n   脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n * 动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n * 使用 setTimeout 延迟方法： 设置一个定时器来延迟加载js脚本文件\n * 让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n\n\n8. JAVASCRIPT 类数组对象的定义？\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和\nDOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n（1）通过 call 调用数组的 slice 方法来实现转换\n\nArray.prototype.slice.call(arrayLike);\n\n\n（2）通过 call 调用数组的 splice 方法来实现转换\n\nArray.prototype.splice.call(arrayLike, 0);\n\n\n（3）通过 apply 调用数组的 concat 方法来实现转换\n\nArray.prototype.concat.apply([], arrayLike);\n\n\n（4）通过 Array.from 方法来实现转换\n\nArray.from(arrayLike);\n\n\n\n9. 数组有哪些原生方法？\n\n * 数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n * 数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n * 数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort()\n   方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n * 数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n * 数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n * 数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法\n   every()、some()、filter()、map() 和 forEach() 方法\n * 数组归并方法 reduce() 和 reduceRight() 方法\n\n\n10. UNICODE、UTF-8、UTF-16、UTF-32的区别？\n\n（1）UNICODE\n\n在说Unicode之前需要先了解一下ASCII码：ASCII 码（American Standard Code for Information\nInterchange）称为美国标准信息交换码。\n\n * 它是基于拉丁字母的一套电脑编码系统。\n * 它定义了一个用于代表常见字符的字典。\n * 它包含了\"A-Z\"(包含大小写)，数据\"0-9\" 以及一些常见的符号。\n * 它是专门为英语而设计的，有128个编码，对其他语言无能为力\n\nASCII码可以表示的编码有限，要想表示其他语言的编码，还是要使用Unicode来表示，可以说Unicode是ASCII 的超集。\n\nUnicode全称 Unicode Translation Format，又叫做统一码、万国码、单一码。Unicode\n是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\n\nUnicode的实现方式（也就是编码方式）有很多种，常见的是UTF-8、UTF-16、UTF-32和USC-2。\n\n（2）UTF-8\n\nUTF-8是使用最广泛的Unicode编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容ASCII码的128个字符。\n\n注意： UTF-8 是一种编码方式，Unicode是一个字符集合。\n\nUTF-8的编码规则：\n\n * 对于单字节的符号，字节的第一位为0，后面的7位为这个字符的Unicode编码，因此对于英文字母，它的Unicode编码和ACSII编码一样。\n * 对于n字节的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的Unicode码 。\n\n来看一下具体的Unicode编号范围与对应的UTF-8二进制格式 ：\n\n编码范围（编号对应的十进制数） 二进制格式 0x00—0x7F （0-127） 0xxxxxxx 0x80—0x7FF （128-2047） 110xxxxx\n10xxxxxx 0x800—0xFFFF  （2048-65535） 1110xxxx 10xxxxxx 10xxxxxx 0x10000—0x10FFFF\n （65536以上） 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n那该如何通过具体的Unicode编码，进行具体的UTF-8编码呢？步骤如下：\n\n * 找到该Unicode编码的所在的编号范围，进而找到与之对应的二进制格式\n * 将Unicode编码转换为二进制数（去掉最高位的0）\n * 将二进制数从右往左一次填入二进制格式的X中，如果有X未填，就设为0\n\n来看一个实际的例子： “马” 字的Unicode编码是：0x9A6C，整数编号是39532 （1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx\n10xxxxxx 10xxxxxx （2）39532对应的二进制数为1001 1010 0110 1100 （3）将二进制数填入X中，结果是：11101001\n10101001 10101100\n\n（3）UTF-16\n\n1. 平面的概念\n\n在了解UTF-16之前，先看一下平面的概念：\nUnicode编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放65536（216）个字符，这称为一个平面，目前总共有17 个平面。\n\n最前面的一个平面称为基本平面，它的码点从0 — 216-1，写成16进制就是U+0000 — U+FFFF，那剩下的16个平面就是辅助平面，码点范围是\nU+10000—U+10FFFF。\n\n2. UTF-16 概念：\n\nUTF-16也是Unicode编码集的一种编码形式，把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位需要1个或者2个16位长的码元来表示，因此UTF-16也是用变长字节表示的。\n\n3. UTF-16 编码规则：\n\n * 编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。\n * 编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。\n\n4. 编码识别\n\n那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？\n\nUTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF\n是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。\n\n辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 —\nU+DBFF，称为高位（H），后 10 位映射在 U+DC00 —\nU+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。\n\n因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF\n之间，这四个字节必须放在一起进行解读。\n\n5. 举例说明\n\n以 \"*\udc00\" 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：\n\n * 首先计算超出部分的结果：0x21800 - 0x10000\n * 将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：0001000110 0000000000\n * 将得到的两个10位二进制数分别对应到两个区间中\n * U+D800 对应的二进制数为 1101100000000000， 将0001000110填充在它的后10 个二进制位，得到\n   1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的UTF-16 编码为 0xD846\n   0xDC00\n\n（4） UTF-32\n\nUTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。\n\n比如“马” 字的Unicode编号是：U+9A6C，整数编号是39532，直接转化为二进制：1001 1010 0110 1100，这就是它的UTF-32编码。\n\n（5）总结\n\nUnicode、UTF-8、UTF-16、UTF-32有什么区别？\n\n * Unicode 是编码字符集（字符集），而UTF-8、UTF-16、UTF-32是字符集编码（编码规则）；\n * UTF-16\n   使用变长码元序列的编码方式，相较于定长码元序列的UTF-32算法更复杂，甚至比同样是变长码元序列的UTF-8也更为复杂，因为其引入了独特的代理对这样的代理机制；\n * UTF-8需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而UTF-16不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；\n * 如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用UTF-8就比UTF-16节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么UTF-16就占优势了，可以节省很多空间；\n\n\n11. 常见的位运算符有哪些？其计算规则是什么？\n\n现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n\n常见的位运算有以下几种：\n\n运算符 描述 运算规则 & 与 两个位都为1时，结果才为1 ` ` 或 ^ 异或 两个位相同为0，相异为1 ~ 取反 0变1，1变0 << 左移\n各二进制位全部左移若干位，高位丢弃，低位补0 >> 右移 各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃\n\n1. 按位与运算符（&）\n\n定义： 参加运算的两个数据按二进制位进行“与”运算。 运算规则：\n\n0 & 0 = 0  \n0 & 1 = 0  \n1 & 0 = 0  \n1 & 1 = 1\n\n\n总结：两位同时为1，结果才为1，否则结果为0。 例如：3&5 即：\n\n0000 0011 \n   0000 0101 \n = 0000 0001\n\n\n因此 3&5 的值为1。 注意：负数按补码形式参加按位与运算。\n\n用途：\n\n（1）判断奇偶\n\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((i & 1) == 0)代替if (i % 2 == 0)来判断a是不是偶数。\n\n（2）清零\n\n如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。\n\n2. 按位或运算符（|）\n\n定义： 参加运算的两个对象按二进制位进行“或”运算。\n\n运算规则：\n\n0 | 0 = 0\n0 | 1 = 1  \n1 | 0 = 1  \n1 | 1 = 1\n\n\n总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即：\n\n0000 0011\n  0000 0101 \n= 0000 0111\n\n\n因此，3|5的值为7。 注意：负数按补码形式参加按位或运算。\n\n3. 异或运算符（^）\n\n定义： 参加运算的两个数据按二进制位进行“异或”运算。\n\n运算规则：\n\n0 ^ 0 = 0  \n0 ^ 1 = 1  \n1 ^ 0 = 1  \n1 ^ 1 = 0\n\n\n总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。 例如：3|5即：\n\n0000 0011\n  0000 0101 \n= 0000 0110\n\n\n因此，3^5的值为6。 异或运算的性质:\n\n * 交换律：(a^b)^c == a^(b^c)\n * 结合律：(a + b)^c == a^b + b^c\n * 对于任何数x，都有 x^x=0，x^0=x\n * 自反性: a^b^b=a^0=a;\n\n4. 取反运算符 (~)\n\n定义： 参加运算的一个数据按二进制进行“取反”运算。\n\n运算规则：\n\n~ 1 = 0~ 0 = 1\n\n\n总结：对一个二进制数按位取反，即将0变1，1变0。 例如：~6 即：\n\n0000 0110= 1111 1001\n\n\n在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。\n当发现按位取反为负数时，就直接取其补码，变为十进制：\n\n0000 0110   = 1111 1001反码：1000 0110补码：1000 0111\n\n\n因此，~6的值为-7。\n\n5. 左移运算符（<<）\n\n定义： 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。 设 a=1010 1110，a = a<< 2\n将a的二进制位左移2位、右补0，即得a=1011 1000。 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。\n\n6. 右移运算符（>>）\n\n定义： 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 例如：a=a>>2 将a的二进制位右移2位，左补0 或者\n左补1得看被移数是正还是负。 操作数每右移一位，相当于该数除以2。\n\n7. 原码、补码、反码\n\n上面提到了补码、反码等知识，这里就补充一下。\n计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。\n\n（1）原码\n\n原码就是一个数的二进制数。例如：10的原码为0000 1010\n\n（2）反码\n\n * 正数的反码与原码相同，如：10 反码为 0000 1010\n * 负数的反码为除符号位，按位取反，即0变1，1变0。\n\n例如：-10\n\n原码：1000 1010\n反码：1111 0101\n\n\n（3）补码\n\n * 正数的补码与原码相同，如：10 补码为 0000 1010\n * 负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n例如：-10\n\n原码：1000 1010\n反码：1111 0101\n补码：1111 0110\n\n\n\n12. 为什么函数的 ARGUMENTS 参数是类数组而不是数组？如何遍历类数组?\n\narguments是一个对象，它的属性是从 0\n开始依次递增的数字，还有callee和length等属性，与数组相似；但是它却没有数组常见的方法属性，如forEach, reduce等，所以叫它们类数组。\n\n要遍历类数组，有三个方法：\n\n（1）将数组的方法应用到类数组上，这时候就可以使用call和apply方法，如：\n\nfunction foo(){ \n  Array.prototype.forEach.call(arguments, a => console.log(a))\n}\n\n\n（2）使用Array.from方法将类数组转化成数组：‌\n\nfunction foo(){ \n  const arrArgs = Array.from(arguments) \n  arrArgs.forEach(a => console.log(a))\n}\n\n\n（3）使用展开运算符将类数组转化成数组\n\nfunction foo(){ \n    const arrArgs = [...arguments] \n    arrArgs.forEach(a => console.log(a)) \n}\n\n\n\n13. 什么是 DOM 和 BOM？\n\n * DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\n * BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而\n   window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个\n   Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location\n   对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window\n   对象的子对象。\n\n\n14. 对类数组对象的理解，如何转化为数组\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和\nDOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n * 通过 call 调用数组的 slice 方法来实现转换\n\nArray.prototype.slice.call(arrayLike);\n\n\n * 通过 call 调用数组的 splice 方法来实现转换\n\nArray.prototype.splice.call(arrayLike, 0);\n\n\n * 通过 apply 调用数组的 concat 方法来实现转换\n\nArray.prototype.concat.apply([], arrayLike);\n\n\n * 通过 Array.from 方法来实现转换\n\nArray.from(arrayLike);\n\n\n\n15. ESCAPE、ENCODEURI、ENCODEURICOMPONENT 的区别\n\n * encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\n * encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\n * escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的\n   unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n\n\n16. 对AJAX的理解，实现一个AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML\n文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n * 创建一个 XMLHttpRequest 对象。\n * 在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n * 在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader\n   方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5\n   个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState\n   变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过\n   response 中的数据来对页面进行更新了。\n * 当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", url, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n\n\n使用Promise封装AJAX：\n\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n\n\n\n17. JAVASCRIPT为什么要进行变量提升，它导致了什么问题？\n\n变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。\n\n造成变量声明提升的本质原因是 js\n引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。\n\n首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。\n\n * 在解析阶段，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n   * 全局上下文：变量定义，函数声明\n   * 函数上下文：变量定义，函数声明，this，arguments\n * 在执行阶段，就是按照代码的顺序依次执行。\n\n那为什么会进行变量提升呢？主要有以下两个原因：\n\n * 提高性能\n * 容错性更好\n\n（1）提高性能\n在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n\n（2）容错性更好\n\n变量提升可以在一定程度上提高JS的容错性，看下面的代码：\n\na = 1;var a;console.log(a);\n\n\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。\n\n虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n\n总结：\n\n * 解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间\n * 声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行\n\n变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：\n\nvar tmp = new Date();\n\nfunction fn(){\n    console.log(tmp);\n    if(false){\n        var tmp = 'hello world';\n    }\n}\n\nfn();  // undefined\n\n\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。\n\nvar tmp = 'hello world';\n\nfor (var i = 0; i < tmp.length; i++) {\n    console.log(tmp[i]);\n}\n\nconsole.log(i); // 11\n\n\n由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。\n\n\n18. 什么是尾调用，使用尾调用有什么好处？\n\n尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是\nES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n\n19. ES6模块与COMMONJS模块有什么异同？\n\nES6 Module和CommonJS模块的区别：\n\n * CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；\n * import的接⼝是read-only（只读状态），不能修改其变量值。\n   即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。\n\nES6 Module和CommonJS模块的共同点：\n\n * CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。\n\n\n20. 常见的DOM操作有哪些\n\n1）DOM 节点的获取\n\nDOM 节点的获取的API及使用：\n\ngetElementById // 按照 id 查询\ngetElementsByTagName // 按照标签名查询\ngetElementsByClassName // 按照类名查询\nquerySelectorAll // 按照 css 选择器查询\n\n// 按照 id 查询\nvar imooc = document.getElementById('imooc') // 查询到 id 为 imooc 的元素\n// 按照标签名查询\nvar pList = document.getElementsByTagName('p')  // 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n// 按照类名查询\nvar moocList = document.getElementsByClassName('mooc') // 查询到类名为 mooc 的集合\n// 按照 css 选择器查询\nvar pList = document.querySelectorAll('.mooc') // 查询到类名为 mooc 的集合\n\n\n2）DOM 节点的创建\n\n创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：\n\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n\n\n要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：\n\n// 首先获取父节点\nvar container = document.getElementById('container')\n// 创建新节点\nvar targetSpan = document.createElement('span')\n// 设置 span 节点的内容\ntargetSpan.innerHTML = 'hello world'\n// 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n\n\n3）DOM 节点的删除\n\n删除指定的 DOM 节点， 已知的 HTML 结构如下：\n\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n\n\n需要删除 id 为 title 的元素，做法是：\n\n// 获取目标元素的父元素\nvar container = document.getElementById('container')\n// 获取目标元素\nvar targetNode = document.getElementById('title')\n// 删除目标元素\ncontainer.removeChild(targetNode)\n\n\n或者通过子节点数组来完成删除：\n\n// 获取目标元素的父元素var container = document.getElementById('container')// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)\n\n\n4）修改 DOM 元素\n\n修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。\n\n将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：\n\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n      <p id=\"content\">我是内容</p>\n    </div>   \n  </body>\n</html>\n\n\n现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：\n\n// 获取父元素\nvar container = document.getElementById('container')   \n \n// 获取两个需要被交换的元素\nvar title = document.getElementById('title')\nvar content = document.getElementById('content')\n// 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n\n\n\n21. USE STRICT是什么意思 ? 使用它区别是什么？\n\nuse strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript\n在更严格的条件下运行。设立严格模式的目的如下：\n\n * 消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;\n * 消除代码运行的不安全之处，保证代码运行的安全；\n * 提高编译器效率，增加运行速度；\n * 为未来新版本的 Javascript 做好铺垫。\n\n区别：\n\n * 禁止使用 with 语句。\n * 禁止 this 关键字指向全局对象。\n * 对象不能有重名的属性。\n\n\n22. 如何判断一个对象是否属于某个类？\n\n * 第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n * 第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为\n   constructor 属性可以被改写。\n * 第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]]\n   属性来进行判断。\n\n\n23. 强类型语言和弱类型语言的区别\n\n * 强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。\n * 弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串'12'和整数3进行连接得到字符串'123'，在相加的时候会进行强制类型转换。\n\n两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。\n\n\n24. 解释性语言和编译型语言的区别\n\n（1）解释型语言\n使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下\n\n * 解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；\n * 只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；\n * JavaScript、Python等属于解释型语言。\n\n（2）编译型语言\n使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：\n\n * 一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；\n * 与特定平台相关，一般无法移植到其他平台；\n * C、C++等属于编译型语言。\n\n两者主要区别在于： 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。\n\n\n25. FOR...IN和FOR...OF的区别\n\nfor…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下\n\n * for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\n * for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n * 对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；\n\n总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及\nGenerator 对象。\n\n\n26. 如何使用FOR...OF遍历对象\n\nfor…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。\n\n如果需要遍历的对象是类数组对象，用Array.from转成数组即可。\n\nvar obj = {\n    0:'one',\n    1:'two',\n    length: 2\n};\nobj = Array.from(obj);\nfor(var k of obj){\n    console.log(k)\n}\n\n\n如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。\n\n//方法一：\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\n\nobj[Symbol.iterator] = function(){\n    var keys = Object.keys(this);\n    var count = 0;\n    return {\n        next(){\n            if(count<keys.length){\n                return {value: obj[keys[count++]],done:false};\n            }else{\n                return {value:undefined,done:true};\n            }\n        }\n    }\n};\n\nfor(var k of obj){\n    console.log(k);\n}\n\n\n// 方法二\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\nobj[Symbol.iterator] = function*(){\n    var keys = Object.keys(obj);\n    for(var k of keys){\n        yield [k,obj[k]]\n    }\n};\n\nfor(var [k,v] of obj){\n    console.log(k,v);\n}\n\n\n\n27. AJAX、AXIOS、FETCH的区别\n\n（1）AJAX Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和\nXML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax\n可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用\nAjax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n * 本身是针对MVC编程，不符合前端MVVM的浪潮\n * 基于原生XHR开发，XHR本身的架构不清晰\n * 不符合关注分离（Separation of Concerns）的原则\n * 配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n（2）Fetch\nfetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\n\nfetch的优点：\n\n * 语法简洁，更加语义化\n * 基于标准 Promise 实现，支持 async/await\n * 更加底层，提供的API丰富（request, response）\n * 脱离了XHR，是ES规范里新的实现方式\n\nfetch的缺点：\n\n * fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会\n   reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n * fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n * fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n * fetch没有办法原生监测请求的进度，而XHR可以\n\n（3）Axios Axios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n * 浏览器端发起XMLHttpRequests请求\n * node端发起http请求\n * 支持Promise API\n * 监听请求和返回\n * 对请求和返回进行转化\n * 取消请求\n * 自动转换json数据\n * 客户端支持抵御XSRF攻击\n\n\n28. 数组的遍历方法有哪些\n\n方法 是否改变原数组 特点 forEach() 否 数组方法，不改变原数组，没有返回值 map() 否 数组方法，不改变原数组，有返回值，可链式调用\nfilter() 否 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 for...of 否\nfor...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环 every()\n和 some() 否 数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false. find() 和\nfindIndex() 否 数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值 reduce() 和\nreduceRight() 否 数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作\n\n遍历方法的详细解释：《细数JavaScript中那些遍历和循环》\n\n\n29. FOREACH和MAP方法有什么区别\n\n这方法都是用来遍历数组的，两者区别如下：\n\n * forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；\n * map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；\n\n\n四、原型与原型链\n\n\n1. 对原型、原型链的理解\n\n在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype\n属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的\nprototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto\n属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf()\n方法，可以通过这个方法来获取对象的原型。\n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是\nObject.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。\n\n特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n\n\n2. 原型修改、重写\n\nfunction Person(name) {\n    this.name = name\n}\n// 修改原型\nPerson.prototype.getName = function() {}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype) // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n// 重写原型\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // false\n\n\n可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候p.constructor\n=== Object ，而不是p.constructor === Person。要想成立，就要用constructor指回来：\n\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\np.constructor = Person\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n\n\n\n3. 原型链指向\n\np.__proto__  // Person.prototype\nPerson.prototype.__proto__  // Object.prototype\np.__proto__.__proto__ //Object.prototype\np.__proto__.constructor.prototype.__proto__ // Object.prototype\nPerson.prototype.constructor.prototype.__proto__ // Object.prototype\np1.__proto__.constructor // Person\nPerson.prototype.constructor  // Person\n\n\n\n4. 原型链的终点是什么？如何打印出原型链的终点？\n\n由于Object是构造函数，原型链终点是Object.prototype.__proto__，而Object.prototype.__proto__===\nnull //\ntrue，所以，原型链的终点是null。原型链上的所有原型都是对象，所有的对象最终都是由Object构造的，而Object.prototype的下一级是Object.prototype.__proto__。\n\n\n5. 如何获得对象非原型链上的属性？\n\n使用后hasOwnProperty()方法来判断属性是否属于原型链的属性：\n\nfunction iterate(obj){\n   var res=[];\n   for(var key in obj){\n        if(obj.hasOwnProperty(key))\n           res.push(key+': '+obj[key]);\n   }\n   return res;\n} \n\n\n\n五、执行上下文/作用域链/闭包\n\n\n1. 对闭包的理解\n\n闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。\n\n闭包有两个常用的用途；\n\n * 闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n * 闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。\n\n比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\n\nfunction A() {\n  let a = 1\n  window.B = function () {\n      console.log(a)\n  }\n}\nA()\nB() // 1\n\n\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题\n\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n\n\n首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：\n\n * 第一种是使用闭包的方式\n\nfor (var i = 1; i <= 5; i++) {  ;(function(j) {    setTimeout(function timer() {      console.log(j)    }, j * 1000)  })(i)}\n\n\n在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer\n这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。\n\n * 第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。\n\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(\n    function timer(j) {\n      console.log(j)\n    },\n    i * 1000,\n    i\n  )\n}\n\n\n * 第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式\n\nfor (let i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n\n\n\n2. 对作用域、作用域链的理解\n\n1）全局作用域和函数作用域\n\n（1）全局作用域\n\n * 最外层函数和最外层函数外面定义的变量拥有全局作用域\n * 所有未定义直接赋值的变量自动声明为全局作用域\n * 所有window对象的属性拥有全局作用域\n * 全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。\n\n（2）函数作用域\n\n * 函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到\n * 作用域是分层的，内层作用域可以访问外层作用域，反之不行\n\n2）块级作用域\n\n * 使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由{ }包裹的代码片段）\n * let和const声明的变量不会有变量提升，也不可以重复声明\n * 在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。\n\n作用域链：\n在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。\n\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。\n\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n\n当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。\n\n\n3. 对执行上下文的理解\n\n1. 执行上下文类型\n\n（1）全局执行上下文\n\n任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。\n\n（2）函数执行上下文\n\n当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。\n\n（3）eval函数执行上下文\n\n执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。\n\n2. 执行上下文栈\n\n * JavaScript引擎使用执行上下文栈来管理执行上下文\n * 当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。\n\nlet a = 'Hello World!';\nfunction first() {\n  console.log('Inside first function');\n  second();\n  console.log('Again inside first function');\n}\nfunction second() {\n  console.log('Inside second function');\n}\nfirst();\n//执行顺序\n//先执行second(),在执行first()\n\n\n3. 创建执行上下文\n\n创建执行上下文有两个阶段：创建阶段和执行阶段\n\n1）创建阶段\n\n（1）this绑定\n\n * 在全局执行上下文中，this指向全局对象（window对象）\n * 在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者\n   undefined\n\n（2）创建词法环境组件\n\n * 词法环境是一种有标识符——变量映射的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。\n * 词法环境的内部有两个组件：加粗样式：环境记录器:用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域\n\n（3）创建变量环境组件\n\n * 变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。\n\n2）执行阶段 此阶段会完成对变量的分配，最后执行完代码。\n\n简单来说执行上下文就是指：\n\n在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为u\nndefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。\n\n在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n * 全局上下文：变量定义，函数声明\n * 函数上下文：变量定义，函数声明，this，arguments\n\n注： 由于字数限制，剩余内容在下篇进行总结哦。","frontMatter":{"title":"JS上"}},{"name":"JS下","path":"参考八股文/JS下.html","texts":"六、THIS/CALL/APPLY/BIND\n\n\n1. 对THIS对象的理解\n\nthis 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。\n\n * 第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\n * 第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\n * 第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\n * 第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply\n   方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this\n   绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind\n   方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。\n\n这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。\n\n\n2. CALL() 和 APPLY() 的区别？\n\n它们的作用一模一样，区别仅在于传入参数的形式的不同。\n\n * apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply\n   方法把这个集合中的元素作为参数传递给被调用的函数。\n * call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n\n\n3. 实现CALL、APPLY 及 BIND 函数\n\n（1）call 函数的实现步骤：\n\n * 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n * 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n * 处理传入的参数，截取第一个参数后的所有参数。\n * 将函数作为上下文对象的一个属性。\n * 使用上下文对象来调用这个方法，并保存返回结果。\n * 删除刚才新增的属性。\n * 返回结果。\n\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== \"function\") {\n    console.error(\"type error\");\n  }\n  // 获取参数\n  let args = [...arguments].slice(1),\n    result = null;\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n  // 将调用函数设为对象的方法\n  context.fn = this;\n  // 调用函数\n  result = context.fn(...args);\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n\n\n（2）apply 函数的实现步骤：\n\n * 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n * 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n * 将函数作为上下文对象的一个属性。\n * 判断参数值是否传入\n * 使用上下文对象来调用这个方法，并保存返回结果。\n * 删除刚才新增的属性\n * 返回结果\n\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n\n\n（3）bind 函数的实现步骤：\n\n * 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n * 保存当前函数的引用，获取其余传入参数值。\n * 创建一个函数返回\n * 函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply\n   调用，其余情况都传入指定的上下文对象。\n\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  // 获取参数\n  var args = [...arguments].slice(1),\n    fn = this;\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n\n\n\n七、异步编程\n\n\n1. 异步编程的实现方式？\n\nJavaScript中的异步机制可以分为以下几种：\n\n * 回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n * Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then\n   的链式调用，可能会造成代码的语义不够明确。\n * generator\n   的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在\n   generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行\n   generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\n * async 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个\n   await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve\n   后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n\n\n2. SETTIMEOUT、PROMISE、ASYNC/AWAIT 的区别\n\n（1）SETTIMEOUT\n\nconsole.log('script start')\t//1. 打印 script start\nsetTimeout(function(){\n    console.log('settimeout')\t// 4. 打印 settimeout\n})\t// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数\nconsole.log('script end')\t//3. 打印 script start\n// 输出顺序：script start->script end->settimeout\n\n\n（2）PROMISE\n\nPromise本身是同步的立即执行函数， 当在executor中执行resolve或者reject的时候, 此时是异步操作，\n会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。\n\nconsole.log('script start')\nlet promise1 = new Promise(function (resolve) {\n    console.log('promise1')\n    resolve()\n    console.log('promise1 end')\n}).then(function () {\n    console.log('promise2')\n})\nsetTimeout(function(){\n    console.log('settimeout')\n})\nconsole.log('script end')\n// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout\n\n\n当JS主线程执行到Promise对象时：\n\n * promise1.then() 的回调就是一个 task\n * promise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue\n * promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中\n * setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况\n\n（3）ASYNC/AWAIT\n\nasync function async1(){\n   console.log('async1 start');\n    await async2();\n    console.log('async1 end')\n}\nasync function async2(){\n    console.log('async2')\n}\nconsole.log('script start');\nasync1();\nconsole.log('script end')\n// 输出顺序：script start->async1 start->async2->script end->async1 end\n\n\nasync 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await\n就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。\n\n例如：\n\nasync function func1() {\n    return 1\n}\nconsole.log(func1())\n\n\nfunc1的运行结果其实就是一个Promise对象。因此也可以使用then来处理后续逻辑。\n\nfunc1().then(res => {\n    console.log(res);  // 30\n})\n\n\nawait的含义为等待，也就是 async\n函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。\n\n\n3. 对PROMISE的理解\n\nPromise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。\n\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise\n是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\n（1）Promise的实例有三个状态:\n\n * Pending（进行中）\n * Resolved（已完成）\n * Rejected（已拒绝）\n\n当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。\n\n（2）Promise的实例有两个过程：\n\n * pending -> fulfilled : Resolved（已完成）\n * pending -> rejected：Rejected（已拒绝）\n\n注意：一旦从进行状态变成为其他状态就永远不能更改状态了。\n\nPromise的特点：\n\n * 对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“承诺”；\n * 一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从pending变为fulfilled，从pending变为rejected。这时就称为resolved（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。\n\nPromise的缺点：\n\n * 无法取消Promise，一旦新建它就会立即执行，无法中途取消。\n * 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。\n * 当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n总结： Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个\nPromise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending\n转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。\n\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise\n实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n\n注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的\n\n\n4. PROMISE的基本用法\n\n（1）创建PROMISE对象\n\nPromise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。\n\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n\n一般情况下都会使用new Promise()来创建promise对象，但是也可以使用promise.resolve和promise.reject这两个方法：\n\n * Promise.resolve\n\nPromise.resolve(value)的返回值也是一个promise对象，可以对返回值进行.then调用，代码如下：\n\nPromise.resolve(11).then(function(value){\n  console.log(value); // 打印出11\n});\n\n\nresolve(11)代码中，会让promise对象进入确定(resolve状态)，并将参数11传递给后面的then所指定的onFulfilled 函数；\n\n创建promise对象可以使用new Promise的形式创建对象，也可以使用Promise.resolve(value)的形式创建promise对象；\n\n * Promise.reject\n\nPromise.reject 也是new Promise的快捷形式，也创建一个promise对象。代码如下：\n\nPromise.reject(new Error(“我错了，请原谅俺！！”));\n\n\n就是下面的代码new Promise的简单形式：\n\nnew Promise(function(resolve,reject){\n   reject(new Error(\"我错了！\"));\n});\n\n\n下面是使用resolve方法和reject方法：\n\nfunction testPromise(ready) {\n  return new Promise(function(resolve,reject){\n    if(ready) {\n      resolve(\"hello world\");\n    }else {\n      reject(\"No thanks\");\n    }\n  });\n};\n// 方法调用\ntestPromise(true).then(function(msg){\n  console.log(msg);\n},function(error){\n  console.log(error);\n});\n\n\n上面的代码的含义是给testPromise方法传递一个参数，返回一个promise对象，如果为true的话，那么调用promise对象中的resolve()方法，并且把其中的参数传递给后面的then第一个函数内，因此打印出\n“hello world”, 如果为false的话，会调用promise对象中的reject()方法，则会进入then的第二个函数内，会打印No thanks；\n\n（2）PROMISE方法\n\nPromise有五个常用的方法：then()、catch()、all()、race()、finally。下面就来看一下这些方法。\n\n 1. then()\n\n当Promise执行的内容符合成功条件时，调用resolve函数，失败就调用reject函数。Promise创建完了，那该如何调用呢？\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n\nthen方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中第二个参数可以省略。\nthen方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n\n当要写有顺序的异步事件时，需要串行时，可以这样写：\n\nlet promise = new Promise((resolve,reject)=>{\n    ajax('first').success(function(res){\n        resolve(res);\n    })\n})\npromise.then(res=>{\n    return new Promise((resovle,reject)=>{\n        ajax('second').success(function(res){\n            resolve(res)\n        })\n    })\n}).then(res=>{\n    return new Promise((resovle,reject)=>{\n        ajax('second').success(function(res){\n            resolve(res)\n        })\n    })\n}).then(res=>{\n    \n})\n\n\n那当要写的事件没有顺序或者关系时，还如何写呢？可以使用all 方法来解决。\n\n2. catch()\n\nPromise对象除了有then方法，还有一个catch方法，该方法相当于then方法的第二个参数，指向reject的回调函数。不过catch方法还有一个作用，就是在执行resolve回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入catch方法中。\n\np.then((data) => {\n     console.log('resolved',data);\n},(err) => {\n     console.log('rejected',err);\n     }\n); \np.then((data) => {\n    console.log('resolved',data);\n}).catch((err) => {\n    console.log('rejected',err);\n});\n\n\n3. all()\n\nall方法可以完成并行任务，\n它接收一个数组，数组的每一项都是一个promise对象。当数组中所有的promise的状态都达到resolved的时候，all方法的状态就会变成resolved，如果有一个状态变成了rejected，那么all方法的状态就会变成rejected。\n\njavascript\nlet promise1 = new Promise((resolve,reject)=>{\n    setTimeout(()=>{\n       resolve(1);\n    },2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\n    setTimeout(()=>{\n       resolve(2);\n    },1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\n    setTimeout(()=>{\n       resolve(3);\n    },3000)\n});\nPromise.all([promise1,promise2,promise3]).then(res=>{\n    console.log(res);\n    //结果为：[1,2,3] \n})\n\n\n调用all方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个promise对象resolve执行时的值。\n\n（4）race()\n\nrace方法和all一样，接受的参数是一个每项都是promise的数组，但是与all不同的是，当最先执行完的事件执行完之后，就直接返回该promise对象的值。如果第一个promise对象状态变成resolved，那自身的状态变成了resolved；反之第一个promise变成rejected，那自身状态就会变成rejected。\n\nlet promise1 = new Promise((resolve,reject)=>{\n    setTimeout(()=>{\n       reject(1);\n    },2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\n    setTimeout(()=>{\n       resolve(2);\n    },1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\n    setTimeout(()=>{\n       resolve(3);\n    },3000)\n});\nPromise.race([promise1,promise2,promise3]).then(res=>{\n    console.log(res);\n    //结果：2\n},rej=>{\n    console.log(rej)};\n)\n\n\n那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\n\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n\n\n5. finally()\n\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n\n\n上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。\n\n下面是一个例子，服务器使用 Promise 处理请求，然后使用finally方法关掉服务器。\n\nserver.listen(port)\n  .then(function () {\n    // ...\n  })\n  .finally(server.stop);\n\n\nfinally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise\n状态到底是fulfilled还是rejected。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 Promise\n的执行结果。finally本质上是then方法的特例：\n\npromise\n.finally(() => {\n  // 语句\n});\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n\n\n上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。\n\n\n5. PROMISE解决了什么问题\n\n在工作中经常会碰到这样一个需求，比如我使用ajax发一个A请求后，成功后拿到数据，需要把数据传给B请求；那么需要如下编写代码：\n\nlet fs = require('fs')\nfs.readFile('./a.txt','utf8',function(err,data){\n  fs.readFile(data,'utf8',function(err,data){\n    fs.readFile(data,'utf8',function(err,data){\n      console.log(data)\n    })\n  })\n})\n\n\n上面的代码有如下缺点：\n\n * 后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个ajax请求嵌套的情况，代码不够直观。\n * 如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。\n\nPromise出现之后，代码变成这样：\n\nlet fs = require('fs')\nfunction read(url){\n  return new Promise((resolve,reject)=>{\n    fs.readFile(url,'utf8',function(error,data){\n      error && reject(error)\n      resolve(data)\n    })\n  })\n}\nread('./a.txt').then(data=>{\n  return read(data) \n}).then(data=>{\n  return read(data)  \n}).then(data=>{\n  console.log(data)\n})\n\n\n这样代码看起了就简洁了很多，解决了地狱回调的问题。\n\n\n6. PROMISE.ALL和PROMISE.RACE的区别的使用场景\n\n（1）Promise.all\nPromise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。\n\nPromise.all中传入的是数组，返回的也是是数组，并且会将进行映射，传入的promise对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。\n\n需要注意，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决。\n\n（2）Promise.race\n\n顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2,\np3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\n\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n\n\n\n7. 对ASYNC/AWAIT 的理解\n\nasync/await其实是Generator\n的语法糖，它能实现的效果都能用then链来实现，它是为优化then链而开发出来的。从字面上来看，async是“异步”的简写，await则为等待，所以很好理解async\n用于申明一个 function 是异步的，而 await\n用于等待一个异步方法执行完成。当然语法上强制规定await只能出现在asnyc函数中，先来看看async函数返回了什么：\n\nasync function testAsy(){\n   return 'hello world';\n}\nlet result = testAsy(); \nconsole.log(result)\n\n\n\n\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise\n对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。\n\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then() 链来处理这个\nPromise 对象，就像这样：\n\nasync function testAsy(){\n   return 'hello world'\n}\nlet result = testAsy() \nconsole.log(result)\nresult.then(v=>{\n    console.log(v)   // hello world\n})\n\n\n那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve(undefined)。\n\n联想一下 Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise\n对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n\n注意：Promise.resolve(x) 可以看作是 new Promise(resolve => resolve(x))\n的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\n\n8. AWAIT 到底在等啥？\n\nawait 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await\n等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async\n函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await\n后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：\n\nfunction getSomething() {\n    return \"something\";\n}\nasync function testAsync() {\n    return Promise.resolve(\"hello async\");\n}\nasync function test() {\n    const v1 = await getSomething();\n    const v2 = await testAsync();\n    console.log(v1, v2);\n}\ntest();\n\n\nawait 表达式的运算结果取决于它等的是什么。\n\n * 如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n * 如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve\n   的值，作为 await 表达式的运算结果。\n\n来看一个例子：\n\nfunction testAsy(x){\n   return new Promise(resolve=>{setTimeout(() => {\n       resolve(x);\n     }, 3000)\n    }\n   )\n}\nasync function testAwt(){    \n  let result =  await testAsy('hello world');\n  console.log(result);    // 3秒钟之后出现hello world\n  console.log('cuger')   // 3秒钟之后出现cug\n}\ntestAwt();\nconsole.log('cug')  //立即输出cug\n\n\n这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise\n对象中异步执行。await暂停当前async的执行，所以'cug''最先输出，hello world'和‘cuger’是3秒钟后同时出现的。\n\n\n9. ASYNC/AWAIT的优势\n\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then\n链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n\n/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(n + 200), n);\n    });\n}\nfunction step1(n) {\n    console.log(`step1 with ${n}`);\n    return takeLongTime(n);\n}\nfunction step2(n) {\n    console.log(`step2 with ${n}`);\n    return takeLongTime(n);\n}\nfunction step3(n) {\n    console.log(`step3 with ${n}`);\n    return takeLongTime(n);\n}\n\n\n现在用 Promise 方式来实现这三个步骤的处理：\n\nfunction doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    step1(time1)\n        .then(time2 => step2(time2))\n        .then(time3 => step3(time3))\n        .then(result => {\n            console.log(`result is ${result}`);\n            console.timeEnd(\"doIt\");\n        });\n}\ndoIt();\n// c:/var/test>node --harmony_async_await .\n// step1 with 300\n// step2 with 500\n// step3 with 700\n// result is 900\n// doIt: 1507.251ms\n\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt() 顺序执行了三个步骤，一共用了 300 + 500 + 700\n= 1500 毫秒，和 console.time()/console.timeEnd() 计算的结果一致。\n\n如果用 async/await 来实现呢，会是这样：\n\nasync function doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd(\"doIt\");\n}\ndoIt();\n\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n\n10. ASYNC/AWAIT对比PROMISE的优势\n\n * 代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\n * Promise传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n * 错误处理友好，async/await可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n * 调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。\n\n\n11. ASYNC/AWAIT 如何捕获异常\n\nasync function fn(){\n    try{\n        let a = await Promise.reject('error')\n    }catch(error){\n        console.log(error)\n    }\n}\n\n\n\n12. 并发与并行的区别？\n\n * 并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。\n * 并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。\n\n\n13. 什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？\n\n以下代码就是一个回调函数的例子：\n\najax(url, () => {\n    // 处理逻辑\n})\n\n\n回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，可能会有如下代码：\n\najax(url, () => {\n    // 处理逻辑\n    ajax(url1, () => {\n        // 处理逻辑\n        ajax(url2, () => {\n            // 处理逻辑\n        })\n    })\n})\n\n\n以上代码看起来不利于阅读和维护，当然，也可以把函数分开来写：\n\nfunction firstAjax() {\n  ajax(url1, () => {\n    // 处理逻辑\n    secondAjax()\n  })\n}\nfunction secondAjax() {\n  ajax(url2, () => {\n    // 处理逻辑\n  })\n}\najax(url, () => {\n  // 处理逻辑\n  firstAjax()\n})\n\n\n以上的代码虽然看上去利于阅读了，但是还是没有解决根本问题。回调地狱的根本问题就是：\n\n 1. 嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身\n 2. 嵌套函数一多，就很难处理错误\n\n当然，回调函数还存在着别的几个缺点，比如不能使用 try catch 捕获错误，不能直接 return。\n\n\n14. SETTIMEOUT、SETINTERVAL、REQUESTANIMATIONFRAME 各有什么特点？\n\n异步编程当然少不了定时器了，常见的定时器函数有\nsetTimeout、setInterval、requestAnimationFrame。最常用的是setTimeout，很多人认为 setTimeout\n是延时多久，那就应该是多久后执行。\n\n其实这个观点是错误的，因为 JS 是单线程执行的，如果前面的代码影响了性能，就会导致 setTimeout 不会按期执行。当然了，可以通过代码去修正\nsetTimeout，从而使定时器相对准确：\n\nlet period = 60 * 1000 * 60 * 2\nlet startTime = new Date().getTime()\nlet count = 0\nlet end = new Date().getTime() + period\nlet interval = 1000\nlet currentInterval = interval\nfunction loop() {\n  count++\n  // 代码执行所消耗的时间\n  let offset = new Date().getTime() - (startTime + count * interval);\n  let diff = end - new Date().getTime()\n  let h = Math.floor(diff / (60 * 1000 * 60))\n  let hdiff = diff % (60 * 1000 * 60)\n  let m = Math.floor(hdiff / (60 * 1000))\n  let mdiff = hdiff % (60 * 1000)\n  let s = mdiff / (1000)\n  let sCeil = Math.ceil(s)\n  let sFloor = Math.floor(s)\n  // 得到下一次循环所消耗的时间\n  currentInterval = interval - offset \n  console.log('时：'+h, '分：'+m, '毫秒：'+s, '秒向上取整：'+sCeil, '代码执行时间：'+offset, '下次循环间隔'+currentInterval) \n  setTimeout(loop, currentInterval)\n}\nsetTimeout(loop, currentInterval)\n\n\n接下来看 setInterval，其实这个函数作用和 setTimeout 基本一致，只是该函数是每隔一段时间执行一次回调函数。\n\n通常来说不建议使用 setInterval。第一，它和 setTimeout 一样，不能保证在预期的时间执行任务。第二，它存在执行累积的问题，请看以下伪代码\n\nfunction demo() {\n  setInterval(function(){\n    console.log(2)\n  },1000)\n  sleep(2000)\n}\ndemo()\n\n\n以上代码在浏览器环境中，如果定时器执行过程中出现了耗时操作，多个回调函数会在耗时操作结束以后同时执行，这样可能就会带来性能上的问题。\n\n如果有循环定时器的需求，其实完全可以通过 requestAnimationFrame 来实现：\n\nfunction setInterval(callback, interval) {\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () => {\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime >= interval) {\n      startTime = endTime = now()\n      callback(timer)\n    }\n  }\n  timer = window.requestAnimationFrame(loop)\n  return timer\n}\nlet a = 0\nsetInterval(timer => {\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n}, 1000)\n\n\n首先 requestAnimationFrame 自带函数节流功能，基本可以保证在 16.6\n毫秒内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题，当然你也可以通过该函数来实现 setTimeout。\n\n\n八、面向对象\n\n\n1. 对象创建的方式有哪些？\n\n一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js和一般的面向对象的语言不同，在 ES6\n之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：\n\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\n\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new\n来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this\n指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this\n给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在\njs 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\n\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype\n属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如\nArray 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\n\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\n\n\n2. 对象继承的方式有哪些？\n\n（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5\n中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。\n\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n\n\n九、垃圾回收与内存泄漏\n\n\n1. 浏览器的垃圾回收机制\n\n（1）垃圾回收的概念\n\n垃圾回收：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。\n\n回收机制：\n\n * Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。\n * JavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。\n * 不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。\n\n（2）垃圾回收的方式\n\n浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。 1）标记清除\n\n * 标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。\n * 垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。\n\n2）引用计数\n\n * 另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。\n * 这种方法会引起循环引用的问题：例如：\n   obj1和obj2通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1和obj2还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。\n\nfunction fun() {\n    let obj1 = {};\n    let obj2 = {};\n    obj1.a = obj2; // obj1 引用 obj2\n    obj2.a = obj1; // obj2 引用 obj1\n}\n\n\n这种情况下，就要手动释放变量占用的内存：\n\nobj1.a =  null\n obj2.a =  null\n\n\n（3）减少垃圾回收\n\n虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。\n\n * 对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为[\n   ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。\n * 对object进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。\n * 对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。\n\n\n2. 哪些情况会导致内存泄漏\n\n以下四种情况会造成内存的泄漏：\n\n * 意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n * 被遗忘的计时器或回调函数： 设置了 setInterval\n   定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。\n * 脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。\n * 闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。","frontMatter":{"title":"JS下"}},{"name":"VUE上","path":"参考八股文/VUE上.html","texts":"一、VUE 基础\n\n\n1. VUE的基本原理\n\n当一个Vue实例创建时，Vue会遍历data中的属性，用 Object.defineProperty（vue3.0使用proxy ）将它们转为\ngetter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的 watcher\n程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。\n\n\n2. 双向数据绑定的原理\n\nVue.js\n是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：\n\n 1. 需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化\n 2. compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图\n 3. Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是: ①在自身实例化时往属性订阅器(dep)里面添加自己\n    ②自身必须有一个update()方法\n    ③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。\n 4. MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化\n    -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。\n\n\n\n\n3. 使用 OBJECT.DEFINEPROPERTY() 来进行数据劫持有什么缺点？\n\n在对一些属性进行操作时，使用这种方法无法拦截，比如通过下标方式修改数组数据或者给对象新增属性，这都不能触发组件的重新渲染，因为 Object.defineProperty 不能拦截到这些操作。更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是\nVue 内部通过重写函数的方式解决了这个问题。\n\n在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用Proxy\n的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为 Proxy 是 ES6 的语法。\n\n\n4. MVVM、MVC、MVP的区别\n\nMVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化开发效率。\n\n在开发单页面应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，如果项目变得复杂，那么整个文件就会变得冗长、混乱，这样对项目开发和后期的项目维护是非常不利的。\n\n（1）MVC\n\nMVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model\n负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View\n层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller\n中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。\n\n（2）MVVM\n\nMVVM 分为 Model、View、ViewModel：\n\n * Model代表数据模型，数据和业务逻辑都在Model层中定义；\n * View代表UI视图，负责数据的展示；\n * ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；\n\nModel和View并无直接关联，而是通过ViewModel来进行联系的，Model和ViewModel之间有着双向数据绑定的联系。因此当Model中的数据改变时会触发View层的刷新，View中由于用户交互操作而改变的数据也会在Model中同步。\n\n这种模式实现了 Model和View的数据自动同步，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作DOM。\n\n（3）MVP\n\nMVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中使用观察者模式，来实现当 Model\n层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model\n层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对\nView 层和 Model 层的解耦。MVC 中的Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP\n模式中，View 层的接口暴露给了 Presenter 因此可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现\nView 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。\n\n\n5. COMPUTED 和 WATCH 的区别\n\n对于Computed：\n\n * 它支持缓存，只有依赖的数据发生了变化，才会重新计算\n * 不支持异步，当Computed中有异步操作时，无法监听数据的变化\n * computed的值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data声明过，或者父组件传递过来的props中的数据进行计算的。\n * 如果一个属性是由其他属性计算而来的，这个属性依赖其他的属性，一般会使用computed\n * 如果computed属性的属性值是函数，那么默认使用get方法，函数的返回值就是属性的属性值；在computed中，属性有一个get方法和一个set方法，当数据发生变化时，会调用set方法。\n\n对于Watch：\n\n * 它不支持缓存，数据变化时，它就会触发相应的操作\n * 支持异步监听\n * 监听的函数接收两个参数，第一个参数是最新的值，第二个是变化之前的值\n * 当一个属性发生变化时，就需要执行相应的操作\n * 监听数据必须是data中声明的或者父组件传递过来的props中的数据，当发生变化时，会触发其他操作，函数有两个的参数：\n   * immediate：组件加载立即触发回调函数\n   * deep：深度监听，发现数据内部的变化，在复杂数据类型中使用，例如数组中的对象发生变化。需要注意的是，deep无法监听到数组和对象内部的变化。\n\n当想要执行异步或者昂贵的操作以响应不断的变化时，就需要使用watch。\n\n总结：\n\n * computed 计算属性 : 依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed\n   的值时才会重新计算 computed 的值。\n * watch 侦听器 : 更多的是观察的作用，无缓存性，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作。\n\n运用场景：\n\n * 当需要进行数值计算,并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时都要重新计算。\n * 当需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许执行异步操作 ( 访问一个 API\n   )，限制执行该操作的频率，并在得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n\n6. COMPUTED 和 METHODS 的区别\n\n可以将同一函数定义为一个 method 或者一个计算属性。对于最终的结果，两种方式是相同的\n\n不同点：\n\n * computed: 计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值；\n * method 调用总会执行该函数。\n\n\n7. SLOT是什么？有什么作用？原理是什么？\n\nslot又名插槽，是Vue的内容分发机制，组件内部的模板引擎使用slot元素作为承载分发内容的出口。插槽slot是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。slot又分三类，默认插槽，具名插槽和作用域插槽。\n\n * 默认插槽：又名匿名查抄，当slot没有指定name属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。\n * 具名插槽：带有具体名字的插槽，也就是带有name属性的slot，一个组件可以出现多个具名插槽。\n * 作用域插槽：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。\n\n实现原理：当子组件vm实例化时，获取到父组件传入的slot标签的内容，存放在vm.$slot中，默认插槽为vm.$slot.default，具名插槽为vm.$slot.xxx，xxx\n为插槽名，当组件执行渲染函数时候，遇到slot标签，使用$slot中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽。\n\n\n8. 过滤器的作用，如何实现一个过滤器\n\n根据过滤器的名称，过滤器是用来过滤数据的，在Vue中使用filters来过滤数据，filters不会修改数据，而是过滤数据，改变用户看到的输出（计算属性\ncomputed ，方法 methods 都是通过修改数据来处理数据格式的输出显示）。\n\n使用场景：\n\n * 需要格式化数据的情况，比如需要处理时间、价格等数据格式的输出 / 显示。\n * 比如后端返回一个 年月日的日期字符串，前端需要展示为 多少天前 的数据格式，此时就可以用fliters过滤器来处理数据。\n\n过滤器是一个函数，它会把表达式中的值始终当作函数的第一个参数。过滤器用在插值表达式 {{ }} 和 v-bind 表达式 中，然后放在操作符“ |\n”后面进行指示。\n\n例如，在显示金额，给商品价格添加单位：\n\n<li>商品价格：{{item.price | filterPrice}}</li>\n\n filters: {\n    filterPrice (price) {\n      return price ? ('￥' + price) : '--'\n    }\n  }\n\n\n\n9. 如何保存页面的当前的状态\n\n既然是要保持页面的状态（其实也就是组件的状态），那么会出现以下两种情况：\n\n * 前组件会被卸载\n * 前组件不会被卸载\n\n那么可以按照这两种情况分别得到以下方法：\n\n组件会被卸载：\n\n（1）将状态存储在LocalStorage / SessionStorage\n\n只需要在组件即将被销毁的生命周期 componentWillUnmount （react）中在 LocalStorage / SessionStorage\n中把当前组件的 state 通过 JSON.stringify() 储存下来就可以了。在这里面需要注意的是组件更新状态的时机。\n\n比如从 B 组件跳转到 A 组件的时候，A 组件需要更新自身的状态。但是如果从别的组件跳转到 B 组件的时候，实际上是希望 B 组件重新渲染的，也就是不要从\nStorage 中读取信息。所以需要在 Storage 中的状态加入一个 flag 属性，用来控制 A 组件是否读取 Storage 中的状态。\n\n优点：\n\n * 兼容性好，不需要额外库或工具。\n * 简单快捷，基本可以满足大部分需求。\n\n缺点：\n\n * 状态通过 JSON 方法储存（相当于深拷贝），如果状态中有特殊情况（比如 Date 对象、Regexp\n   对象等）的时候会得到字符串而不是原来的值。（具体参考用 JSON 深拷贝的缺点）\n * 如果 B 组件后退或者下一页跳转并不是前组件，那么 flag 判断会失效，导致从其他页面进入 A 组件页面时 A 组件会重新读取\n   Storage，会造成很奇怪的现象\n\n（2）路由传值\n\n通过 react-router 的 Link 组件的 prop —— to 可以实现路由间传递参数的效果。\n\n在这里需要用到 state 参数，在 B 组件中通过 history.location.state 就可以拿到 state 值，保存它。返回 A 组件时再次携带\nstate 达到路由状态保持的效果。\n\n优点：\n\n * 简单快捷，不会污染 LocalStorage / SessionStorage。\n * 可以传递 Date、RegExp 等特殊对象（不用担心 JSON.stringify / parse 的不足）\n\n缺点：\n\n * 如果 A 组件可以跳转至多个组件，那么在每一个跳转组件内都要写相同的逻辑。\n\n组件不会被卸载：\n\n（1）单页面渲染\n\n要切换的组件作为子组件全屏渲染，父组件中正常储存页面状态。\n\n优点：\n\n * 代码量少\n * 不需要考虑状态传递过程中的错误\n\n缺点：\n\n * 增加 A 组件维护成本\n * 需要传入额外的 prop 到 B 组件\n * 无法利用路由定位页面\n\n除此之外，在Vue中，还可以是用keep-alive来缓存页面，当组件在keep-alive内被切换时组件的activated、deactivated这两个生命周期钩子函数会被执行\n被包裹在keep-alive中的组件的状态将会被保留：\n\n<keep-alive>\n    <router-view v-if=\"$route.meta.keepAlive\"></router-view>\n</kepp-alive>\n\n\nrouter.js\n\n{\n  path: '/',\n  name: 'xxx',\n  component: ()=>import('../src/views/xxx.vue'),\n  meta:{\n    keepAlive: true // 需要被缓存\n  }\n},\n\n\n\n10. 常见的事件修饰符及其作用\n\n * .stop：等同于 JavaScript 中的 event.stopPropagation() ，防止事件冒泡；\n * .prevent ：等同于 JavaScript 中的 event.preventDefault()\n   ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；\n * .capture ：与事件冒泡的方向相反，事件捕获由外到内；\n * .self ：只会触发自己范围内的事件，不包含子元素；\n * .once ：只会触发一次。\n\n\n11. V-IF、V-SHOW、V-HTML 的原理\n\n * v-if会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；\n * v-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；\n * v-html会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值。\n\n\n13. V-IF和V-SHOW的区别\n\n * 手段：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐；\n * 编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换；\n * 编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译;\n   v-show是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且DOM元素保留；\n * 性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；\n * 使用场景：v-if适合运营条件不大可能改变；v-show适合频繁切换。\n\n\n14. V-MODEL 是如何实现的，语法糖实际是什么？\n\n（1）作用在表单元素上 动态绑定了 input 的 value 指向了 messgae 变量，并且在触发 input 事件的时候去动态把\nmessage设置为目标值：\n\n<input v-model=\"sth\" />\n//  等同于\n<input \n    v-bind:value=\"message\" \n    v-on:input=\"message=$event.target.value\"\n>\n//$event 指代当前触发的事件对象;\n//$event.target 指代当前触发的事件对象的dom;\n//$event.target.value 就是当前dom的value值;\n//在@input方法中，value => sth;\n//在:value中,sth => value;\n\n\n（2）作用在组件上 在自定义组件中，v-model 默认会利用名为 value 的 prop和名为 input 的事件\n\n本质是一个父子组件通信的语法糖，通过prop和$.emit实现。 因此父组件 v-model 语法糖本质上可以修改为：\n\n<child :value=\"message\"  @input=\"function(e){message = e}\"></child>\n\n\n在组件的实现中，可以通过 v-model属性来配置子组件接收的prop名称，以及派发的事件名称。 例子：\n\n// 父组件\n<aa-input v-model=\"aa\"></aa-input>\n// 等价于\n<aa-input v-bind:value=\"aa\" v-on:input=\"aa=$event.target.value\"></aa-input>\n\n// 子组件：\n<input v-bind:value=\"aa\" v-on:input=\"onmessage\"></aa-input>\n\nprops:{value:aa,}\nmethods:{\n    onmessage(e){\n        $emit('input',e.target.value)\n    }\n}\n\n\n默认情况下，一个组件上的v-model 会把 value 用作 prop且把 input 用作 event。但是一些输入类型比如单选框和复选框按钮可能想使用\nvalue prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。js 监听input\n输入框输入数据改变，用oninput，数据改变以后就会立刻出发这个事件。通过input事件把数据/$emit\n出去，在父组件接受。父组件设置v-model的值为input $emit过来的值。\n\n\n15. V-MODEL 可以被用在自定义组件上吗？如果可以，如何使用？\n\n可以。v-model 实际上是一个语法糖，如：\n\n<input v-model=\"searchText\">\n\n\n实际上相当于：\n\n<input\n  v-bind:value=\"searchText\"\n  v-on:input=\"searchText = $event.target.value\"\n>\n\n\n用在自定义组件上也是同理：\n\n<custom-input v-model=\"searchText\">\n\n\n相当于：\n\n<custom-input\n  v-bind:value=\"searchText\"\n  v-on:input=\"searchText = $event\"\n></custom-input>\n\n\n显然，custom-input 与父组件的交互如下：\n\n 1. 父组件将searchText变量传入custom-input 组件，使用的 prop 名为value；\n 2. custom-input 组件向父组件传出名为input的事件，父组件将接收到的值赋值给searchText；\n\n所以，custom-input 组件的实现应该类似于这样：\n\nVue.component('custom-input', {\n  props: ['value'],\n  template: `\n    <input\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n\n\n\n16. DATA为什么是一个函数而不是对象\n\nJavaScript中的对象是引用类型的数据，当多个实例引用同一个对象时，只要一个实例对这个对象进行操作，其他实例中的数据也会发生变化。\n\n而在Vue中，更多的是想要复用组件，那就需要每个组件都有自己的数据，这样组件之间才不会相互干扰。\n\n所以组件的数据不能写成对象的形式，而是要写成函数的形式。数据以函数返回值的形式定义，这样当每次复用组件的时候，就会返回一个新的data，也就是说每个组件都有自己的私有数据空间，它们各自维护自己的数据，不会干扰其他组件的正常运行。\n\n\n17. 对KEEP-ALIVE的理解，它是如何实现的，具体缓存的是什么？\n\n如果需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。\n\n（1）keep-alive\n\nkeep-alive有以下三个属性：\n\n * include 字符串或正则表达式，只有名称匹配的组件会被匹配；\n * exclude 字符串或正则表达式，任何名称匹配的组件都不会被缓存；\n * max 数字，最多可以缓存多少组件实例。\n\n注意：keep-alive 包裹动态组件时，会缓存不活动的组件实例。\n\n主要流程\n\n 1. 判断组件 name ，不在 include 或者在 exclude 中，直接返回 vnode，说明该组件不被缓存。\n 2. 获取组件实例 key ，如果有获取实例的 key，否则重新生成。\n 3. key生成规则，cid +\"∶∶\"+ tag ，仅靠cid是不够的，因为相同的构造函数可以注册为不同的本地组件。\n 4. 如果缓存对象内存在，则直接从缓存对象中获取组件实例给 vnode ，不存在则添加到缓存对象中。 5.最大缓存数量，当缓存组件数量超过 max 值时，清除\n    keys 数组内第一个组件。\n\n（2）keep-alive 的实现\n\nconst patternTypes: Array<Function> = [String, RegExp, Array] // 接收：字符串，正则，数组\n\nexport default {\n  name: 'keep-alive',\n  abstract: true, // 抽象组件，是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。\n\n  props: {\n    include: patternTypes, // 匹配的组件，缓存\n    exclude: patternTypes, // 不去匹配的组件，不缓存\n    max: [String, Number], // 缓存组件的最大实例数量, 由于缓存的是组件实例（vnode），数量过多的时候，会占用过多的内存，可以用max指定上限\n  },\n\n  created() {\n    // 用于初始化缓存虚拟DOM数组和vnode的key\n    this.cache = Object.create(null)\n    this.keys = []\n  },\n\n  destroyed() {\n    // 销毁缓存cache的组件实例\n    for (const key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n\n  mounted() {\n    // prune 削减精简[v.]\n    // 去监控include和exclude的改变，根据最新的include和exclude的内容，来实时削减缓存的组件的内容\n    this.$watch('include', (val) => {\n      pruneCache(this, (name) => matches(val, name))\n    })\n    this.$watch('exclude', (val) => {\n      pruneCache(this, (name) => !matches(val, name))\n    })\n  },\n}\n\n\nrender函数：\n\n 1. 会在 keep-alive 组件内部去写自己的内容，所以可以去获取默认 slot 的内容，然后根据这个去获取组件\n 2. keep-alive 只对第一个组件有效，所以获取第一个子组件。\n 3. 和 keep-alive 搭配使用的一般有：动态组件 和router-view\n\nrender () {\n  //\n  function getFirstComponentChild (children: ?Array<VNode>): ?VNode {\n    if (Array.isArray(children)) {\n  for (let i = 0; i < children.length; i++) {\n    const c = children[i]\n    if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n      return c\n    }\n  }\n  }\n  }\n  const slot = this.$slots.default // 获取默认插槽\n  const vnode: VNode = getFirstComponentChild(slot)// 获取第一个子组件\n  const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions // 组件参数\n  if (componentOptions) { // 是否有组件参数\n    // check pattern\n    const name: ?string = getComponentName(componentOptions) // 获取组件名\n    const { include, exclude } = this\n    if (\n      // not included\n      (include && (!name || !matches(include, name))) ||\n      // excluded\n      (exclude && name && matches(exclude, name))\n    ) {\n      // 如果不匹配当前组件的名字和include以及exclude\n      // 那么直接返回组件的实例\n      return vnode\n    }\n\n    const { cache, keys } = this\n\n    // 获取这个组件的key\n    const key: ?string = vnode.key == null\n      // same constructor may get registered as different local components\n      // so cid alone is not enough (#3269)\n      ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n      : vnode.key\n\n    if (cache[key]) {\n      // LRU缓存策略执行\n      vnode.componentInstance = cache[key].componentInstance // 组件初次渲染的时候componentInstance为undefined\n\n      // make current key freshest\n      remove(keys, key)\n      keys.push(key)\n      // 根据LRU缓存策略执行，将key从原来的位置移除，然后将这个key值放到最后面\n    } else {\n      // 在缓存列表里面没有的话，则加入，同时判断当前加入之后，是否超过了max所设定的范围，如果是，则去除\n      // 使用时间间隔最长的一个\n      cache[key] = vnode\n      keys.push(key)\n      // prune oldest entry\n      if (this.max && keys.length > parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n      }\n    }\n    // 将组件的keepAlive属性设置为true\n    vnode.data.keepAlive = true // 作用：判断是否要执行组件的created、mounted生命周期函数\n  }\n  return vnode || (slot && slot[0])\n}\n\n\nkeep-alive 具体是通过 cache 数组缓存所有组件的 vnode 实例。当 cache 内原有组件被使用时会将该组件 key 从 keys\n数组中删除，然后 push 到 keys数组最后，以便清除最不常用组件。\n\n实现步骤：\n\n 1. 获取 keep-alive 下第一个子组件的实例对象，通过他去获取这个组件的组件名\n 2. 通过当前组件名去匹配原来 include 和 exclude，判断当前组件是否需要缓存，不需要缓存，直接返回当前组件的实例vNode\n 3. 需要缓存，判断他当前是否在缓存数组里面：\n\n * 存在，则将他原来位置上的 key 给移除，同时将这个组件的 key 放到数组最后面（LRU）\n * 不存在，将组件 key 放入数组，然后判断当前 key数组是否超过 max 所设置的范围，超过，那么削减未使用时间最长的一个组件的 key\n\n 4. 最后将这个组件的 keepAlive 设置为 true\n\n（3）keep-alive 本身的创建过程和 patch 过程\n\n缓存渲染的时候，会根据 vnode.componentInstance（首次渲染 vnode.componentInstance 为 undefined） 和\nkeepAlive 属性判断不会执行组件的 created、mounted 等钩子函数，而是对缓存的组件执行 patch 过程∶ 直接把缓存的 DOM\n对象直接插入到目标元素中，完成了数据更新的情况下的渲染过程。\n\n首次渲染\n\n * 组件的首次渲染∶判断组件的 abstract 属性，才往父组件里面挂载 DOM\n\n// core/instance/lifecycle\nfunction initLifecycle (vm: Component) {\n  const options = vm.$options\n\n  // locate first non-abstract parent\n  let parent = options.parent\n  if (parent && !options.abstract) { // 判断组件的abstract属性，才往父组件里面挂载DOM\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent\n    }\n    parent.$children.push(vm)\n  }\n\n  vm.$parent = parent\n  vm.$root = parent ? parent.$root : vm\n\n  vm.$children = []\n  vm.$refs = {}\n\n  vm._watcher = null\n  vm._inactive = null\n  vm._directInactive = false\n  vm._isMounted = false\n  vm._isDestroyed = false\n  vm._isBeingDestroyed = false\n}\n\n\n * 判断当前 keepAlive 和 componentInstance 是否存在来判断是否要执行组件 prepatch 还是执行创建\n   componentlnstance\n\n// core/vdom/create-component\ninit (vnode: VNodeWithData, hydrating: boolean): ?boolean {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) { // componentInstance在初次是undefined!!!\n      // kept-alive components, treat as a patch\n      const mountedNode: any = vnode // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode) // prepatch函数执行的是组件更新的过程\n    } else {\n      const child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      )\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating)\n    }\n  },\n\n\nprepatch 操作就不会在执行组件的 mounted 和 created 生命周期函数，而是直接将 DOM 插入\n\n（4）LRU （least recently used）缓存策略\n\nLRU 缓存策略∶ 从内存中找出最久未使用的数据并置换新的数据。 LRU（Least rencently\nused）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是 \"如果数据最近被访问过，那么将来被访问的几率也更高\"。\n最常见的实现是使用一个链表保存缓存数据，详细算法实现如下∶\n\n * 新数据插入到链表头部\n * 每当缓存命中（即缓存数据被访问），则将数据移到链表头部\n * 链表满的时候，将链表尾部的数据丢弃。\n\n\n18. $NEXTTICK 原理及作用\n\nVue 的 nextTick 其本质是对 JavaScript 执行原理 EventLoop 的一种应用。\n\nnextTick 的核心是利用了如 Promise 、MutationObserver、setImmediate、setTimeout的原生\nJavaScript 方法来模拟对应的微/宏任务的实现，本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。\n\nnextTick 不仅是 Vue 内部的异步队列的调用方法，同时也允许开发者在实际项目中使用这个方法来满足实际应用中对 DOM 更新数据时机的后续逻辑处理\n\nnextTick 是典型的将底层 JavaScript 执行原理应用到具体案例中的示例，引入异步更新队列机制的原因∶\n\n * 如果是同步更新，则多次对一个或多个属性赋值，会频繁触发 UI/DOM 的渲染，可以减少一些无用渲染\n * 同时由于 VirtualDOM 的引入，每一次状态发生变化后，状态变化的信号会发送给组件，组件内部使用 VirtualDOM 进行计算得出需要更新的具体的\n   DOM 节点，然后对 DOM 进行更新操作，每次更新状态后的渲染过程需要更多的计算，而这种无用功也将浪费更多的性能，所以异步渲染变得更加至关重要\n\nVue采用了数据驱动视图的思想，但是在一些情况下，仍然需要操作DOM。有时候，可能遇到这样的情况，DOM1的数据发生了变化，而DOM2需要从DOM1中获取数据，那这时就会发现DOM2的视图并没有更新，这时就需要用到了nextTick了。\n\n由于Vue的DOM操作是异步的，所以，在上面的情况中，就要将DOM2获取数据的操作写在$nextTick中。\n\nthis.$nextTick(() => {    // 获取数据的操作...})\n\n\n所以，在以下情况下，会用到nextTick：\n\n * 在数据变化后执行的某个操作，而这个操作需要使用随数据变化而变化的DOM结构的时候，这个操作就需要方法在nextTick()的回调函数中。\n * 在vue生命周期中，如果在created()钩子进行DOM操作，也一定要放在nextTick()的回调函数中。\n\n因为在created()钩子函数中，页面的DOM还未渲染，这时候也没办法操作DOM，所以，此时如果想要操作DOM，必须将操作的代码放在nextTick()的回调函数中。\n\n\n19. VUE 中给 DATA 中的对象属性添加一个新的属性时会发生什么？如何解决？\n\n<template> \n   <div>\n      <ul>\n         <li v-for=\"value in obj\" :key=\"value\"> {{value}} </li> \n      </ul> \n      <button @click=\"addObjB\">添加 obj.b</button> \n   </div>\n</template>\n\n<script>\n    export default { \n       data () { \n          return { \n              obj: { \n                  a: 'obj.a' \n              } \n          } \n       },\n       methods: { \n          addObjB () { \n              this.obj.b = 'obj.b' \n              console.log(this.obj) \n          } \n      }\n   }\n</script>\n\n\n点击 button 会发现，obj.b\n已经成功添加，但是视图并未刷新。这是因为在Vue实例创建时，obj.b并未声明，因此就没有被Vue转换为响应式的属性，自然就不会触发视图的更新，这时就需要使用Vue的全局\napi $set()：\n\naddObjB () (\n   this.$set(this.obj, 'b', 'obj.b')\n   console.log(this.obj)\n}\n\n\n$set()方法相当于手动的去把obj.b处理成一个响应式的属性，此时视图也会跟着改变了。\n\n\n20. VUE中封装的数组方法有哪些，其如何实现页面更新\n\n在Vue中，对响应式处理利用的是Object.defineProperty对数据进行拦截，而这个方法并不能监听到数组内部变化，数组长度变化，数组的截取变化等，所以需要对这些操作进行hack，让Vue能监听到其中的变化。\n那Vue是如何实现让这些数组方法实现元素的实时更新的呢，下面是Vue中对这些方法的封装：\n\n// 缓存数组原型\nconst arrayProto = Array.prototype;\n// 实现 arrayMethods.__proto__ === Array.prototype\nexport const arrayMethods = Object.create(arrayProto);\n// 需要进行功能拓展的方法\nconst methodsToPatch = [\n  \"push\",\n  \"pop\",\n  \"shift\",\n  \"unshift\",\n  \"splice\",\n  \"sort\",\n  \"reverse\"\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function(method) {\n  // 缓存原生数组方法\n  const original = arrayProto[method];\n  def(arrayMethods, method, function mutator(...args) {\n    // 执行并缓存原生数组功能\n    const result = original.apply(this, args);\n    // 响应式处理\n    const ob = this.__ob__;\n    let inserted;\n    switch (method) {\n    // push、unshift会新增索引，所以要手动observer\n      case \"push\":\n      case \"unshift\":\n        inserted = args;\n        break;\n      // splice方法，如果传入了第三个参数，也会有索引加入，也要手动observer。\n      case \"splice\":\n        inserted = args.slice(2);\n        break;\n    }\n    // \n    if (inserted) ob.observeArray(inserted);// 获取插入的值，并设置响应式监听\n    // notify change\n    ob.dep.notify();// 通知依赖更新\n    // 返回原生数组方法的执行结果\n    return result;\n  });\n});\n\n\n简单来说就是，重写了数组中的那些原生方法，首先获取到这个数组的__ob__，也就是它的Observer对象，如果有新的值，就调用observeArray继续对新的值观察变化（也就是通过target__proto__\n== arrayMethods来改变了数组实例的型），然后手动调用notify，通知渲染watcher，执行update。\n\n\n21. VUE 单页应用与多页应用的区别\n\n概念：\n\n * SPA单页面应用（SinglePage Web\n   Application），指只有一个主页面的应用，一开始只需要加载一次js、css等相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅仅刷新局部资源。\n * MPA多页面应用 （MultiPage\n   Application），指有多个独立页面的应用，每个页面必须重复加载js、css等相关资源。多页应用跳转，需要整页资源刷新。\n\n区别：\n\n\n22. VUE TEMPLATE 到 RENDER 的过程\n\nvue的模版编译过程主要如下：template -> ast -> render函数\n\nvue 在模版编译版本的码中会执行 compileToFunctions 将template转化为render函数：\n\n// 将模板编译为render函数const { render, staticRenderFns } = compileToFunctions(template,options//省略}, this)\n\n\nCompileToFunctions中的主要逻辑如下∶ （1）调用parse方法将template转化为ast（抽象语法树）\n\nconstast = parse(template.trim(), options)\n\n\n * parse的目标：把tamplate转换为AST树，它是一种用 JavaScript对象的形式来描述整个模板。\n * 解析过程：利用正则表达式顺序解析模板，当解析到开始标签、闭合标签、文本的时候都会分别执行对应的 回调函数，来达到构造AST树的目的。\n\nAST元素节点总共三种类型：type为1表示普通元素、2为表达式、3为纯文本\n\n（2）对静态节点做优化\n\noptimize(ast,options)\n\n\n这个过程主要分析出哪些是静态节点，给其打一个标记，为后续更新渲染可以直接跳过静态节点做优化\n\n深度遍历AST，查看每个子树的节点元素是否为静态节点或者静态节点根。如果为静态节点，他们生成的DOM永远不会改变，这对运行时模板更新起到了极大的优化作用。\n\n（3）生成代码\n\nconst code = generate(ast, options)\n\n\ngenerate将ast抽象语法树编译成 render字符串并将静态部分放到 staticRenderFns 中，最后通过 new Function(``\nrender``) 生成render函数。\n\n\n23. VUE DATA 中某一个属性的值发生改变后，视图会立即同步执行重新渲染吗？\n\n不会立即同步执行重新渲染。Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。Vue 在更新 DOM\n时是异步执行的。只要侦听到数据变化， Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。\n\n如果同一个watcher被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM\n操作是非常重要的。然后，在下一个的事件循环tick中，Vue 刷新队列并执行实际（已去重的）工作。\n\n\n24. 简述 MIXIN、EXTENDS 的覆盖逻辑\n\n（1）mixin 和 extends mixin 和 extends均是用于合并、拓展组件的，两者均通过 mergeOptions 方法实现合并。\n\n * mixins 接收一个混入对象的数组，其中混入对象可以像正常的实例对象一样包含实例选项，这些选项会被合并到最终的选项中。Mixin\n   钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。\n * extends 主要是为了便于扩展单文件组件，接收一个对象或构造函数。\n\n（2)mergeOptions 的执行过程\n\n * 规范化选项（normalizeProps、normalizelnject、normalizeDirectives)\n * 对未合并的选项，进行判断\n\nif(!child._base) {    if(child.extends) {        parent = mergeOptions(parent, child.extends, vm)    }    if(child.mixins) {        for(let i = 0, l = child.mixins.length; i < l; i++){            parent = mergeOptions(parent, child.mixins[i], vm)        }    }}\n\n\n * 合并处理。根据一个通用 Vue 实例所包含的选项进行分类逐一判断合并，如 props、data、\n   methods、watch、computed、生命周期等，将合并结果存储在新定义的 options 对象里。\n * 返回合并结果 options。\n\n\n25. 描述下VUE自定义指令\n\n在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。\n一般需要对DOM元素进行底层操作时使用，尽量只用来操作 DOM展示，不修改内部的值。当使用自定义指令直接修改 value\n值时绑定v-model的值也不会同步更新；如必须修改可以在自定义指令中使用keydown事件，在vue组件中使用 change事件，回调中修改vue数据;\n\n（1）自定义指令基本内容\n\n * 全局定义：Vue.directive(\"focus\",{})\n\n * 局部定义：directives:{focus:{}}\n\n * 钩子函数：指令定义对象提供钩子函数\n   \n   o bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n   \n   o inSerted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。\n   \n   o\n   update：所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前调用。指令的值可能发生了改变，也可能没有。但是可以通过比较更新前后的值来忽略不必要的模板更新。\n   \n   o ComponentUpdate：指令所在组件的 VNode及其子VNode全部更新后调用。\n   \n   o unbind：只调用一次，指令与元素解绑时调用。\n\n * 钩子函数参数 o el：绑定元素\n   \n   o bing： 指令核心对象，描述指令全部信息属性\n   \n   o name\n   \n   o value\n   \n   o oldValue\n   \n   o expression\n   \n   o arg\n   \n   o modifers\n   \n   o vnode 虚拟节点\n   \n   o oldVnode：上一个虚拟节点（更新钩子函数中才有用）\n\n（2）使用场景\n\n * 普通DOM元素进行底层操作的时候，可以使用自定义指令\n\n * 自定义指令是用来操作DOM的。尽管Vue推崇数据驱动视图的理念，但并非所有情况都适合数据驱动。自定义指令就是一种有效的补充和扩展，不仅可用于定义任何的DOM操作，并且是可复用的。\n\n（3）使用案例\n\n初级应用：\n\n * 鼠标聚焦\n * 下拉菜单\n * 相对时间转换\n * 滚动动画\n\n高级应用：\n\n * 自定义指令实现图片懒加载\n * 自定义指令集成第三方插件\n\n\n26. 子组件可以直接改变父组件的数据吗？\n\n子组件不可以直接改变父组件的数据。这样做主要是为了维护父子组件的单向数据流。每次父级组件发生更新时，子组件中所有的 prop\n都将会刷新为最新的值。如果这样做了，Vue 会在浏览器的控制台中发出警告。\n\nVue提倡单向数据流，即父级 props\n的更新会流向子组件，但是反过来则不行。这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解，导致数据流混乱。如果破坏了单向数据流，当应用复杂时，debug\n的成本会非常高。\n\n只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。\n\n\n27. VUE是如何收集依赖的？\n\n在初始化 Vue 的每个组件时，会对组件的 data 进行初始化，就会将由普通对象变成响应式对象，在这个过程中便会进行依赖收集的相关逻辑，如下所示∶\n\nfunction defieneReactive (obj, key, val){\n  const dep = new Dep();\n  ...\n  Object.defineProperty(obj, key, {\n    ...\n    get: function reactiveGetter () {\n      if(Dep.target){\n        dep.depend();\n        ...\n      }\n      return val\n    }\n    ...\n  })\n}\n\n\n以上只保留了关键代码，主要就是 const dep = new Dep()实例化一个 Dep 的实例，然后在 get 函数中通过 dep.depend()\n进行依赖收集。 （1）Dep Dep是整个依赖收集的核心，其关键代码如下：\n\nclass Dep {\n  static target;\n  subs;\n\n  constructor () {\n    ...\n    this.subs = [];\n  }\n  addSub (sub) {\n    this.subs.push(sub)\n  }\n  removeSub (sub) {\n    remove(this.sub, sub)\n  }\n  depend () {\n    if(Dep.target){\n      Dep.target.addDep(this)\n    }\n  }\n  notify () {\n    const subs = this.subds.slice();\n    for(let i = 0;i < subs.length; i++){\n      subs[i].update()\n    }\n  }\n}\n\n\nDep 是一个 class ，其中有一个关 键的静态属性 static，它指向了一个全局唯一 Watcher，保证了同一时间全局只有一个 watcher\n被计算，另一个属性 subs 则是一个 Watcher 的数组，所以 Dep 实际上就是对 Watcher 的管理，再看看 Watcher 的相关代码∶\n\n（2）Watcher\n\nclass Watcher {\n  getter;\n  ...\n  constructor (vm, expression){\n    ...\n    this.getter = expression;\n    this.get();\n  }\n  get () {\n    pushTarget(this);\n    value = this.getter.call(vm, vm)\n    ...\n    return value\n  }\n  addDep (dep){\n        ...\n    dep.addSub(this)\n  }\n  ...\n}\nfunction pushTarget (_target) {\n  Dep.target = _target\n}\n\n\nWatcher 是一个 class，它定义了一些方法，其中和依赖收集相关的主要有 get、addDep 等。\n\n（3）过程\n\n在实例化 Vue 时，依赖收集的相关过程如下∶ 初 始 化 状 态 initState ， 这 中 间 便 会 通 过 defineReactive\n将数据变成响应式对象，其中的 getter 部分便是用来依赖收集的。 初始化最终会走 mount 过程，其中会实例化 Watcher ，进入 Watcher\n中，便会执行 this.get() 方法，\n\nupdateComponent = () => {\n  vm._update(vm._render())\n}\nnew Watcher(vm, updateComponent)\n\n\nget 方法中的 pushTarget 实际上就是把 Dep.target 赋值为当前的 watcher。\n\nthis.getter.call（vm，vm），这里的 getter 会执行 vm._render() 方法，在这个过程中便会触发数据对象的\ngetter。那么每个对象值的 getter 都持有一个 dep，在触发 getter 的时候会调用 dep.depend() 方法，也就会执行\nDep.target.addDep(this)。刚才 Dep.target 已经被赋值为 watcher，于是便会执行 addDep 方法，然后走到\ndep.addSub() 方法，便将当前的 watcher 订阅到这个数据持有的 dep 的 subs 中，这个目的是为后续数据变化时候能通知到哪些 subs\n做准备。所以在 vm._render() 过程中，会触发所有数据的 getter，这样便已经完成了一个依赖收集的过程。\n\n\n28. 对 REACT 和 VUE 的理解，它们的异同\n\n相似之处：\n\n * 都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库；\n * 都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板；\n * 都使用了Virtual DOM（虚拟DOM）提高重绘性能；\n * 都有props的概念，允许组件间的数据传递；\n * 都鼓励组件化应用，将应用分拆成一个个功能明确的模块，提高复用性。\n\n不同之处 ：\n\n1）数据流\n\nVue默认支持数据双向绑定，而React一直提倡单向数据流\n\n2）虚拟DOM\n\nVue2.x开始引入\"Virtual DOM\"，消除了和React在这方面的差异，但是在具体的细节还是有各自的特点。\n\n * Vue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。\n * 对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过\n   PureComponent/shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。\n\n3）组件化\n\nReact与Vue最大的不同是模板的编写。\n\n * Vue鼓励写近似常规HTML的模板。写起来很接近标准 HTML元素，只是多了一些属性。\n * React推荐你所有的模板通用JavaScript的语法扩展——JSX书写。\n\n具体来讲：React中render函数是支持闭包特性的，所以import的组件在render中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在\nthis 上进行一次中转，所以 import 一个组件完了之后，还需要在 components 中再声明下。 4）监听数据变化的实现原理不同\n\n * Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能\n * React\n   默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的vDOM的重新渲染。这是因为\n   Vue 使用的是可变数据，而React更强调数据的不可变。\n\n5）高阶组件\n\nreact可以通过高阶组件（HOC）来扩展，而Vue需要通过mixins来扩展。\n\n高阶组件就是高阶函数，而React的组件本身就是纯粹的函数，所以高阶函数对React来说易如反掌。相反Vue.js使用HTML模板创建视图组件，这时模板无法有效的编译，因此Vue不能采用HOC来实现。\n\n6）构建工具\n\n两者都有自己的构建工具：\n\n * React ==> Create React APP\n * Vue ==> vue-cli\n\n7）跨平台\n\n * React ==> React Native\n * Vue ==> Weex\n\n\n29. VUE的优点\n\n * 轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb ；\n * 简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；\n * 双向数据绑定：保留了 angular 的特点，在数据操作方面更为简单；\n * 组件化：保留了 react 的优点，实现了 html 的封装和重用，在构建单页面应用方面有着独特的优势；\n * 视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；\n * 虚拟DOM：dom 操作是非常耗费性能的，不再使用原生的 dom 操作节点，极大解放 dom 操作，但具体操作的还是 dom 不过是换了另一种方式；\n * 运行速度更快：相比较于 react 而言，同样是操作虚拟 dom，就性能而言， vue 存在很大的优势。\n\n\n30. ASSETS和STATIC的区别\n\n相同点： assets 和 static 两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点\n\n不相同点：assets 中存放的静态资源文件在项目打包时，也就是运行 npm run build 时会将 assets\n中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在 static 文件中跟着\nindex.html 一同上传至服务器。static\n中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是\nstatic 中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于 assets 中打包后的文件提交较大点。在服务器中就会占据更大的空间。\n\n建议： 将项目中 template需要的样式文件js文件等都可以放置在 assets\n中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如iconfoont.css 等文件可以放置在 static\n中，因为这些引入的第三方文件已经经过处理，不再需要处理，直接上传。\n\n\n31. DELETE和VUE.DELETE删除数组的区别\n\n * delete 只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。\n * Vue.delete 直接删除了数组 改变了数组的键值。\n\n\n32. VUE如何监听对象或者数组某个属性的变化\n\n当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，这个时候，你会发现页面并没有更新。这是因为Object.defineProperty()限制，监听不到变化。\n\n解决方式：\n\n * this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)\n\nthis.$set(this.arr, 0, \"OBKoro1\"); // 改变数组this.$set(this.obj, \"c\", \"OBKoro1\"); // 改变对象\n\n\n * 调用以下几个数组的方法\n\nsplice()、 push()、pop()、shift()、unshift()、sort()、reverse()\n\n\nvue源码里缓存了array的原型链，然后重写了这几个方法，触发这几个方法的时候会observer数据，意思是使用这些方法不用再进行额外的操作，视图自动进行更新。\n推荐使用splice方法会比较好自定义,因为splice可以在数组的任何位置进行删除/添加操作\n\nvm.$set 的实现原理是：\n\n * 如果目标是数组，直接使用数组的 splice 方法触发相应式；\n * 如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（\n   defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和\n   setter 的功能所调用的方法）\n\n\n33. 什么是 MIXIN ？\n\n * Mixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。\n * 如果希望在多个组件之间重用一组组件选项，例如生命周期 hook、 方法等，则可以将其编写为 mixin，并在组件中简单的引用它。\n * 然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优化于组件自已的 hook。\n\n\n34. VUE模版编译原理\n\nvue中的模板template无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的HTML语法，所有需要将template转化成一个JavaScript函数，这样浏览器就可以执行这一个函数并渲染出对应的HTML元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。模板编译又分三个阶段，解析parse，优化optimize，生成generate，最终生成可执行函数render。\n\n * 解析阶段：使用大量的正则表达式对template字符串进行解析，将标签、指令、属性等转化为抽象语法树AST。\n * 优化阶段：遍历AST，找到其中的一些静态节点并进行标记，方便在页面重渲染的时候进行diff比较时，直接跳过这一些静态节点，优化runtime的性能。\n * 生成阶段：将最终的AST转化为render函数字符串。\n\n\n35. 对SSR的理解\n\nSSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端\n\nSSR的优势：\n\n * 更好的SEO\n * 首屏加载速度更快\n\nSSR的缺点：\n\n * 开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子；\n * 当需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境；\n * 更多的服务端负载。\n\n\n36. VUE的性能优化有哪些\n\n（1）编码阶段\n\n * 尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher\n * v-if和v-for不能连用\n * 如果需要使用v-for给每项元素绑定事件时使用事件代理\n * SPA 页面采用keep-alive缓存组件\n * 在更多的情况下，使用v-if替代v-show\n * key保证唯一\n * 使用路由懒加载、异步组件\n * 防抖、节流\n * 第三方模块按需导入\n * 长列表滚动到可视区域动态加载\n * 图片懒加载\n\n（2）SEO优化\n\n * 预渲染\n * 服务端渲染SSR\n\n（3）打包优化\n\n * 压缩代码\n * Tree Shaking/Scope Hoisting\n * 使用cdn加载第三方模块\n * 多线程打包happypack\n * splitChunks抽离公共文件\n * sourceMap优化\n\n（4）用户体验\n\n * 骨架屏\n * PWA\n * 还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。\n\n\n37. 对 SPA 单页面的理解，它的优缺点分别是什么？\n\nSPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和\nCSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI\n与用户的交互，避免页面的重新加载。\n\n优点：\n\n * 用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；\n * 基于上面一点，SPA 相对对服务器压力小；\n * 前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；\n\n缺点：\n\n * 初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；\n * 前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；\n * SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。\n\n\n38. TEMPLATE和JSX的有什么分别？\n\n对于 runtime 来说，只需要保证组件存在 render 函数即可，而有了预编译之后，只需要保证构建过程中生成 render 函数就可以。在 webpack\n中，使用vue-loader编译.vue文件，内部依赖的vue-template-compiler模块，在 webpack\n构建过程中，将template预编译成 render 函数。与 react\n类似，在添加了jsx的语法糖解析器babel-plugin-transform-vue-jsx之后，就可以直接手写render函数。\n\n所以，template和jsx的都是render的一种表现形式，不同的是：JSX相对于template而言，具有更高的灵活性，在复杂的组件中，更具有优势，而\ntemplate 虽然显得有些呆滞。但是 template 在代码结构上更符合视图与逻辑分离的习惯，更简单、更直观、更好维护。\n\n\n39. VUE初始化页面闪动问题\n\n使用vue开发时，在vue初始化之前，由于div是不归vue管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于{{message}}的字样，虽然一般情况下这个时间很短暂，但是还是有必要让解决这个问题的。\n\n首先：在css里加上以下代码：\n\n[v-cloak] {    display: none;}\n\n\n如果没有彻底解决问题，则在根元素加上style=\"display: none;\" :style=\"{display: 'block'}\"\n\n\n40. EXTEND 有什么作用\n\n这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 $mount 一起使用。\n\n// 创建组件构造器let Component = Vue.extend({  template: '<div>test</div>'})// 挂载到 #app 上new Component().$mount('#app')// 除了上面的方式，还可以用来扩展已有的组件let SuperComponent = Vue.extend(Component)new SuperComponent({    created() {        console.log(1)    }})new SuperComponent().$mount('#app')\n\n\n\n41. MIXIN 和 MIXINS 区别\n\nmixin 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。\n\nVue.mixin({    beforeCreate() {        // ...逻辑        // 这种方式会影响到每个组件的 beforeCreate 钩子函数    }})\n\n\n虽然文档不建议在应用中直接使用 mixin，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 ajax 或者一些工具函数等等。\n\nmixins 应该是最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins\n混入代码，比如上拉下拉加载数据这种逻辑等等。 另外需要注意的是 mixins\n混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并。\n\n\n42. MVVM的优缺点?\n\n优点:\n\n * 分离视图（View）和模型（Model），降低代码耦合，提⾼视图或者逻辑的重⽤性:\n   ⽐如视图（View）可以独⽴于Model变化和修改，⼀个ViewModel可以绑定不同的\"View\"上，当View变化的时候Model不可以不变，当Model变化的时候View也可以不变。你可以把⼀些视图逻辑放在⼀个ViewModel⾥⾯，让很多view重⽤这段视图逻辑\n * 提⾼可测试性: ViewModel的存在可以帮助开发者更好地编写测试代码\n * ⾃动更新dom: 利⽤双向绑定,数据更新后视图⾃动更新,让开发者从繁琐的⼿动dom中解放\n\n缺点:\n\n * Bug很难被调试:\n   因为使⽤双向绑定的模式，当你看到界⾯异常了，有可能是你View的代码有Bug，也可能是Model的代码有问题。数据绑定使得⼀个位置的Bug被快速传递到别的位置，要定位原始出问题的地⽅就变得不那么容易了。另外，数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的\n * ⼀个⼤的模块中model也会很⼤，虽然使⽤⽅便了也很容易保证了数据的⼀致性，当时⻓期持有，不释放内存就造成了花费更多的内存\n * 对于⼤型的图形应⽤程序，视图状态较多，ViewModel的构建和维护的成本都会⽐较⾼。\n\n\n二、生命周期\n\n\n1. 说一下VUE的生命周期\n\nVue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -> 渲染、更新 -> 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。\n\n 1. beforeCreate（创建前）：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher\n    都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。\n 2. created（创建后） ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods\n    等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 $el 属性。\n 3. beforeMount（挂载前）：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。此时还没有挂载html到页面上。\n 4. mounted（挂载后）：在el被新创建的 vm.$el\n    替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html\n    页面中。此过程中进行ajax交互。\n 5. beforeUpdate（更新前）：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。\n 6. updated（更新后） ：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件\n    DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\n 7. beforeDestroy（销毁前）：实例销毁之前调用。这一步，实例仍然完全可用，this 仍能获取到实例。\n 8. destroyed（销毁后）：实例销毁后调用，调用后，Vue\n    实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。\n\n另外还有 keep-alive 独有的生命周期，分别为 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 activated 钩子函数。\n\n\n2. VUE 子组件和父组件执行顺序\n\n加载渲染过程：\n\n 1. 父组件 beforeCreate\n 2. 父组件 created\n 3. 父组件 beforeMount\n 4. 子组件 beforeCreate\n 5. 子组件 created\n 6. 子组件 beforeMount\n 7. 子组件 mounted\n 8. 父组件 mounted\n\n更新过程：\n\n 1. 父组件 beforeUpdate\n 2. 子组件 beforeUpdate\n 3. 子组件 updated\n 4. 父组件 updated\n\n销毁过程：\n\n 1. 父组件 beforeDestroy\n 2. 子组件 beforeDestroy\n 3. 子组件 destroyed\n 4. 父组件 destoryed\n\n\n3. CREATED和MOUNTED的区别\n\n * created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。\n * mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。\n\n\n4. 一般在哪个生命周期请求异步数据\n\n我们可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data\n已经创建，可以将服务端端返回的数据进行赋值。\n\n推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：\n\n * 能更快获取到服务端数据，减少页面加载时间，用户体验更好；\n * SSR不支持 beforeMount 、mounted 钩子函数，放在 created 中有助于一致性。\n\n\n5. KEEP-ALIVE 中的生命周期哪些\n\nkeep-alive是 Vue 提供的一个内置组件，用来对组件进行缓存——在组件切换过程中将状态保留在内存中，防止重复渲染DOM。\n\n如果为一个组件包裹了 keep-alive，那么它会多出两个生命周期：deactivated、activated。同时，beforeDestroy 和\ndestroyed 就不会再被触发了，因为组件不会被真正销毁。\n\n当组件被换掉时，会被缓存到内存中、触发 deactivated 生命周期；当组件被切回来时，再去缓存里找这个组件、触发 activated钩子函数。\n\n\n三、组件通信\n\n组件通信的方式如下：\n\n\n（1） PROPS  /   $EMIT\n\n父组件通过props向子组件传递数据，子组件通过$emit和父组件通信\n\n1. 父组件向子组件传值\n\n * props只能是父组件向子组件进行传值，props使得父子组件之间形成了一个单向下行绑定。子组件的数据会随着父组件不断更新。\n * props 可以显示定义一个或一个以上的数据，对于接收的数据，可以是各种数据类型，同样也可以传递一个函数。\n * props属性名规则：若在props中使用驼峰形式，模板中需要使用短横线的形式\n\n// 父组件\n<template>\n    <div id=\"father\">\n        <son :msg=\"msgData\" :fn=\"myFunction\"></son>\n    </div>\n</template>\n\n<script>\nimport son from \"./son.vue\";\nexport default {\n    name: father,\n    data() {\n        msgData: \"父组件数据\";\n    },\n    methods: {\n        myFunction() {\n            console.log(\"vue\");\n        }\n    },\n    components: {\n        son\n    }\n};\n</script>\n\n\n// 子组件\n<template>\n    <div id=\"son\">\n        <p>{{msg}}</p>\n        <button @click=\"fn\">按钮</button>\n    </div>\n</template>\n<script>\nexport default {\n    name: \"son\",\n    props: [\"msg\", \"fn\"]\n};\n</script>\n\n\n2. 子组件向父组件传值\n\n * $emit绑定一个自定义事件，当这个事件被执行的时就会将参数传递给父组件，而父组件通过v-on监听并接收参数。\n\n// 父组件\n<template>\n  <div class=\"section\">\n    <com-article :articles=\"articleList\" @onEmitIndex=\"onEmitIndex\"></com-article>\n    <p>{{currentIndex}}</p>\n  </div>\n</template>\n\n<script>\nimport comArticle from './test/article.vue'\nexport default {\n  name: 'comArticle',\n  components: { comArticle },\n  data() {\n    return {\n      currentIndex: -1,\n      articleList: ['红楼梦', '西游记', '三国演义']\n    }\n  },\n  methods: {\n    onEmitIndex(idx) {\n      this.currentIndex = idx\n    }\n  }\n}\n</script>\n\n\n//子组件\n<template>\n  <div>\n    <div v-for=\"(item, index) in articles\" :key=\"index\" @click=\"emitIndex(index)\">{{item}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['articles'],\n  methods: {\n    emitIndex(index) {\n      this.$emit('onEmitIndex', index) // 触发父组件的方法，并传递参数index\n    }\n  }\n}\n</script>\n\n\n\n（2）EVENTBUS事件总线（$EMIT / $ON）\n\neventBus事件总线适用于父子组件、非父子组件等之间的通信，使用步骤如下： （1）创建事件中心管理组件之间的通信\n\n// event-bus.js\n\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n\n\n（2）发送事件 假设有两个兄弟组件firstCom和secondCom：\n\n<template>\n  <div>\n    <first-com></first-com>\n    <second-com></second-com>\n  </div>\n</template>\n\n<script>\nimport firstCom from './firstCom.vue'\nimport secondCom from './secondCom.vue'\nexport default {\n  components: { firstCom, secondCom }\n}\n</script>\n\n\n在firstCom组件中发送事件：\n\n<template>\n  <div>\n    <button @click=\"add\">加法</button>    \n  </div>\n</template>\n\n<script>\nimport {EventBus} from './event-bus.js' // 引入事件中心\n\nexport default {\n  data(){\n    return{\n      num:0\n    }\n  },\n  methods:{\n    add(){\n      EventBus.$emit('addition', {\n        num:this.num++\n      })\n    }\n  }\n}\n</script>\n\n\n（3）接收事件 在secondCom组件中发送事件：\n\n<template>\n  <div>求和: {{count}}</div>\n</template>\n\n<script>\nimport { EventBus } from './event-bus.js'\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  mounted() {\n    EventBus.$on('addition', param => {\n      this.count = this.count + param.num;\n    })\n  }\n}\n</script>\n\n\n在上述代码中，这就相当于将num值存贮在了事件总线中，在其他组件中可以直接访问。事件总线就相当于一个桥梁，不用组件通过它来通信。\n\n虽然看起来比较简单，但是这种方法也有不变之处，如果项目过大，使用这种方式进行通信，后期维护起来会很困难。\n\n\n（3）依赖注入（PROVIDE / INJECT）\n\n这种方式就是Vue中的依赖注入，该方法用于父子组件之间的通信。当然这里所说的父子不一定是真正的父子，也可以是祖孙组件，在层数很深的情况下，可以使用这种方法来进行传值。就不用一层一层的传递了。\n\nprovide / inject是Vue提供的两个钩子，和data、methods是同级的。并且provide的书写形式和data一样。\n\n * provide 钩子用来发送数据或方法\n * inject钩子用来接收数据或方法\n\n在父组件中：\n\nprovide() { \n    return {     \n        num: this.num  \n    };\n}\n\n\n在子组件中：\n\ninject: ['num']\n\n\n还可以这样写，这样写就可以访问父组件中的所有属性：\n\nprovide() {\n return {\n    app: this\n  };\n}\ndata() {\n return {\n    num: 1\n  };\n}\n\ninject: ['app']\nconsole.log(this.app.num)\n\n\n注意： 依赖注入所提供的属性是非响应式的。\n\n\n（3）REF / $REFS\n\n这种方式也是实现父子组件之间的通信。\n\nref： 这个属性用在子组件上，它的引用就指向了子组件的实例。可以通过实例来访问组件的数据和方法。\n\n在子组件中：\n\nexport default {\n  data () {\n    return {\n      name: 'JavaScript'\n    }\n  },\n  methods: {\n    sayHello () {\n      console.log('hello')\n    }\n  }\n}\n\n\n在父组件中：\n\n<template>\n  <child ref=\"child\"></component-a>\n</template>\n<script>\n  import child from './child.vue'\n  export default {\n    components: { child },\n    mounted () {\n      console.log(this.$refs.child.name);  // JavaScript\n      this.$refs.child.sayHello();  // hello\n    }\n  }\n</script>\n\n\n\n（4）$PARENT / $CHILDREN\n\n * 使用$parent可以让组件访问父组件的实例（访问的是上一级父组件的属性和方法）\n * 使用$children可以让组件访问子组件的实例，但是，$children并不能保证顺序，并且访问的数据也不是响应式的。\n\n在子组件中：\n\n<template>\n  <div>\n    <span>{{message}}</span>\n    <p>获取父组件的值为:  {{parentVal}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Vue'\n    }\n  },\n  computed:{\n    parentVal(){\n      return this.$parent.msg;\n    }\n  }\n}\n</script>\n\n\n在父组件中：\n\n// 父组件中\n<template>\n  <div class=\"hello_world\">\n    <div>{{msg}}</div>\n    <child></child>\n    <button @click=\"change\">点击改变子组件值</button>\n  </div>\n</template>\n\n<script>\nimport child from './child.vue'\nexport default {\n  components: { child },\n  data() {\n    return {\n      msg: 'Welcome'\n    }\n  },\n  methods: {\n    change() {\n      // 获取到子组件\n      this.$children[0].message = 'JavaScript'\n    }\n  }\n}\n</script>\n\n\n在上面的代码中，子组件获取到了父组件的parentVal值，父组件改变了子组件中message的值。 需要注意：\n\n * 通过$parent访问到的是上一级父组件的实例，可以使用$root来访问根组件的实例\n * 在组件中使用$children拿到的是所有的子组件的实例，它是一个数组，并且是无序的\n * 在根组件#app上拿$parent得到的是new\n   Vue()的实例，在这实例上再拿$parent得到的是undefined，而在最底层的子组件拿$children是个空数组\n * $children 的值是数组，而$parent是个对象\n\n\n（5）$ATTRS / $LISTENERS\n\n考虑一种场景，如果A是B组件的父组件，B是C组件的父组件。如果想要组件A给组件C传递数据，这种隔代的数据，该使用哪种方式呢？\n\n如果是用props/$emit来一级一级的传递，确实可以完成，但是比较复杂；如果使用事件总线，在多人开发或者项目较大的时候，维护起来很麻烦；如果使用Vuex，的确也可以，但是如果仅仅是传递数据，那可能就有点浪费了。\n\n针对上述情况，Vue引入了$attrs / $listeners，实现组件之间的跨代通信。\n\n先来看一下inheritAttrs，它的默认值true，继承所有的父组件属性除props之外的所有属性；inheritAttrs：false\n只继承class属性 。\n\n * $attrs：继承所有的父组件属性（除了prop传递的属性、class 和 style ），一般用在子组件的子元素上\n * $listeners：该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 v-on=\"$listeners\"\n   将所有的事件监听器指向这个组件的某个特定的子元素。（相当于子组件继承父组件的事件）\n\nA组件（APP.vue）：\n\n<template>\n    <div id=\"app\">\n        //此处监听了两个事件，可以在B组件或者C组件中直接触发 \n        <child1 :p-child1=\"child1\" :p-child2=\"child2\" @test1=\"onTest1\" @test2=\"onTest2\"></child1>\n    </div>\n</template>\n<script>\nimport Child1 from './Child1.vue';\nexport default {\n    components: { Child1 },\n    methods: {\n        onTest1() {\n            console.log('test1 running');\n        },\n        onTest2() {\n            console.log('test2 running');\n        }\n    }\n};\n</script>\n\n\nB组件（Child1.vue）：\n\n<template>\n    <div class=\"child-1\">\n        <p>props: {{pChild1}}</p>\n        <p>$attrs: {{$attrs}}</p>\n        <child2 v-bind=\"$attrs\" v-on=\"$listeners\"></child2>\n    </div>\n</template>\n<script>\nimport Child2 from './Child2.vue';\nexport default {\n    props: ['pChild1'],\n    components: { Child2 },\n    inheritAttrs: false,\n    mounted() {\n        this.$emit('test1'); // 触发APP.vue中的test1方法\n    }\n};\n</script>\n\n\nC 组件 (Child2.vue)：\n\n<template>\n    <div class=\"child-2\">\n        <p>props: {{pChild2}}</p>\n        <p>$attrs: {{$attrs}}</p>\n    </div>\n</template>\n<script>\nexport default {\n    props: ['pChild2'],\n    inheritAttrs: false,\n    mounted() {\n        this.$emit('test2');// 触发APP.vue中的test2方法\n    }\n};\n</script>\n\n\n在上述代码中：\n\n * C组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性\n * 在B组件中通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的）\n\n\n（6）总结\n\n（1）父子组件间通信\n\n * 子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事件来向父组件发送数据。\n * 通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组件，这样也可以实现通信。\n * 使用 provide/inject，在父组件中通过 provide提供变量，在子组件中通过 inject\n   来将变量注入到组件中。不论子组件有多深，只要调用了 inject 那么就可以注入 provide中的数据。\n\n（2）兄弟组件间通信\n\n * 使用 eventBus 的方法，它的本质是通过创建一个空的 Vue\n   实例来作为消息传递的对象，通信的组件引入这个实例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。\n * 通过 $parent/$refs 来获取到兄弟组件，也可以进行通信。\n\n（3）任意组件之间\n\n * 使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。\n\n如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候可以使用 vuex ，vuex\n的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。","frontMatter":{"title":"VUE上"}},{"name":"VUE下","path":"参考八股文/VUE下.html","texts":"四、路由\n\n\n1. VUE-ROUTER 的懒加载如何实现\n\n非懒加载：\n\nimport List from '@/components/list.vue'\nconst router = new VueRouter({\n  routes: [\n    { path: '/list', component: List }\n  ]\n})\n\n\n（1）方案一(常用)：使用箭头函数+import动态加载\n\nconst List = () => import('@/components/list.vue')\nconst router = new VueRouter({\n  routes: [\n    { path: '/list', component: List }\n  ]\n})\n\n\n（2）方案二：使用箭头函数+require动态加载\n\nconst router = new Router({\n  routes: [\n   {\n     path: '/list',\n     component: resolve => require(['@/components/list'], resolve)\n   }\n  ]\n})\n\n\n（3）方案三：使用webpack的require.ensure技术，也可以实现按需加载。\n这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。\n\n// r就是resolve\nconst List = r => require.ensure([], () => r(require('@/components/list')), 'list');\n// 路由也是正常的写法  这种是官方推荐的写的 按模块划分懒加载 \nconst router = new Router({\n  routes: [\n  {\n    path: '/list',\n    component: List,\n    name: 'list'\n  }\n ]\n}))\n\n\n\n2. 路由的HASH和HISTORY模式的区别\n\nVue-Router有两种模式：hash模式和history模式。默认的路由模式是hash模式。\n\n1. HASH模式\n\n简介： hash模式是开发中默认的模式，它的URL带着一个#，例如：http://www.abc.com/#/vue，它的hash值就是#/vue。\n\n特点：hash值会出现在URL里面，但是不会出现在HTTP请求中，对后端完全没有影响。所以改变hash值，不会重新加载页面。这种模式的浏览器支持度很好，低版本的IE浏览器也支持这种模式。hash路由被称为是前端路由，已经成为SPA（单页面应用）的标配。\n\n原理： hash模式的主要原理就是onhashchange()事件：\n\nwindow.onhashchange = function(event){\n    console.log(event.oldURL, event.newURL);\n    let hash = location.hash.slice(1);\n}\n\n\n使用onhashchange()事件的好处就是，在页面的hash值发生变化时，无需向后端发起请求，window就可以监听事件的改变，并按规则加载相应的代码。除此之外，hash值变化对应的URL都会被浏览器记录下来，这样浏览器就能实现页面的前进和后退。虽然是没有请求后端服务器，但是页面的hash值和对应的URL关联起来了。\n\n2. HISTORY模式\n\n简介：\nhistory模式的URL中没有#，它使用的是传统的路由分发模式，即用户在输入一个URL时，服务器会接收这个请求，并解析这个URL，然后做出相应的逻辑处理。\n特点：\n当使用history模式时，URL就像这样：http://abc.com/user/id。相比hash模式更加好看。但是，history模式需要后台配置支持。如果后台没有正确配置，访问时会返回404。\nAPI： history api可以分为两大部分，切换历史状态和修改历史状态：\n\n * 修改历史状态：包括了 HTML5 History Interface 中新增的 pushState() 和 replaceState()\n   方法，这两个方法应用于浏览器的历史记录栈，提供了对历史记录进行修改的功能。只是当他们进行修改时，虽然修改了url，但浏览器不会立即向后端发送请求。如果要做到改变url但又不刷新页面的效果，就需要前端用上这两个API。\n * 切换历史状态： 包括forward()、back()、go()三个方法，对应浏览器的前进，后退，跳转操作。\n\n虽然history模式丢弃了丑陋的#。但是，它也有自己的缺点，就是在刷新页面的时候，如果没有相应的路由或资源，就会刷出404来。\n\n如果想要切换到history模式，就要进行以下配置（后端也要进行配置）：\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n\n\n3. 两种模式对比\n\n调用 history.pushState() 相比于直接修改 hash，存在以下优势:\n\n * pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 # 后面的部分，因此只能设置与当前 URL\n   同文档的 URL；\n * pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash\n   设置的新值必须与原来不一样才会触发动作将记录添加到栈中；\n * pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串；\n * pushState() 可额外设置 title 属性供后续使用。\n * hash模式下，仅hash符号之前的url会被包含在请求中，后端如果没有做到对路由的全覆盖，也不会返回404错误；history模式下，前端的url必须和实际向后端发起请求的url一致，如果没有对用的路由处理，将返回404错误。\n\nhash模式和history模式都有各自的优势和缺陷，还是要根据实际情况选择性的使用。\n\n\n3. 如何获取页面的HASH变化\n\n（1）监听$route的变化\n\n// 监听,当路由发生变化的时候执行\nwatch: {\n  $route: {\n    handler: function(val, oldVal){\n      console.log(val);\n    },\n    // 深度观察监听\n    deep: true\n  }\n},\n\n\n（2）window.location.hash读取#值 window.location.hash\n的值可读可写，读取来判断状态是否改变，写入时可以在不重载网页的前提下，添加一条历史访问记录。\n\n\n4. $ROUTE 和$ROUTER 的区别\n\n * $route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数\n * $router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。\n\n\n5. 如何定义动态路由？如何获取传过来的动态参数？\n\n（1）param方式\n\n * 配置路由格式：/router/:id\n * 传递的方式：在path后面跟上对应的值\n * 传递后形成的路径：/router/123\n\n1）路由定义\n\n//在APP.vue中\n<router-link :to=\"'/user/'+userId\" replace>用户</router-link>    \n\n//在index.js\n{\n   path: '/user/:userid',\n   component: User,\n},\n\n\n2）路由跳转\n\n// 方法1：\n<router-link :to=\"{ name: 'users', params: { uname: wade }}\">按钮</router-link\n\n// 方法2：\nthis.$router.push({name:'users',params:{uname:wade}})\n\n// 方法3：\nthis.$router.push('/user/' + wade)\n\n\n3）参数获取 通过 $route.params.userid 获取传递的值\n\n（2）query方式\n\n * 配置路由格式：/router，也就是普通配置\n * 传递的方式：对象中使用query的key作为传递方式\n * 传递后形成的路径：/route?id=123\n\n1）路由定义\n\n//方式1：直接在router-link 标签上以对象的形式\n<router-link :to=\"{path:'/profile',query:{name:'why',age:28,height:188}}\">档案</router-link>\n\n// 方式2：写成按钮以点击事件形式\n<button @click='profileClick'>我的</button>    \n\nprofileClick(){\n  this.$router.push({\n    path: \"/profile\",\n    query: {\n        name: \"kobi\",\n        age: \"28\",\n        height: 198\n    }\n  });\n}\n\n\n2）跳转方法\n\n// 方法1：\n<router-link :to=\"{ name: 'users', query: { uname: james }}\">按钮</router-link>\n\n// 方法2：\nthis.$router.push({ name: 'users', query:{ uname:james }})\n\n// 方法3：\n<router-link :to=\"{ path: '/user', query: { uname:james }}\">按钮</router-link>\n\n// 方法4：\nthis.$router.push({ path: '/user', query:{ uname:james }})\n\n// 方法5：\nthis.$router.push('/user?uname=' + jsmes)\n\n\n3）获取参数\n\n通过$route.query 获取传递的值\n\n\n\n6. VUE-ROUTER 路由钩子在生命周期的体现\n\n一、Vue-Router导航守卫\n\n有的时候，需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。\n为此有很多种方法可以植入路由的导航过程：全局的，单个路由独享的，或者组件级的\n\n 1. 全局路由钩子\n\nvue-router全局有三个路由钩子;\n\n * router.beforeEach 全局前置守卫 进入路由之前\n * router.beforeResolve 全局解析守卫（2.5.0+）在 beforeRouteEnter 调用之后调用\n * router.afterEach 全局后置钩子 进入路由之后\n\n具体使用∶\n\n * beforeEach（判断是否登录了，没登录就跳转到登录页）\n\nrouter.beforeEach((to, from, next) => {  \n    let ifInfo = Vue.prototype.$common.getSession('userData');  // 判断是否登录的存储信息\n    if (!ifInfo) { \n        // sessionStorage里没有储存user信息    \n        if (to.path == '/') { \n            //如果是登录页面路径，就直接next()      \n            next();    \n        } else { \n            //不然就跳转到登录      \n            Message.warning(\"请重新登录！\");     \n            window.location.href = Vue.prototype.$loginUrl;    \n        }  \n    } else {    \n        return next();  \n    }\n})\n\n\n * afterEach （跳转之后滚动条回到顶部）\n\nrouter.afterEach((to, from) => {  \n    // 跳转之后滚动条回到顶部  \n    window.scrollTo(0,0);\n});\n\n\n 2. 单个路由独享钩子\n\nbeforeEnter 如果不想全局配置守卫的话，可以为某些路由单独配置守卫，有三个参数∶ to、from、next\n\nexport default [    \n    {        \n        path: '/',        \n        name: 'login',        \n        component: login,        \n        beforeEnter: (to, from, next) => {          \n            console.log('即将进入登录页面')          \n            next()        \n        }    \n    }\n]\n\n\n 3. 组件内钩子\n\nbeforeRouteUpdate、beforeRouteEnter、beforeRouteLeave\n\n这三个钩子都有三个参数∶to、from、next\n\n * beforeRouteEnter∶ 进入组件前触发\n * beforeRouteUpdate∶ 当前地址改变并且改组件被复用时触发，举例来说，带有动态参数的路径foo/∶id，在 /foo/1 和 /foo/2\n   之间跳转的时候，由于会渲染同样的foa组件，这个钩子在这种情况下就会被调用\n * beforeRouteLeave∶ 离开组件被调用\n\n注意点，beforeRouteEnter组件内还访问不到this，因为该守卫执行前组件实例还没有被创建，需要传一个回调给 next来访问，例如：\n\nbeforeRouteEnter(to, from, next) {      \n    next(target => {        \n        if (from.path == '/classProcess') {          \n            target.isFromProcess = true        \n        }      \n    })    \n}\n\n\n二、Vue路由钩子在生命周期函数的体现\n\n 1. 完整的路由导航解析流程（不包括其他生命周期）\n\n * 触发进入其他路由。\n * 调用要离开路由的组件守卫beforeRouteLeave\n * 调用局前置守卫∶ beforeEach\n * 在重用的组件里调用 beforeRouteUpdate\n * 调用路由独享守卫 beforeEnter。\n * 解析异步路由组件。\n * 在将要进入的路由组件中调用 beforeRouteEnter\n * 调用全局解析守卫 beforeResolve\n * 导航被确认。\n * 调用全局后置钩子的 afterEach 钩子。\n * 触发DOM更新（mounted）。\n * 执行beforeRouteEnter 守卫中传给 next 的回调函数\n\n 2. 触发钩子的完整顺序\n\n路由导航、keep-alive、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件∶\n\n * beforeRouteLeave：路由组件的组件离开路由前钩子，可取消路由离开。\n * beforeEach：路由全局前置守卫，可用于登录验证、全局路由loading等。\n * beforeEnter：路由独享守卫\n * beforeRouteEnter：路由组件的组件进入路由前钩子。\n * beforeResolve：路由全局解析守卫\n * afterEach：路由全局后置钩子\n * beforeCreate：组件生命周期，不能访问tAis。\n * created;组件生命周期，可以访问tAis，不能访问dom。\n * beforeMount：组件生命周期\n * deactivated：离开缓存组件a，或者触发a的beforeDestroy和destroyed组件销毁钩子。\n * mounted：访问/操作dom。\n * activated：进入缓存组件，进入a的嵌套子组件（如果有的话）。\n * 执行beforeRouteEnter回调函数next。\n\n 3. 导航行为被触发到导航完成的整个过程\n\n * 导航行为被触发，此时导航未被确认。\n * 在失活的组件里调用离开守卫 beforeRouteLeave。\n * 调用全局的 beforeEach守卫。\n * 在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。\n * 在路由配置里调用 beforeEnteY。\n * 解析异步路由组件（如果有）。\n * 在被激活的组件里调用 beforeRouteEnter。\n * 调用全局的 beforeResolve 守卫（2.5+），标示解析阶段完成。\n * 导航被确认。\n * 调用全局的 afterEach 钩子。\n * 非重用组件，开始组件实例的生命周期：beforeCreate&created、beforeMount&mounted\n * 触发 DOM 更新。\n * 用创建好的实例调用 beforeRouteEnter守卫中传给 next 的回调函数。\n * 导航完成\n\n\n7. VUE-ROUTER跳转和LOCATION.HREF有什么区别\n\n * 使用 location.href= /url 来跳转，简单方便，但是刷新了页面；\n * 使用 history.pushState( /url ) ，无刷新页面，静态跳转；\n * 引进 router ，然后使用 router.push( /url ) 来跳转，使用了 diff 算法，实现了按需加载，减少了 dom 的消耗。其实使用\n   router 跳转和使用 history.pushState() 没什么差别的，因为vue-router就是用了 history.pushState()\n   ，尤其是在history模式下。\n\n\n8. PARAMS和QUERY的区别\n\n用法：query要用path来引入，params要用name来引入，接收参数都是类似的，分别是 this.$route.query.name 和\nthis.$route.params.name 。\n\nurl地址显示：query更加类似于ajax中get传参，params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示\n\n注意：query刷新不会丢失query里面的数据 params刷新会丢失 params里面的数据。\n\n\n9. VUE-ROUTER 导航守卫有哪些\n\n * 全局前置/钩子：beforeEach、beforeResolve、afterEach\n * 路由独享的守卫：beforeEnter\n * 组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave\n\n\n10. 对前端路由的理解\n\n在前端技术早期，一个 url 对应一个页面，如果要从 A 页面切换到 B\n页面，那么必然伴随着页面的刷新。这个体验并不好，不过在最初也是无奈之举——用户只有在刷新页面的情况下，才可以重新去请求数据。\n\n后来，改变发生了——Ajax 出现了，它允许人们在不刷新页面的情况下发起请求；与之共生的，还有“不刷新页面即可更新页面内容”这种需求。在这样的背景下，出现了\nSPA（单页面应用）。\n\nSPA极大地提升了用户体验，它允许页面在不刷新的情况下更新页面内容，使内容的切换更加流畅。但是在 SPA\n诞生之初，人们并没有考虑到“定位”这个问题——在内容切换前后，页面的 URL 都是一样的，这就带来了两个问题：\n\n * SPA\n   其实并不知道当前的页面“进展到了哪一步”。可能在一个站点下经过了反复的“前进”才终于唤出了某一块内容，但是此时只要刷新一下页面，一切就会被清零，必须重复之前的操作、才可以重新对内容进行定位——SPA\n   并不会“记住”你的操作。\n * 由于有且仅有一个 URL 给页面做映射，这对 SEO 也不够友好，搜索引擎无法收集全面的信息\n\n为了解决这个问题，前端路由出现了。\n\n前端路由可以帮助我们在仅有一个页面的情况下，“记住”用户当前走到了哪一步——为 SPA\n中的各个视图匹配一个唯一标识。这意味着用户前进、后退触发的新内容，都会映射到不同的 URL 上去。此时即便他刷新页面，因为当前的 URL\n可以标识出他所处的位置，因此内容也不会丢失。\n\n那么如何实现这个目的呢？首先要解决两个问题：\n\n * 当用户刷新页面时，浏览器会默认根据当前 URL 对资源进行重新定位（发送请求）。这个动作对 SPA 是不必要的，因为我们的 SPA\n   作为单页面，无论如何也只会有一个资源与之对应。此时若走正常的请求-刷新流程，反而会使用户的前进后退操作无法被记录。\n * 单页面应用对服务端来说，就是一个URL、一套资源，那么如何做到用“不同的URL”来映射不同的视图内容呢？\n\n从这两个问题来看，服务端已经完全救不了这个场景了。所以要靠咱们前端自力更生，不然怎么叫“前端路由”呢？作为前端，可以提供这样的解决思路：\n\n * 拦截用户的刷新操作，避免服务端盲目响应、返回不符合预期的资源内容。把刷新这个动作完全放到前端逻辑里消化掉。\n * 感知 URL 的变化。这里不是说要改造 URL、凭空制造出 N 个 URL 来。而是说 URL 还是那个\n   URL，只不过我们可以给它做一些微小的处理——这些处理并不会影响 URL\n   本身的性质，不会影响服务器对它的识别，只有我们前端感知的到。一旦我们感知到了，我们就根据这些变化、用 JS 去给它生成不同的内容。\n\n\n五、VUEX\n\n\n1. VUEX 的原理\n\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store”\n基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\n\n * Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n * 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便地跟踪每一个状态的变化。\n\nVuex为Vue Components建立起了一个完整的生态圈，包括开发中的API调用一环。 （1)核心流程中的主要功能：\n\n * Vue Components 是 vue 组件，组件会触发（dispatch）一些事件或动作，也就是图中的 Actions;\n * 在组件中发出的动作，肯定是想获取或者改变数据的，但是在 vuex 中，数据是集中管理的，不能直接去更改数据，所以会把这个动作提交（Commit）到\n   Mutations 中;\n * 然后 Mutations 就去改变（Mutate）State 中的数据;\n * 当 State 中的数据被改变之后，就会重新渲染（Render）到 Vue Components 中去，组件展示更新后的数据，完成一个流程。\n\n（2）各模块在核心流程中的主要功能：\n\n * Vue Components∶ Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。\n * dispatch∶操作行为触发方法，是唯一能执行action的方法。\n * actions∶ 操作行为处理模块。负责处理Vue\n   Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。\n * commit∶状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。\n * mutations∶状态改变操作方法。是Vuex修改state的唯一推荐方法，其他修改方式在严格模式下将会报错。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。\n * state∶\n   页面状态管理容器对象。集中存储Vuecomponents中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。\n * getters∶ state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue\n   Components通过该方法读取全局state对象。\n\n\n2. VUEX中ACTION和MUTATION的区别\n\nmutation中的操作是一系列的同步函数，用于修改state中的变量的的状态。当使用vuex时需要通过commit来提交需要操作的内容。mutation\n非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数\n(handler)。这个回调函数就是实际进行状态更改的地方，并且它会接受 state 作为第一个参数：\n\nconst store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    increment (state) {\n      state.count++      // 变更状态\n    }\n  }\n})\n\n\n当触发一个类型为 increment 的 mutation 时，需要调用此函数：\n\nstore.commit('increment')\n\n\n而Action类似于mutation，不同点在于：\n\n * Action 可以包含任意异步操作。\n * Action 提交的是 mutation，而不是直接变更状态。\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  },\n  actions: {\n    increment (context) {\n      context.commit('increment')\n    }\n  }\n})\n\n\nAction 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个\nmutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。 所以，两者的不同点如下：\n\n * Mutation专注于修改State，理论上是修改State的唯一途径；Action业务代码、异步请求。\n * Mutation：必须同步执行；Action：可以异步，但不能直接操作State。\n * 在视图更新时，先触发actions，actions再触发mutation\n * mutation的参数是state，它包含store中的数据；store的参数是context，它是 state 的父级，包含 state、getters\n\n\n3. VUEX 和 LOCALSTORAGE 的区别\n\n（1）最重要的区别\n\n * vuex存储在内存中\n * localstorage 则以文件的方式存储在本地，只能存储字符串类型的数据，存储对象需要 JSON的stringify和parse方法进行处理。\n   读取内存比读取硬盘速度要快\n\n（2）应用场景\n\n * Vuex 是一个专为 Vue.js\n   应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。vuex用于组件之间的传值。\n * localstorage是本地存储，是将数据存储到浏览器的方法，一般是在跨页面传递数据时使用 。\n * Vuex能做到数据的响应式，localstorage不能\n\n（3）永久性\n\n刷新页面时vuex存储的值会丢失，localstorage不会。\n\n注意：\n对于不变的数据确实可以用localstorage可以代替vuex，但是当两个组件共用一个数据源（对象或数组）时，如果其中一个组件改变了该数据源，希望另一个组件响应该变化时，localstorage无法做到，原因就是区别1。\n\n\n4. REDUX 和 VUEX 有什么区别，它们的共同思想\n\n（1）Redux 和 Vuex区别\n\n * Vuex改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch，只需在对应的mutation函数里改变state值即可\n * Vuex由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可\n * Vuex数据流的顺序是∶View调用store.commit提交对应的请求到Store中对应的mutation函数->store改变（vue检测到数据变化自动渲染）\n\n通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变;取消了action概念，不必传入特定的\naction形式进行指定变更;弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易;\n\n（2）共同思想\n\n * 单—的数据源\n * 变化可以预测\n\n本质上：redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案;\n形式上：vuex借鉴了redux，将store作为全局的数据中心，进行mode管理;\n\n\n5. 为什么要用 VUEX 或者 REDUX\n\n由于传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致代码无法维护。\n\n所以需要把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，组件树构成了一个巨大的\"视图\"，不管在树的哪个位置，任何组件都能获取状态或者触发行为。\n\n另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，代码将会变得更结构化且易维护。\n\n\n6. VUEX有哪几种属性？\n\n有五种，分别是 State、 Getter、Mutation 、Action、 Module\n\n * state => 基本数据(数据源存放地)\n * getters => 从基本数据派生出来的数据\n * mutations => 提交更改数据的方法，同步\n * actions => 像一个装饰器，包裹mutations，使之可以异步。\n * modules => 模块化Vuex\n\n\n7. VUEX和单纯的全局对象有什么区别？\n\n * Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n * 不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit)\n   mutation。这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。\n\n\n8. 为什么 VUEX 的 MUTATION 中不能做异步操作？\n\n * Vuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交\n   mutation实现，这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。\n * 每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel\n   了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。\n\n\n9. VUEX的严格模式是什么,有什么作用，如何开启？\n\n在严格模式下，无论何时发生了状态变更且不是由mutation函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。\n\n在Vuex.Store 构造器选项中开启,如下\n\nconst store = new Vuex.Store({\n    strict:true,\n})\n\n\n\n10. 如何在组件中批量使用VUEX的GETTER属性\n\n使用mapGetters辅助函数, 利用对象展开运算符将getter混入computed 对象中\n\nimport {mapGetters} from 'vuex'\nexport default{\n    computed:{\n        ...mapGetters(['total','discountTotal'])\n    }\n}\n\n\n\n11. 如何在组件中重复使用VUEX的MUTATION\n\n使用mapMutations辅助函数,在组件中这么使用\n\nimport { mapMutations } from 'vuex'\nmethods:{\n    ...mapMutations({\n        setNumber:'SET_NUMBER',\n    })\n}\n\n\n然后调用this.setNumber(10)相当调用this.$store.commit('SET_NUMBER',10)\n\n\n六、VUE 3.0\n\n\n1. VUE3.0有什么更新\n\n（1）监测机制的改变\n\n * 3.0 将带来基于代理 Proxy的 observer 实现，提供全语言覆盖的反应性跟踪。\n * 消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：\n\n（2）只能监测属性，不能监测对象\n\n * 检测属性的添加和删除；\n * 检测数组索引和长度的变更；\n * 支持 Map、Set、WeakMap 和 WeakSet。\n\n（3）模板\n\n * 作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。\n * 同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。\n\n（4）对象式的组件声明方式\n\n * vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript\n   的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。\n * 3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易\n\n（5）其它方面的更改\n\n * 支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。\n * 支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。\n * 基于 tree shaking 优化，提供了更多的内置功能。\n\n\n2. DEFINEPROPERTY和PROXY的区别\n\nVue 在实例初始化时遍历 data 中的所有属性，并使用 Object.defineProperty 把这些属性全部转为\ngetter/setter。这样当追踪数据发生变化时，setter 会被自动调用。\n\nObject.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。\n\n但是这样做有以下问题：\n\n 1. 添加或删除对象的属性时，Vue 检测不到。因为添加或删除的对象没有在初始化进行响应式处理，只能通过$set\n    来调用Object.defineProperty()处理。\n 2. 无法监控到数组下标和长度的变化。\n\nVue3 使用 Proxy 来监控数据的变化。Proxy 是 ES6\n中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。相对于Object.defineProperty()，其有以下特点：\n\n 1. Proxy 直接代理整个对象而非对象属性，这样只需做一层代理就可以监听同级结构下的所有属性变化，包括新增属性和删除属性。\n 2. Proxy 可以监听数组的变化。\n\n\n3. VUE3.0 为什么要用 PROXY？\n\n在 Vue2 中， 0bject.defineProperty 会改变原始数据，而 Proxy 是创建对象的虚拟表示，并提供 set 、get 和\ndeleteProperty 等处理器，这些处理器可在访问或修改原始对象上的属性时进行拦截，有以下特点∶\n\n * 不需用使用 Vue.$set 或 Vue.$delete 触发响应式。\n * 全方位的数组变化检测，消除了Vue2 无效的边界情况。\n * 支持 Map，Set，WeakMap 和 WeakSet。\n\nProxy 实现的响应式原理与 Vue2的实现原理相同，实现方式大同小异∶\n\n * get 收集依赖\n * Set、delete 等触发依赖\n * 对于集合类型，就是对集合对象的方法做一层包装：原方法执行后执行依赖相关的收集或触发逻辑。\n\n\n4. VUE 3.0 中的 VUE COMPOSITION API？\n\n在 Vue2 中，代码是 Options API 风格的，也就是通过填充 (option) data、methods、computed 等属性来完成一个 Vue\n组件。这种风格使得 Vue 相对于 React极为容易上手，同时也造成了几个问题：\n\n 1. 由于 Options API 不够灵活的开发方式，使得Vue开发缺乏优雅的方法来在组件间共用代码。\n 2. Vue 组件过于依赖this上下文，Vue 背后的一些小技巧使得 Vue 组件的开发看起来与 JavaScript 的开发原则相悖，比如在methods\n    中的this竟然指向组件实例来不指向methods所在的对象。这也使得 TypeScript 在Vue2 中很不好用。\n\n于是在 Vue3 中，舍弃了 Options API，转而投向 Composition API。Composition API本质上是将 Options API\n背后的机制暴露给用户直接使用，这样用户就拥有了更多的灵活性，也使得 Vue3 更适合于 TypeScript 结合。\n\n如下，是一个使用了 Vue Composition API 的 Vue3 组件：\n\n<template>\n  <button @click=\"increment\">\n    Count: {{ count }}\n  </button>\n</template>\n \n<script>\n// Composition API 将组件属性暴露为函数，因此第一步是导入所需的函数\nimport { ref, computed, onMounted } from 'vue'\n \nexport default {\n  setup() {\n// 使用 ref 函数声明了称为 count 的响应属性，对应于Vue2中的data函数\n    const count = ref(0)\n \n// Vue2中需要在methods option中声明的函数，现在直接声明\n    function increment() {\n      count.value++\n    }\n // 对应于Vue2中的mounted声明周期\n    onMounted(() => console.log('component mounted!'))\n \n    return {\n      count,\n      increment\n    }\n  }\n}\n</script>\n\n\n显而易见，Vue Composition API 使得 Vue3 的开发风格更接近于原生 JavaScript，带给开发者更多地灵活性\n\n\n5. COMPOSITION API与REACT HOOK很像，区别是什么\n\n从React Hook的实现角度看，React\nHook是根据useState调用的顺序来确定下一次重渲染时的state是来源于哪个useState，所以出现了以下限制\n\n * 不能在循环、条件、嵌套函数中调用Hook\n * 必须确保总是在你的React函数的顶层调用Hook\n * useEffect、useMemo等函数必须手动确定依赖关系\n\n而Composition API是基于Vue的响应式系统实现的，与React Hook的相比\n\n * 声明在setup函数内，一次组件实例化只调用一次setup，而React\n   Hook每次重渲染都需要调用Hook，使得React的GC比Vue更有压力，性能也相对于Vue来说也较慢\n * Compositon API的调用不需要顾虑调用顺序，也可以在循环、条件、嵌套函数中使用\n * 响应式系统自动实现了依赖收集，进而组件的部分的性能优化由Vue内部自己完成，而React\n   Hook需要手动传入依赖，而且必须必须保证依赖的顺序，让useEffect、useMemo等函数正确的捕获依赖变量，否则会由于依赖不正确使得组件性能下降。\n\n虽然Compositon API看起来比React Hook好用，但是其设计思想也是借鉴React Hook的。\n\n\n七、虚拟DOM\n\n\n1. 对虚拟DOM的理解？\n\n从本质上来说，Virtual\nDom是一个JavaScript对象，通过对象的方式来表示DOM结构。将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。\n\n虚拟DOM是对DOM的抽象，这个对象是更加轻量级的对\nDOM的描述。它设计的最初目的，就是更好的跨平台，比如Node.js就没有DOM，如果想实现SSR，那么一个方式就是借助虚拟DOM，因为虚拟DOM本身是js对象。\n在代码渲染到页面之前，vue会把代码转换成一个对象（虚拟\nDOM）。以对象的形式来描述真实DOM结构，最终渲染到页面。在每次数据发生变化前，虚拟DOM都会缓存一份，变化之时，现在的虚拟DOM会与缓存的虚拟DOM进行比较。在vue内部封装了diff算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。\n\n另外现代前端框架的一个基本要求就是无须手动操作DOM，一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率。\n\n\n2. 虚拟DOM的解析过程\n\n虚拟DOM的解析过程：\n\n * 首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children\n   这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。\n * 当页面的状态发生改变，需要对页面的 DOM\n   的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。\n * 最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。\n\n\n3. 为什么要用虚拟DOM\n\n（1）保证性能下限，在不进行手动优化的情况下，提供过得去的性能 看一下页面渲染的流程：解析HTML -> 生成DOM -> 生成 CSSOM -> Layout\n-> Paint -> Compiler 下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶\n\n * 真实DOM∶ 生成HTML字符串＋重建所有的DOM元素\n * 虚拟DOM∶ 生成vNode+ DOMDiff＋必要的dom更新\n\nVirtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶\n框架给你的保证是，你不需要手动优化的情况下，依然可以给你提供过得去的性能。 （2）跨平台 Virtual\nDOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。\n\n\n4. 虚拟DOM真的比真实DOM性能好吗\n\n * 首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢。\n * 正如它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。\n\n\n5. DIFF算法的原理\n\n在新老虚拟DOM对比时：\n\n * 首先，对比节点本身，判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换\n * 如果为相同节点，进行patchVnode，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)\n * 比较如果都有子节点，则进行updateChildren，判断如何对这些新老节点的子节点进行操作（diff核心）。\n * 匹配时，找到相同的子节点，递归比较子节点\n\n在diff中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从O(n3)降低值O(n)，也就是说，只有当新旧children都为多个子节点时才需要用核心的Diff算法进行同层级比较。\n\n\n6. VUE中KEY的作用\n\nvue 中 key 值的作用可以分为两种情况来考虑：\n\n * 第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用 v-if\n   来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input\n   元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key\n   的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。\n * 第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue\n   不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue\n   跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。\n\nkey 是为 Vue 中 vnode 的唯一标记，通过这个 key，diff 操作可以更准确、更快速\n\n * 更准确：因为带 key 就不是就地复用了，在 sameNode 函数a.key === b.key对比中可以避免就地复用的情况。所以会更加准确。\n * 更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快\n\n\n7. 为什么不建议用INDEX作为KEY?\n\n使用index 作为 key和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2...这样排列，导致 Vue\n会复用错误的旧子节点，做很多额外的工作。","frontMatter":{"title":"VUE下"}}]},{"tableName":"学习笔记","blogList":[{"name":"说明","path":"学习笔记/说明.html","texts":"关键字和一图流文档用来提醒\n\nchatGPT专辑则是解释理解作用\n\n其他的是看了资料后尝试用口语模拟面试回答问题","frontMatter":{"title":"说明","index":1,"publishTime":"2023/7/25"}},{"name":"关键字","path":"学习笔记/关键字.html","texts":"记录了一些关键字，方便联想\n\n\n网络协议\n\nhttp，https，tcp，udp，websocket\n\n\n网络\n\n原理，请求方式，请求头，响应头，http2.0，http状态码，cookie，sessionStorage，localStorage，keepAlive，跨域\n\n\n编程\n\n简单说明各种语言的区别(C++，java，Python，go，Rust，JavaScript)\n\n\n前端\n\n图片的懒加载和预加载，模块化（CJS，AMD，CMD，ES6），浏览器渲染页面的过程，渲染进程，重绘重排，按需加载，virtual DOM，Dom，DOM\napi，BOM，window，navigator，screen，location，history，setTimeout()，setInterval()，document.cookie，移动端适配，性能优化，移动端兼容性，小程序开发，移动端300ms延迟问题，，XSS攻击\n\n\nHTML\n\n语义化标签，iframe，doctype，块元素和行元素\n\n\nCSS\n\ntransition，animation，flex布局，BFC，元素垂直居中，文本对齐，选择器，元素消失的方式，溢出处理，calc()，position，z-index，bg-color，inline-block，inline，block，像素单位（px，em，rem，%，vw，vh，vmin）\n\n\nJAVASCRIPT\n\n闭包，类（继承，创建），各种继承类型（原型链继承，构造函数继承，实例继承，拷贝继承，组合继承，寄生组合继承），回调地狱，Generator，事件流（捕获，目标，冒泡），new，bind，apply，call，JS拖拽功能，垃圾回收，引用计数，标记清除，eval，深度克隆，监听对象的属性，==和===和Object.is的区别，setTimeout和setInterval和requestAnimationFrame的区别，实现bind函数，使用setTimeout实现setInterval，实现sleep效果，实现promise，Object.getPrototypeOf()，对部分对象的深度克隆（包装的对象，Date，正则对象），箭头函数中的this指向，判断类型的方法，数组的方法，字符串去除首尾空格，数值比较规则，null==undefined，this的指向，原型链，string的startWith和indexof的区别，字符串转数字，let、const、var，箭头函数，事件模型，如何获取对象属性，ES6新特性，private和public实现，Event\nLoop\n\n\nGIT\n\n工作流，rebase，merge，git reset和git revert和git checkout的区别\n\n\n框架\n\nwebpack，gulp，前两个的区别，axios，react，vue-router\n\n\nVUE\n\n介绍，Vue和react、Angularjs、Jquery的不同，虚拟DOM，Vue3生命周期，监听事件监听对象变化，delete和Vue.delete，watch和computed，双向数据绑定原理，v-model，为什么Vue要用Proxy\nAPI代替defineProperty，Vue3做了什么优化，Composition\nAPI，Vue的优化（底层，源码），hoistStatic静态提升，cacheHandlers，权限管理的实现，watchEffect和watch","frontMatter":{"title":"关键字","index":2,"publishTime":"2023/7/25"}},{"name":"一图流","path":"学习笔记/一图流.html","texts":"","frontMatter":{"title":"一图流","index":3,"publishTime":"2023/7/25"}},{"name":"网络协议","path":"学习笔记/网络协议.html","texts":"1.http：一种网络协议，是用于在网络传输数据的协议，他是无状态的协议。（服务器不会记住之前与客户端的连接状态，每次请求都是独立的），采用明文传输，端口80。\n\nhttps：在http的基础上，在数据传输中采用了各种方式进行加密保证数据安全。采用密文传输，端口443.\n\n2.https的工作原理：\n\n客户端会先发送一个请求进行连接。服务端收到请求后会返回数字证书给客户端，数字证书用于验证服务端的合法性，内部也储存了服务端的公钥，一旦验证成功，服务端将生成一个对称密钥并使用服务端的公钥进行加密然后发送给服务端，服务端收到后用私钥进行解密获得对称密钥，接下来的数据运输将使用这个对称密钥进行加密解密。\n\n3.http和https的优劣：\n\nHTTP：好：1.简单易用2.速度快 坏：1.没有安全加密 2.不能确保数据完整 HTTPS：好1.数据加密2.数据完整3.身份验证\n坏：1.额外的计算资源开销2.数字证书的购买和刷新\n\n4.tcp三次握手：\n\n第一次：客户端向服务端发送一个特殊的报文，其序列号采用了随机初始化的序列号且syn的标志位为1，发送后客户端的状态变为SYN_SENT。\n\n第二次：服务端在收到这个报文后，发送一个响应报文，其中syn和ack的标志位设置为1，并且初始化一个序列号作为报文的序列号，将收到报文的序列号+1作为响应报文的确认号。服务端进入SYN-RECEIVED状态。\n\n第三次：客户端收到了服务端的报文后，发送响应报文，其中ack的标志位设置为1，确认号为服务端的序列号+1，进入ESTABLISHED状态，服务端收到报文后进入ESTABLISHED状态，连接建立。\n\n5.为什么是三次握手：\n\n为什么不是四次握手原因比较简单那就是三次握手都能解决连接了就不需要多一步画蛇添足，\n\n主要是解释为什么不是二次握手\n\n三次握手第一是为了避免旧连接问题，如果是二次握手，服务端收到第一个报文后就会进入ESTABLISHED状态进入连接，但是如果此时客户端没有及时收到服务端的报文就会认为连接失败了就会再发一个报文，但是对于服务端来说连接已经建立了，这样就会造成困惑的情况。如果是三次握手，服务端必须收到确认报文才会进入ESTABLISHED状态，否则变回等待状态，这样就不会出现上述问题\n\n第二个是客户端不能确认服务端的序列号，在两次握手中，服务端向客户端发送的响应报文只有确认号，序列号并不包含服务端的序列号\n\n//前面两个报文丢失了比较简单大概就是超时重传超时关闭\n\n6.如果第三个报文传送失败了会怎么样？\n\n客户端发送的确认报文如果丢失并不会重传，此时服务端并没有收到确认报文因此会向客户端再次发送第二次握手的报文，如果始终没有收到确认报文服务端超时自动关闭连接。\n\n7.TCP断开连接的四次挥手\n\n这里假设主动断开连接的是客户端\n\n第一次挥手时，客户端发送FIN报文表示要断开连接，进入FIN_WAIT状态。\n\n第二次，服务端在收到后发送ACK报文表示收到请求，然后进入closed_wait状态，客户端收到ACK后进入FIN_WAIT状态\n\n第三次，等到服务端处理完成数据后发送FIN报文，然后进入LAST_ACK状态\n\n第四次，客户端收到FIN报文后发送ACK报文，然后进入TIME_WAIT状态后等待一段时间关闭，服务端在收到ACK报文后进入CLOSED状态\n\n8.为什么有TIME_WAIT状态？\n\n两个主要原因是确保连接关闭以及处理历史连接。\n\n对于确保连接关闭，服务端在发送FIN报文后需要等待ACK报文，如果超时则会发送新的FIN报文，如果客户端收到FIN报文后发送ACK报文然后关闭，如果这个ACK报文丢失，超时重传的FIN到达也无法让客户端发送新的ACK报文，这样就无法优雅断开连接。\n\n其次是处理历史连接，有一部分数据报文可能无法即时到达，如果此时关闭连接且TIME_WAIT状态时间过短，然后断开后马上建立新连接，此时旧数据报到达，设备会正常接受数据，这样会造成序列号紊乱。\n\n9.介绍一下TCP\n\nTCP是一种面向连接的传输层协议，他要求双方传输数据前需要事先建立一个连接。与此同时，TCP通过确认和数据重传机制保证可靠连接，TCP使用滑动窗口机制，保证数据的连续性而且限制了发送的数据数量。而且还具有拥塞控制\n\n10.介绍一下UDP\n\n（基本都是说UDP没有TCP的什么什么）\n\n11.UDP与TCP的不同？\n\nTCP连接，UDP不连接；TCP可靠，UDP不可靠；TCP不快，UDP快\n\n12.TCP与UDP的应用场合？\n\nTCP：网页连接，邮箱，数据传输\n\nUDP：直播，DNS查询\n\n13.TCP的可靠传输机制？\n\n序列号和确认机制，重传机制，流量控制，拥塞控制\n\n14.TCP的重传机制？\n\n在TCP连接中，服务端会发送带有序列号的数据报，客户端在接收后会向服务端发送确认报文确认已经收到这个数据报，如果服务端超过一段时间没有收到确认，则会重新发送这个数据报\n\n15.TCP的流量控制？\n\nTCP连接中，发送端具有一个滑动窗口，如果已经发送而没有收到确认的数据超过窗口大小则不会继续发送，这样就可以通过窗口大小对发送流量进行控制。\n\n16.TCP的拥塞控制？\n\nTCP连接开始时，会采用慢开始，一开始的发送窗口较小，但每收到一次确认窗口大小翻倍，一直到出现拥塞，就会采用拥塞避免，这时大小增长方式变为线性增长。一旦出现接收到发现数据丢失，发送端就是将窗口大小减半并且进行拥塞避免。如果迟迟收不到确认，窗口大小便会变回1继续慢开始。\n\n17.DNS是什么\n\nDNS就是域名系统（ Domain Name\nSystem），他把一个可读的名字转换为ip地址，这样进入网站就不需要输入ip而是输入“名字”，这样能够大大增强对人的网站访问体验。\n\n18.DNS的完整查询过程\n\n一、本地查询，主机会依次检查浏览器，系统是否拥有域名对应的ip地址\n\n二、如果前面无法完成，那么系统会请求本地域名服务器进行查询\n\n三、如果前面无法完成，那么本地域名服务器、依次对根服务器、顶级域名服务器、权威域名服务器进行递归查询，最后会得到对应的ip地址，缓存起来然后发送给主机。\n\n19.HTTP的请求方式\n\nGET用于从服务器中检索数据，POST用于将将要处理的数据交付给指定的资源，put用于更新数据，DELETE用于删除数据，HEAD和GET类似但是只返回响应头不返回响应体，OPTION用于请求目标资源可用的的通行选项信息（或者不用简单解释直接说也行？）\n\n20.get和post的区别\n\n目的不同，get用于检索数据，post用于交付数据；get数据发送数据明文可见，post不可见；get的请求数据长度较短，post长度长很多；get获取的数据会被缓存，post不会；每一次get的效果应该是相同的，而post不一定\n\n21.介绍HTTP请求方法的OPTION方法及其使用场景\n\n这个方法用于获取目标资源允许的请求方法，还有一些其他信息例如请求头部和认证需求。\n\n一般用于跨域资源共享，进行跨域请求前发送option方法查询是否支持跨域请求\n\n22说几个HTTP的请求头和响应头\n\n请求头：\n\nuser-agent,accept,content-type,referer,connection,cookie,host\n\n响应头：\n\ncontent-type,date,connection,cache-control,server,ser-cookie,expires\n\n23.HTTP304状态码多还是少比较好\n\n基本上都是多比较好，304状态码表示资源未修改，用于get请求中请求的这个资源没有修改所以建议直接读取缓存，这样客户端不用接受数据直接读缓存更快，服务端也不用重发减少负担。\n\n24.http1.0和http1.1的区别\n\n允许持续连接；强制使用host字段，优化缓存，部分资源请求\n\n25.http1.1和http2.0的区别\n\n编码使用二进制，允许单个连接多个接受和发送，允许服务端主动发送消息，头消息压缩","frontMatter":{"title":"网络协议","index":4,"publishTime":"2023/7/25"}},{"name":"网络协议withchatGPT","path":"学习笔记/网络协议withchatGPT.html","texts":"chatGPT主要用于理解方面，对一些问题的子问题进行回答。\n\nQ：我对udp的无连接和http的无状态有一点混淆，怎么解释这两个？（http连接是tcp连接）\n\nA：理解UDP的无连接和HTTP的无状态确实容易混淆，因为它们指的是两个不同的概念。让我为您解释一下它们：\n\n 1. UDP的无连接： UDP（User Datagram\n    Protocol）是一种无连接的传输层协议。这意味着在UDP通信中，通信的两端（发送方和接收方）在交换数据之前不会建立任何连接。UDP不像TCP那样需要进行三次握手来建立连接，也不需要四次握手来终止连接。它简单地将数据分割成数据包（Datagram），并在网络上发送，而无需事先建立连接或维护状态。因为UDP没有建立连接的开销，所以在一些对实时性要求高、但不要求可靠性的场景中使用，例如实时音频、视频传输和在线游戏。\n 2. HTTP的无状态： HTTP（Hypertext Transfer\n    Protocol）是一种应用层协议，用于在Web浏览器和Web服务器之间传输数据。HTTP是无状态的，这意味着每个HTTP请求都是独立的，服务器不会在请求之间保留任何关于客户端状态的信息。在每个HTTP请求中，服务器只处理请求的内容并返回响应，而不会考虑之前的请求历史或会话状态。这使得服务器的设计更加简单，也有助于提高可伸缩性。为了处理用户状态（例如用户登录状态保持），通常使用一些机制，如Cookie和Session，在客户端和服务器之间进行状态管理。\n\n要理解它们之间的区别，可以将UDP的无连接看作是传输层的特性，它处理数据包的发送和接收，而HTTP的无状态是应用层的特性，它处理请求和响应之间的关系和状态。UDP在传输层提供了简单、高效的数据传输，而HTTP在应用层提供了无状态的请求-响应交互，用于在Web应用程序中传输数据。\n\nQ：说明一下https的数据传输加密的工作原理\n\nA：HTTPS（Hypertext Transfer Protocol\nSecure）是一种通过加密来保护数据传输安全的通信协议。它基于HTTP协议，但在其基础上添加了安全层（SSL/TLS），以确保在客户端和服务器之间传输的数据是加密的，从而防止恶意第三方窃听、篡改或伪装数据。下面是HTTPS数据传输加密的工作原理：\n\n 1. 握手阶段（Handshake Phase）:\n    当客户端（通常是Web浏览器）与服务器建立HTTPS连接时，首先会发生一系列握手过程，主要涉及SSL/TLS协议。握手阶段的目标是确保双方之间建立安全的通信渠道并协商加密算法和密钥。\n 2. 客户端发送请求: 客户端向服务器发送一个连接请求，请求建立一个安全的连接。\n 3. 服务器证书验证：\n    服务器在收到客户端请求后，会向客户端返回其公开的数字证书。数字证书中包含了服务器的公钥，以及一些元数据信息，比如证书的颁发机构、有效期等。客户端会验证证书的有效性，确保证书是由受信任的证书颁发机构（CA，Certificate\n    Authority）签署的，且证书没有过期或被吊销。\n 4. 客户端生成密钥： 如果证书验证通过，客户端会生成一个用于后续数据加密的对称密钥（Session\n    Key），这个密钥只在当前会话中有效，并且只有客户端和服务器知道。\n 5. 服务器公钥加密： 客户端使用服务器证书中提供的公钥对生成的对称密钥进行加密，然后将加密后的密钥发送回服务器。\n 6. 服务器解密密钥： 服务器使用其私钥对客户端发送的加密密钥进行解密，获得对称密钥。\n 7. 加密通信：\n    在握手阶段完成后，客户端和服务器都拥有相同的对称密钥，用于加密和解密后续的数据传输。从此刻开始，所有的数据都会使用该对称密钥进行加密，然后在接收端使用同样的密钥进行解密。这样，即使有人在数据传输的过程中截获了加密的数据，由于没有正确的密钥，无法解密其中的内容。\n 8. 数据传输： 在握手阶段完成后，客户端和服务器之间的数据传输是通过使用对称密钥进行加密和解密的，保证数据的安全性和完整性。\n\n总结：HTTPS通过在握手阶段建立安全的通信渠道，使用公钥加密和对称密钥加密相结合的方式，确保数据在传输过程中的保密性和完整性，从而保护用户数据和隐私免受网络攻击和窃听。\n\nQ：什么是对称加密和非对称加密，这里使用的哪种？\n\nA：对称加密和非对称加密是两种常见的加密算法，用于在计算机网络和信息安全领域保护数据的安全性。在HTTPS中，两种加密算法都有用到，但主要的加密工作是通过非对称加密完成。\n\n1.对称加密（Symmetric Encryption）：\n对称加密是一种加密技术，使用相同的密钥（也称为对称密钥）来进行数据的加密和解密。因为加密和解密使用相同的密钥，所以必须确保密钥的安全传输和存储，否则可能会被恶意第三方获取，从而破解加密数据。\n\n在对称加密中，数据发送方使用密钥对数据进行加密，然后将加密后的数据发送给接收方。接收方收到数据后使用相同的密钥进行解密，以恢复原始数据。常见的对称加密算法有AES（Advanced\nEncryption Standard）和DES（Data Encryption Standard）等。\n\n2.非对称加密（Asymmetric Encryption）： 非对称加密是一种加密技术，使用一对密钥，分别是公钥（public key）和私钥（private\nkey）。公钥是公开的，可以被任何人获取，而私钥是私有的，只有密钥的拥有者知道。数据加密和解密使用不同的密钥，即用公钥加密的数据只能用私钥解密，用私钥加密的数据只能用公钥解密。\n\n在非对称加密中，公钥通常用于加密数据，而私钥用于解密数据或签名数据（数字签名）。数据发送方获取接收方的公钥，使用公钥加密数据后发送给接收方。接收方使用私钥解密数据或验证发送方的签名。非对称加密解决了对称加密中密钥分发和安全存储的问题。\n\n在HTTPS中，非对称加密用于建立安全连接，客户端使用服务器的公钥来加密生成的对称密钥，并将其发送给服务器。服务器使用私钥解密客户端发送的对称密钥，从而建立一个安全的通信渠道。之后，数据的传输主要通过对称加密来完成，利用之前建立的安全通道传输加密数据，提供更高效的加密和解密速度。\n\nQ：解释tcp的三次握手以及双方状态的变化\n\nA：TCP的三次握手是在建立TCP连接时所执行的一种协议，用于确保通信的可靠性和双方都准备好传输数据。以下是TCP三次握手的过程和双方状态的变化：\n\n假设有两台设备，设备A和设备B，设备A希望与设备B建立TCP连接。\n\n 1. 第一次握手 (SYN)：\n    * 设备A向设备B发送一个特殊的TCP报文段，该报文段中设置了SYN标志位（即同步标志位）为1，并选择一个初始序列号（Sequence\n      Number）作为起始值。\n    * 此时，设备A进入\"SYN-SENT\"状态，表示已发送了连接请求。\n 2. 第二次握手 (SYN + ACK)：\n    * 设备B收到设备A发送的SYN报文段后，会对该连接请求进行响应。\n    * 设备B向设备A发送一个特殊的TCP报文段，其中设置了SYN和ACK标志位都为1，同时选择一个自己的初始序列号作为起始值，并且在ACK中确认收到了设备A的初始序列号+1。\n    * 此时，设备B进入\"SYN-RECEIVED\"状态，表示已收到连接请求并发送了连接确认。\n 3. 第三次握手 (ACK)：\n    * 设备A收到设备B发送的SYN + ACK报文段后，会对该连接确认进行响应。\n    * 设备A向设备B发送一个特殊的TCP报文段，其中设置了ACK标志位为1，并且在ACK中确认收到了设备B的初始序列号+1。\n    * 此时，设备A进入\"ESTABLISHED\"状态，表示连接已建立。\n 4. 设备B确认 (ESTABLISHED)：\n    * 设备B收到设备A发送的ACK报文段后，也进入\"ESTABLISHED\"状态。\n    * 此时，设备A和设备B之间的TCP连接已成功建立，双方可以开始进行数据传输。\n\n总结：在TCP三次握手中，设备A首先发送连接请求，设备B收到请求后发送连接确认，然后设备A收到确认后再发送最终确认。这样，双方都确认对方可以正常通信，并且双方都知道对方的初始序列号，从而确保了连接的可靠性。完成三次握手后，双方都进入\"ESTABLISHED\"状态，可以开始传输数据。\n\nQ：为什么是三次\n\nA：TCP采用三次握手的过程是为了确保连接的可靠性和避免出现旧连接请求被误认为是新连接的情况，同时也为了解决网络中可能存在的延迟、重复和乱序等问题。以下是解释为什么是三次握手的原因：\n\n 1. 避免旧连接请求的问题：在一个网络中，数据包可能会因为网络延迟或拥堵而导致延迟传送，TCP的三次握手可以确保旧的连接请求在一段时间后失效，防止旧的连接请求在网络中滞留，避免了类似的问题。\n 2. 确保双方都愿意建立连接：三次握手要求客户端和服务器都发送和接收连接请求和确认，这样可以确保双方都愿意建立连接。如果只有两次握手，那么可能出现以下情况：客户端发送连接请求，但是因为某种原因导致服务器没有收到，然后客户端再次发送请求建立连接，但此时服务器收到了第一个旧请求，然后误以为是客户端的新连接请求，从而建立了连接，而客户端并没有收到服务器的确认，从而无法建立连接。\n 3. 有效确认双方的初始序列号：TCP连接需要双方交换彼此的初始序列号，这个序列号用于后续数据的传输和包的排序。三次握手过程确保双方都得到了对方的确认，可以建立可靠的初始序列号。\n 4. 防止过期的连接请求：三次握手的过程可以有效地防止过期的连接请求在网络中产生混淆。如果只有两次握手，可能会因为网络延迟或乱序数据包而导致旧的连接请求在后续被误认为是新的连接请求。\n\n总结：TCP的三次握手过程是为了确保连接的可靠性和正确性，防止旧的连接请求导致的问题，并确保双方都愿意建立连接和得到了对方的确认。通过三次握手，TCP连接可以更可靠地建立起来，并保证了后续数据传输的正确性。\n\nQ：两次握手为什么无法确认初始序列号\n\nA：两次握手无法完全确认初始序列号的主要原因是缺乏对方的确认信息。\n\n在两次握手的场景下，设备A发送连接请求给设备B，并携带初始序列号。设备B收到连接请求后，确认了设备A的连接请求，但在这个阶段，设备B只发送了一个确认（ACK）报文段，而没有发送任何数据。因此，设备A并不能确定设备B的初始序列号，因为没有收到设备B发送的数据报文段。\n\n由于设备B没有发送数据，设备A不能知道设备B选择的初始序列号是什么。因此，在两次握手的情况下，初始序列号仍然存在不确定性，这会影响后续数据传输的正确性。\n\n为了解决这个问题，TCP采用了三次握手。在三次握手中，设备B在发送确认（ACK）报文段之前会先发送一个自己的连接请求，其中包含设备B的初始序列号。这样设备A收到设备B的连接请求后，会回复一个确认报文段，同时也发送了一个自己的连接请求，其中包含设备A的初始序列号。设备B收到设备A的确认后，可以确定设备A的初始序列号，因为设备B在回复确认时已经包含了设备A的初始序列号。通过这样的交互，双方都能确认对方的初始序列号，确保后续数据传输的正确性。\n\n因此，三次握手的过程比两次握手更可靠，可以有效解决初始序列号的确认问题，从而确保连接的安全性和可靠性。\n\n//这道题回答的不全面\n\n搞懂去看https://www.xiaolincoding.com/network/3_tcp/tcp_interview.html#tcp-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84\n\nQ:详细解释TCP优雅断开连接的四次挥手\n\nA:TCP (Transmission Control Protocol) 是一种可靠的传输协议，用于在网络中传输数据。TCP\n优雅断开连接使用四次挥手过程来终止一个已建立的TCP连接。这四个步骤分别是：\n\n 1. 第一次挥手（FIN）： 客户端向服务器发送一个FIN（终止）标志，表示客户端已经没有数据要发送了，并请求关闭连接。\n 2. 第二次挥手（ACK）：\n    服务器收到客户端的FIN后，发送一个ACK（确认）标志作为响应。该ACK表示服务器已收到客户端的关闭请求，并且知道客户端将不再发送数据。\n 3. 第三次挥手（FIN）： 服务器向客户端发送一个FIN标志，表示服务器也没有数据要发送了，并请求关闭连接。\n 4. 第四次挥手（ACK）：\n    客户端收到服务器的FIN后，发送一个ACK作为确认。此ACK告诉服务器它已收到服务器的关闭请求，并且双方都知道连接将在这一点上关闭。\n\n下面是一个更详细的步骤说明：\n\n假设客户端为A，服务器为B。\n\n 1. A → B：发送FIN报文段 客户端A向服务器B发送一个带有FIN标志的TCP报文段。此时，A不再发送数据，但仍然可以接收来自B的数据。\n 2. B → A：发送ACK报文段\n    服务器B收到客户端A的FIN后，发送一个带有ACK标志的报文段作为确认。此时，服务器B进入半关闭状态，表示它不再发送数据，但仍然可以接收来自A的数据。\n 3. B → A：发送FIN报文段 一旦服务器B完成了它的数据传输任务，就会向客户端A发送一个带有FIN标志的报文段，表示它准备关闭连接。\n 4. A → B：发送ACK报文段\n    客户端A收到服务器B的FIN后，发送一个带有ACK标志的报文段作为确认。此时，客户端A进入TIME_WAIT状态。该状态是为了确保服务器B收到了ACK，以便在网络中的所有报文都被正确处理。\n\n完成以上四次挥手后，连接就会被正常关闭，A 和 B 都进入了 CLOSED 状态。\n\n这四次挥手过程确保了双方都知道彼此的关闭意图，并且能够完成未完成的数据传输，以便连接可以优雅地关闭而不会导致数据丢失。然而，TCP\n连接的关闭过程有时可能因为网络问题或其他原因而产生延迟，可以通过调整连接的超时参数来缓解一些潜在的问题。\n\nQ：为什么需要 TIME_WAIT 状态？\n\nA：TIME_WAIT 状态在 TCP 连接的关闭过程中扮演着重要的角色，其存在有以下主要原因：\n\n 1. 确保可靠关闭连接： TIME_WAIT 状态的最主要目的是确保双方都能可靠地关闭连接。在四次挥手过程中，客户端发送最后一个 ACK 后会进入\n    TIME_WAIT 状态，并且会在这个状态下等待一段时间。这样做的目的是为了确保服务器收到了客户端的 ACK 确认。服务器在接收到 ACK 后，也会进入\n    TIME_WAIT 状态，并等待一段时间。这样，双方在关闭连接后仍然保持着一段时间的通信状态，以处理可能在网络中滞留的报文。\n 2. 处理延迟报文： 在网络通信中，有可能会出现延迟到达的报文。当一端的 TCP\n    连接关闭后，可能还有一些数据报文在传输途中，这些报文可能在连接关闭之后到达。如果没有 TIME_WAIT\n    状态，服务器在关闭连接后立即释放资源，而收到的延迟报文会被丢弃，导致数据的丢失。通过等待一段时间进入 TIME_WAIT\n    状态，可以确保在这个状态下，双方能够处理掉所有滞留在网络中的报文，从而保证数据的完整性和可靠性。\n 3. 避免连接混淆： TCP 连接是通过源IP地址、源端口号、目标IP地址和目标端口号来标识的。在连接处于 TIME_WAIT\n    状态时，该连接的四元组（源IP、源端口、目标IP、目标端口）仍然是唯一的。如果不等待一段时间，而立即释放连接资源，有可能会导致在短时间内创建的新连接使用了之前的四元组，从而导致连接混淆和数据错乱。\n 4. 支持全双工关闭： TIME_WAIT\n    状态允许连接在全双工模式下完成关闭。全双工模式意味着两端的连接都能够同时关闭，而不会造成早期关闭的一方接收到错误的数据。通过 TIME_WAIT\n    状态，可以确保双方都能在正确的时间点关闭连接，而不会干扰对方的数据传输。\n\n尽管 TIME_WAIT 状态在一定程度上会增加系统资源的占用和延长连接关闭时间，但它对于TCP连接的可靠性和完整性至关重要。因此，在 TCP 协议中引入\nTIME_WAIT 状态是必要的，以保证网络通信的稳定性和可靠性。\n\nQ:TCP的概念\n\nA:TCP是\"传输控制协议\"（Transmission Control Protocol）的缩写。它是一种计算机网络通信协议，用于在网络中可靠地传输数据。\n\nTCP是互联网协议套件中的一个重要组成部分，与IP（Internet\nProtocol，互联网协议）一起构成了TCP/IP协议栈。TCP负责在数据通信的两个应用程序之间提供可靠的、有序的、面向连接的数据传输。\n\n下面是TCP的一些关键概念：\n\n 1. 可靠性： TCP确保数据的可靠传输，它通过使用确认（acknowledgments）和重传机制来检测和纠正数据传输中可能出现的错误或丢失。\n 2. 面向连接： 在数据传输之前，TCP会在通信双方建立一个连接。这个连接是可靠的、有序的、全双工的通信通道。数据传输完成后，连接会被显式地释放。\n 3. 流控制： TCP使用流控制机制来确保发送方不会发送过多的数据，以防接收方处理不过来。这可以避免数据丢失或拥塞的情况。\n 4. 拥塞控制： TCP通过拥塞控制算法来防止网络拥塞，确保在网络不稳定或拥塞时适当地降低发送速率，从而维持网络的稳定性和公平性。\n 5. 数据分段和重组： TCP会将应用层传输的数据划分为小块，称为数据段（segment），然后在接收方重新组装这些数据段，以确保可靠性和有序性。\n 6. 端口： TCP使用端口号来标识不同的应用程序或服务。在数据传输中，源和目标端会使用不同的端口号来区分应用程序或服务。\n\n总体而言，TCP是一种可靠的、面向连接的协议，适用于对数据传输有较高要求的应用，例如文件传输、网页浏览、电子邮件等。它是互联网通信中的基础之一，为数据在网络中的传输提供了稳定的基础。\n\nQ:UDP的概念\n\nA:UDP是\"用户数据报协议\"（User Datagram\nProtocol）的缩写。它也是一种计算机网络通信协议，与TCP一样属于互联网协议套件中的一部分，但与TCP不同，UDP提供了一种无连接的、不可靠的数据传输方式。\n\n下面是UDP的一些关键概念：\n\n 1. 无连接性： UDP是无连接的协议，这意味着在数据传输之前不会建立像TCP那样的连接。发送方直接将数据报发送给接收方，而无需预先建立通信通道。\n 2. 不可靠性：\n    UDP不提供数据传输的可靠性保证。一旦数据报发送出去，UDP不会等待确认或进行重传，因此无法确保数据的完整性和可靠性。如果数据丢失或出现错误，UDP将不做任何处理。\n 3. 数据分组：\n    UDP将应用层传输的数据划分为小的数据报，称为数据报文（datagram）。这些数据报可以独立地发送和接收，因此在接收端可能会以不同的顺序或多次接收到它们。\n 4. 低延迟： 由于UDP没有建立连接和确认机制，它的处理速度更快，因此具有较低的传输延迟。这使得UDP适用于实时性要求较高的应用，如语音通话、视频流等。\n 5. 简单性： 相对于TCP，UDP的实现和处理较为简单，因为它不需要维护连接状态、执行流控制和拥塞控制等复杂的机制。\n\nUDP在一些特定场景下非常有用，例如在实时应用中，它可以快速传输数据并允许丢失一些数据，而不会对应用造成明显的影响。然而，由于其不可靠性，如果应用需要确保数据的完整性和可靠性，通常会选择使用TCP来进行数据传输。\n\nQ:TCP和UDP的区别\n\nA:TCP（传输控制协议）和UDP（用户数据报协议）是两种不同的传输层协议，在计算机网络中有以下主要区别：\n\n 1. 连接性：\n    * TCP是面向连接的协议。在数据传输之前，发送方和接收方需要建立一个连接，然后进行数据传输，最后释放连接。这种连接过程保证了数据传输的可靠性和有序性。\n    * UDP是无连接的协议。发送方不需要在传输数据之前建立连接，直接发送数据包到目的地。由于没有连接的建立和释放过程，UDP在传输过程中的开销较小。\n 2. 可靠性：\n    * TCP提供可靠的数据传输。它使用确认和重传机制来确保数据的完整性和准确性。如果数据包丢失或损坏，TCP会重新发送这些数据包，直到接收方正确地收到它们为止。\n    * UDP提供非可靠的数据传输。它不使用确认和重传机制，因此在传输过程中可能会丢失数据包或以不同的顺序到达目的地。UDP适用于那些对实时性要求较高、能容忍一定数据丢失的应用，但不适合要求数据完整性的应用。\n 3. 传输效率：\n    * TCP的可靠性和连接管理会导致一定的传输开销，使其传输效率相对较低。此外，TCP的拥塞控制机制会导致数据传输速率在网络拥塞时降低，以避免网络丢包过多。\n    * UDP的传输效率较高，因为它没有连接建立和断开的开销，也没有拥塞控制，数据包的传输速率更为稳定。但这也意味着在网络不稳定或拥塞时，UDP可能会遇到更多的数据丢失。\n 4. 应用场景：\n    * TCP适用于那些对数据传输可靠性要求较高的应用，例如文件传输、电子邮件、网页浏览等。由于TCP可以确保数据的完整性和顺序，它是大部分互联网应用的首选协议。\n    * UDP适用于对传输速度和实时性要求较高的应用，例如实时视频和音频传输、在线游戏等。在这些应用中，及时传输数据比绝对的数据可靠性更重要。\n\n总结：\nTCP是一种可靠的、面向连接的协议，适用于需要数据完整性的应用；而UDP是一种快速的、无连接的协议，适用于实时性要求高、对数据完整性要求相对较低的应用。在选择使用TCP或UDP时，需要根据具体应用的需求来决定。\n\nQ:TCP和UDP的应用场景\n\nA:CP和UDP在网络通信中有不同的应用场景，因为它们具有不同的特性。下面列举了一些常见的TCP和UDP应用场景：\n\nTCP 的应用场景：\n\n 1. 网页浏览：当您访问网页时，使用TCP来下载网页的文本、图像和其他资源。TCP的可靠性确保网页内容正确地显示在您的浏览器上。\n 2. 文件传输：在需要确保文件传输完整性的情况下，如从服务器下载大型文件或通过FTP（文件传输协议）上传文件，TCP是首选协议。\n 3. 电子邮件：电子邮件的传输需要可靠性，因为丢失或损坏邮件可能导致信息丢失。因此，SMTP（简单邮件传输协议）和POP3（邮局协议版本3）等电子邮件协议使用TCP。\n 4. 远程访问：当用户远程访问服务器或使用远程桌面时，需要稳定的连接和可靠的数据传输，TCP提供了这种可靠性。\n 5. 加密通信：一些加密协议，如HTTPS（HTTP安全）使用TCP作为传输层，以确保安全的数据传输，比如网上银行或安全登录。\n\nUDP 的应用场景：\n\n 1. 实时音视频通信：视频聊天、语音通话、视频会议等需要实时性的应用通常使用UDP。虽然UDP不保证数据的可靠传输，但在实时应用中，速度和实时性比数据的可靠性更重要。\n 2. 在线游戏：网络游戏通常使用UDP，因为游戏需要快速的数据传输，较小的延迟和对数据丢失的容忍度，这些都是UDP的特点。\n 3. DNS（域名系统）：DNS用于将域名解析为IP地址，这样您可以通过域名访问网站。DNS查询通常使用UDP，因为查询速度比可靠性更重要。\n 4. 实时广播：在需要将数据快速传输到多个接收方的场景中，例如视频直播或多媒体广播，UDP能够提供更高效的数据传输。\n\n总结：\nTCP适用于需要数据可靠性的场景，如网页浏览、文件传输和电子邮件。UDP适用于实时性要求高、能容忍一定数据丢失的场景，如实时音视频通信、在线游戏和实时广播。根据应用的特定需求，选择合适的协议对于实现最佳性能和用户体验非常重要。\n\nQ：TCP的可靠传输机制\n\nA：TCP (Transmission Control Protocol)\n是一种面向连接的、可靠的传输协议，用于在计算机网络中传输数据。TCP的可靠传输机制是确保数据在发送和接收之间的可靠传递的方式。下面是TCP实现可靠传输的主要机制：\n\n 1. 确认和序列号：TCP使用序列号和确认机制来保证数据的有序传输和可靠接收。发送方将每个数据段进行编号（序列号），接收方在收到数据段后会发送确认消息，并指定下一个期望收到的数据段的序列号。如果发送方在合理的时间内未收到确认消息，它会重新发送数据。\n 2. 重传机制：如果发送方未收到对特定数据段的确认消息，它会假设该数据段在传输过程中丢失，并触发重传。接收方在收到重复的数据段时会自动丢弃重复的部分，以保证数据的正确性。\n 3. 流量控制：TCP使用滑动窗口协议来控制发送方发送数据的速率，以避免数据的过度发送导致接收方缓冲区溢出。接收方会通知发送方当前可用的缓冲区大小，发送方根据这个信息来调整发送速率。\n 4. 拥塞控制：TCP使用拥塞控制算法来避免网络拥塞并确保公平共享网络带宽。如果网络拥塞或出现丢包，TCP会降低发送速率以减少网络负载，然后逐渐增加发送速率，以便在不引起拥塞的情况下尽可能利用可用带宽。\n 5. 超时和重试：TCP通过设置定时器来监测数据发送的确认状态。如果定时器超时，发送方会认为数据丢失，并重新发送这些数据。\n 6. 有限等待时间：TCP规定了一个有限的等待时间来处理数据的重传和确认，以避免数据在网络中长时间滞留。\n\n这些机制共同确保了TCP的可靠性，使其成为许多应用程序中传输数据的首选协议，例如网页浏览、电子邮件传输、文件下载等。\n\nQ：细说拥塞控制\n\nA：拥塞控制是TCP协议中的重要机制，用于避免网络拥塞，确保网络资源合理分配，以及保持整个网络的稳定性和高效性。TCP通过以下几种拥塞控制算法来应对不同的网络拥塞情况：\n\n 1. 慢开始和拥塞避免：TCP连接刚开始时，发送方会采用慢开始算法，即初始发送窗口大小较小。发送方在每次接收到一个确认时，将发送窗口大小加倍，这样在开始阶段，数据发送速率会呈指数级增长。但是，当网络拥塞开始出现时，为了避免过多的数据注入网络，TCP就会进入拥塞避免状态。在拥塞避免状态下，发送方每收到一个确认，发送窗口的大小增加变得更慢，是线性增加而不是指数增加。这样就可以避免快速导致拥塞的情况。\n 2. 快重传和快恢复：为了更快地恢复丢失的数据段，TCP采用了快重传和快恢复算法。当接收方收到失序的数据段时，它会立即发送对已经接收到的最后一个有序数据段的确认。这样发送方就能立即知道有数据段丢失，并进行快速重传，而不用等待超时。快恢复算法允许发送方在接收到快重传的确认后，将拥塞窗口减半，然后进入拥塞避免状态，而不是慢开始状态，以更快地恢复发送速率。\n 3. 超时重传：如果发送方发送的数据在一定的时间内（超时时间）没有收到确认，那么发送方会认为这些数据丢失，并触发超时重传。在出现超时重传时，TCP会将拥塞窗口设置为1，并重新开始执行慢开始算法。\n 4. 拥塞窗口：拥塞窗口是发送方在一个往返时间（Round Trip\n    Time，RTT）内允许发送的最大数据量。TCP的发送速率取决于拥塞窗口的大小。当网络拥塞时，发送方会根据拥塞控制算法调整拥塞窗口的大小，以限制数据注入网络的速率。\n 5. 确认阈值：当发生超时重传时，TCP会将拥塞窗口减少到一个较小的值，称为确认阈值（ssthresh）。发送方在慢开始和拥塞避免状态下，当拥塞窗口大小达到确认阈值时，切换到拥塞避免状态。\n\n这些算法和机制使得TCP能够对网络拥塞做出敏感的反应，控制发送速率，并在网络拥塞出现时进行适当的调整，从而避免过载导致的丢包和网络崩溃。这些拥塞控制算法共同构成了TCP的可靠性和稳定性的基础，使得TCP在互联网中成为主流的传输协议。\n\nQ:DNS的完整查询过程\n\nA:DNS（Domain Name\nSystem）是用于将域名解析为IP地址的系统。当您在浏览器中输入一个域名时，系统会执行完整的DNS查询过程，以获取与该域名相关联的IP地址。以下是DNS的完整查询过程：\n\n 1. 本地域名解析器查询：\n    当您在浏览器中输入一个域名时，首先会向本地计算机或设备上的本地域名解析器（通常由您的ISP提供）发送查询请求。该解析器通常是您的路由器或操作系统的一部分。\n 2. 本地域名解析器缓存查询：\n    本地域名解析器会首先检查是否已经缓存了该域名的IP地址。如果之前已经查询过该域名，并且缓存的数据还没有过期，那么解析器将直接返回缓存的IP地址，无需进行后续查询。\n 3. 根域名服务器查询：\n    如果在本地域名解析器的缓存中找不到对应的IP地址，解析器将会向根域名服务器发送查询请求。根域名服务器是DNS层次结构的最高层，其数量有限且固定。\n 4. 顶级域名服务器查询：\n    根域名服务器不会直接返回域名的IP地址，而是会指示本地域名解析器去查询对应的顶级域名服务器。顶级域名服务器负责管理特定顶级域（如.com、.org、.net等）下的所有子域。\n 5. 权威域名服务器查询： 顶级域名服务器会指示本地域名解析器查询该域名的权威域名服务器。权威域名服务器是负责管理该域名的DNS记录的服务器。\n 6. 查询结果返回：\n    本地域名解析器通过向权威域名服务器发送查询请求，获取到域名对应的IP地址。一旦本地域名解析器收到IP地址，它会将其存储在缓存中，并将IP地址返回给您的计算机或设备。\n 7. 访问目标服务器：\n    现在，您的计算机或设备已经知道了域名对应的IP地址。它会使用这个IP地址与目标服务器建立连接，然后向该服务器发送HTTP请求，以获取所需的网页内容或其他资源。\n\n值得注意的是，DNS查询结果会被缓存，这样在一定的时间范围内，再次查询相同的域名时就不需要再执行完整的查询过程，从而加快访问速度。DNS的缓存过程在多个层级上都有，从本地解析器的缓存到根域名服务器和顶级域名服务器的缓存，以及权威域名服务器自身的缓存。\n\nQ：dns同时使用tcp和udp协议？\n\nA：是的，域名系统 (DNS) 可以使用 TCP（传输控制协议）和 UDP（用户数据报协议）作为其传输协议，具体取决于具体的用例和环境。\n\nUDP 是 DNS 查询的默认且最常用的传输协议。 它是一种无连接协议，这意味着它在发送数据之前不会建立持久连接。 UDP 通常用于标准 DNS\n查询和响应，因为与 TCP 相比，它更快并且需要更少的开销。 然而，UDP 由于其固定报头较小，因此在消息大小上有限制（通常为 512 字节）。\n\n另一方面，TCP 是一种面向连接的协议，它在传输数据之前建立可靠且有序的连接。 当数据大小超过 UDP 的最大限制或需要称为“DNS 区域传输”的功能时，它用于\nDNS 查询和响应。 DNS 区域传输用于在 DNS 服务器之间复制 DNS 数据库，以实现冗余和负载平衡目的。\n\n以下是 DNS 可能使用 TCP 的一些场景：\n\n 1. 大型 DNS 响应：当 DNS 响应数据大小超过 512 字节的 UDP 限制（对于传统 DNS）或更高的 EDNS0 限制（对于现代\n    DNS）时，DNS 服务器将切换到 TCP 以确保可靠的数据传输。\n 2. 区域传输：DNS 区域传输涉及权威 DNS 服务器之间 DNS 数据库信息的传输。 此过程通常通过 TCP 完成，以确保数据完整性和可靠性。\n 3. DNSSEC（DNS 安全扩展）：DNSSEC 通过对 DNS 数据进行加密签名，为 DNS 添加了额外的安全层。 DNSSEC 签名的响应通常比传统的\n    DNS 响应大，并且在某些情况下，它们需要 TCP。\n 4. 由于网络配置或特定要求，DNS 服务器首选 TCP 的任何其他情况。\n\n在大多数情况下，标准 DNS 查询和响应通过 UDP 进行以提高效率，但在需要时 TCP 始终可用作后备选项。 DNS 解析器和客户端旨在处理 UDP 和\nTCP，以确保与 DNS 服务器的顺利通信。\n\nQ：DNS记录和报文？\n\nA：DNS (Domain Name System) 是一个用于将域名转换为 IP\n地址的分布式系统。它使我们能够使用人类可读的域名（例如www.example.com）来访问 Internet 上的资源，而无需记住其对应的 IP 地址。\n\nDNS 记录和报文是 DNS 系统中的两个重要概念：\n\n 1. DNS 记录： DNS 记录是存储在 DNS 服务器上的数据项，用于指定特定域名的相关信息，如域名对应的 IP\n    地址、邮件服务器等。每个域名可以有多个不同类型的 DNS 记录。常见的 DNS 记录类型包括：\n\n * A 记录：将域名映射到 IPv4 地址。\n * AAAA 记录：将域名映射到 IPv6 地址。\n * CNAME 记录：将域名映射到另一个域名，用于创建域名的别名。\n * MX 记录：指定邮件服务器的优先级和地址，用于电子邮件传递。\n * TXT 记录：允许管理员在域名中添加任意文本信息。\n\n通过查询 DNS 服务器，可以获取与特定域名相关的记录，从而找到相应的 IP 地址或其他相关信息。\n\n 1. DNS 报文： DNS 报文是在 DNS 查询和响应之间传输的数据格式。当计算机需要解析特定域名的 IP 地址时，它会向本地 DNS 服务器发送 DNS\n    查询报文。这个查询报文中包含了查询的域名以及所需的记录类型（如 A 记录或 MX 记录等）。\n\n本地 DNS 服务器收到查询报文后，它会检查自己的缓存，看是否已经有该域名的解析结果。如果缓存中没有记录，本地 DNS 服务器将作为中继，向更高级别的 DNS\n服务器发送查询请求。\n\n一般情况下，DNS 查询会经过多个层次的 DNS 服务器，直至找到包含所需记录的权威 DNS 服务器。然后，权威 DNS 服务器将发送 DNS\n响应报文回到发起查询的本地 DNS 服务器，最终返回给计算机。\n\nDNS 报文的格式遵循特定的协议标准，其中包含头部信息和查询/响应部分，用于描述域名查询和响应的详细信息。\n\n总结：DNS 记录是存储在 DNS 服务器上的域名相关信息，而 DNS 报文是在 DNS 查询和响应之间传输的数据格式。通过组合使用这两个概念，DNS\n系统能够为我们提供域名解析和资源定位的功能。\n\nQ：常见的HTTP请求方法\n\nA：HTTP（超文本传输协议）定义了多种方法或动词，用于指定要对资源执行的所需操作。 这些方法用在 HTTP 请求-响应周期的请求部分。 最常见的 HTTP\n方法是：\n\n 1. GET：用于从服务器检索数据。 服务器在响应正文中使用请求的数据进行响应。 GET 请求不应对服务器产生任何副作用，这意味着它们不应修改数据。\n 2. POST：用于将需要处理的数据提交到指定的资源。 它通常用于在服务器上创建新资源或提交表单数据。 POST\n    请求可能会对服务器产生副作用，例如创建或更新数据。\n 3. PUT：用于更新服务器上的资源。 它指定资源的 URI（统一资源标识符）并在请求正文中提供资源的新表示形式。\n 4. DELETE：用于请求从给定 URI 标识的服务器中删除资源。\n 5. PATCH：与PUT类似，但它只更新资源的指定字段，而不是替换整个资源。\n 6. HEAD：与 GET 类似，但只返回响应头，不返回响应体。 它对于在实际检索资源之前检查元数据（例如，内容类型、内容长度）很有用。\n 7. OPTIONS：用于请求有关目标资源可用的通信选项的信息。 它有助于确定服务器支持哪些 HTTP 方法和标头。\n 8. TRACE：主要用于诊断目的。 它回显收到的请求，允许客户端查看哪些中间服务器修改了请求。\n 9. CONNECT：主要用于通过代理服务器建立到资源的网络连接。 它通常在 HTTPS 协议上下文中用于创建隧道。\n\n请注意，并非所有 Web 服务器和应用程序都支持所有这些方法，并且它们的使用可能会根据应用程序的设计和安全考虑因素而有所不同。 安全方法（GET 和\nHEAD）通常用于只读操作，而其他方法则用于修改服务器上的资源或与服务器上的资源交互。\n\nQ:GET和POST的区别\n\nA:GET 和 POST 是用于客户端-服务器通信的两种最常见的 HTTP 方法。 它们具有不同的用途和特征，了解它们的差异对于在 Web\n应用程序中正确使用至关重要。\n\n 1. 目的：\n    * GET：GET 方法主要用于从服务器检索数据。 它将参数附加到 URL 的查询字符串中，并且对用户可见。 它通常用于只读操作，对同一 URL 的多个\n      GET 请求不应该对服务器产生任何副作用。\n    * POST：POST方法用于向服务器提交数据，通常用于创建或更新服务器上的资源。 它在请求正文中发送数据，使其更适合不应在 URL\n      中公开的敏感数据或大数据。\n 2. 数据可见性：\n    * GET：通过 GET 请求发送的数据在 URL 的查询字符串中可见。 这意味着密码或个人身份数据等敏感信息不应包含在 GET\n      请求中，因为这些信息可以在浏览器历史记录、服务器日志中轻松查看，并且可以添加书签。\n    * POST：通过 POST 请求发送的数据在 URL 中不可见，这使其成为传递敏感信息的更安全的方法。\n 3. 数据长度：\n    * GET：由于数据附加在 URL 上，因此可以发送的数据长度有限制。 不同的浏览器和服务器有不同的限制，但通常建议保持数据简短并在几千字节以内。\n    * POST：作为请求正文的一部分，POST 请求可以处理大量数据。 该限制通常远高于 GET 请求的限制，从而允许传输更大的有效负载。\n 4. 缓存：\n    * GET：浏览器可以缓存 GET 请求，从而使对同一 URL 的后续请求更快，因为可以重用缓存的响应。\n      但是，这意味着缓存的数据可能并不总是反映服务器上的最新信息。\n    * POST：POST请求默认不被缓存，这样可以保证数据始终发送到服务器，并且服务器可以对数据进行相应的处理。\n 5. 幂等性：\n    * GET：GET 请求被认为是幂等的，这意味着多次发出相同的 GET 请求将与发出一次具有相同的效果。 它不应改变服务器的状态或产生任何副作用。\n    * POST：POST 请求不是幂等的，多次发出相同的请求可能会导致服务器上同一资源的多次创建或更新。\n\n总之，使用 GET 进行安全、只读操作，使用 POST 进行涉及数据提交或修改的操作，尤其是在处理敏感或大数据时。\n\nQ:POST和PUT的区别\n\nA:POST和PUT是两种HTTP方法，用于在Web应用程序中向服务器提交数据或更新资源。它们之间的主要区别如下：\n\n 1. 目的：\n    * POST：用于向服务器提交新数据，通常用于创建新资源。\n    * PUT：用于向服务器更新已有资源或创建新资源。PUT被认为是幂等的，这意味着多次对同一资源的PUT操作不会导致不同的结果。\n 2. 幂等性：\n    * POST：不是幂等的。多次对同一资源的POST请求可能会导致服务器创建多个相同的资源副本。\n    * PUT：是幂等的。多次对同一资源的PUT请求不会导致重复创建或更改，其结果保持一致。\n 3. 数据传递：\n    * POST：通常将数据作为请求的主体（payload）传递，可以用于创建资源或提交表单数据。\n    * PUT：也将数据作为请求的主体传递，但通常用于更新现有资源。\n 4. URL使用：\n    * POST：通常在URL中指定目标资源的集合，而不是具体的资源。例如：POST /items表示在/items集合中创建一个新的资源。\n    * PUT：URL通常指定要更新的特定资源。例如：PUT /items/123表示更新ID为123的/items资源。\n 5. 安全性：\n    * POST：不是安全的方法，因为它可能会导致新资源的创建，对服务器状态产生影响。\n    * PUT：不是安全的方法，因为它可能会更改或创建资源。\n\n总结：\n\n * 使用POST时，通常是在服务器上创建新资源或处理需要提交到服务器的表单数据。\n * 使用PUT时，通常是在服务器上更新现有资源或者创建新资源，同时在已知资源的情况下也可以用于创建新资源。\n\n在设计RESTful API时，正确使用这些HTTP方法是非常重要的，因为它们有助于确保服务器端行为的一致性和可预测性。\n\nQ:介绍HTTP请求方法的OPTION方法及其使用场景\n\nA:HTTP的OPTIONS方法是一种请求方法，它用于向服务器查询特定资源支持的各种请求方法。该方法不会对服务器资源产生实际的影响，而是用于获取有关服务器资源的信息。\n\n当客户端发送一个OPTIONS请求时，服务器将会返回包含允许的HTTP方法的列表，以及其他相关的信息，如允许的请求头部、认证要求等等。这样，客户端就可以在实际发送其他请求之前，了解服务器支持哪些方法和配置，从而进行适当的请求。\n\n使用场景：\n\n 1. 支持跨域资源共享（CORS）：当浏览器使用XMLHttpRequest或Fetch\n    API等方式跨域请求资源时，会先发送一个OPTIONS请求给服务器，询问服务器是否支持跨域请求。服务器通过OPTIONS请求返回相应的CORS头部信息，以决定是否允许该跨域请求。\n 2. 了解服务器支持的请求方法：OPTIONS方法可以用于在不发送其他请求之前，查询服务器对资源支持的请求方法。这对于了解服务器配置和限制很有用。\n 3. 服务发现：在一些RESTful\n    API中，服务器可能提供服务发现功能，客户端可以通过OPTIONS方法来获取API的信息，包括可用的资源、支持的方法和相关的URL等。\n 4. API文档生成：在API文档自动生成的过程中，可以使用OPTIONS方法来探测API中可用的资源和方法，然后将其整理为文档供开发者查阅。\n\n总之，OPTIONS方法是一个用于探测服务器资源支持情况的查询工具，通过发送OPTIONS请求，可以获取服务器对资源的配置信息，进而更好地与服务器进行交互。\n\nQ：HTTP常见的请求头和响应头\n\nA：HTTP (Hypertext Transfer Protocol) 是一种用于传输数据的协议，它在客户端和服务器之间进行通信。HTTP\n请求和响应都包含一系列的请求头和响应头，这些头部提供了关于请求或响应的信息。下面是一些常见的 HTTP 请求头和响应头：\n\n常见的HTTP请求头：\n\n 1. User-Agent: 标识发送请求的用户代理（浏览器、应用程序等）的信息，服务器可以根据此信息进行适当的响应。\n 2. Accept: 告诉服务器客户端可以接受的内容类型（MIME 类型），通常用于请求特定的文件格式，如图片、视频等。\n 3. Content-Type: 定义请求体中发送数据的类型（MIME 类型），告诉服务器如何解析请求的主体部分。\n 4. Authorization: 用于在请求中发送用户的身份验证凭据，如用户名和密码，通常用于进行基本认证或 Bearer Token 认证。\n 5. Cookie: 用于在请求中发送保存在客户端的 Cookie 数据，服务器可以根据其中的信息进行用户跟踪和状态管理。\n 6. Referer: 指示当前请求是从哪个页面或URL链接过来的，用于追踪请求来源。\n 7. Host: 指定请求的主机名，用于虚拟主机的访问，即在一个服务器上托管多个网站。\n 8. Origin: 表示请求的来源，主要用于跨站点请求防伪 (CSRF)。\n\n常见的HTTP响应头：\n\n 1. Content-Type: 定义响应主体中数据的类型（MIME 类型），告诉客户端如何解析响应的内容。\n 2. Content-Length: 指示响应主体的长度，用于确定数据的传输结束点。\n 3. Server: 表明响应的服务器名称和版本。\n 4. Set-Cookie: 用于在响应中设置 Cookie 数据，将数据保存在客户端。\n 5. Location: 通常与状态码 3xx 一起使用，用于重定向到新的URL。\n 6. Cache-Control: 指定响应的缓存策略，如缓存时间、是否允许缓存等。\n 7. Expires: 指定响应的过期时间，用于控制缓存时长。\n 8. Access-Control-Allow-Origin: 用于跨域请求，指定哪些域名可以访问该资源。\n\n这只是一小部分常见的HTTP请求头和响应头，HTTP 协议有许多其他头部，用于传递各种不同的信息，具体的使用取决于应用程序的需求和场景。\n\nQ:HTTP状态码304\n\nA:HTTP状态码304表示\"未修改\"（Not\nModified）。它是HTTP协议中的一个状态码，用于指示客户端发送了一个条件性请求，但服务器判断所请求的资源在上次请求之后没有修改，因此可以直接使用缓存的版本，无需返回实际的资源内容。\n\n当客户端向服务器发送一个GET请求（通常是带有条件头部，如If-Modified-Since或If-None-Match）时，服务器会检查该请求所对应的资源是否有过修改。如果服务器发现资源没有修改，它会返回状态码304\nNot Modified，而不是返回200 OK和资源的实际内容。这样，客户端就可以继续使用缓存的版本，节省了网络带宽和服务器的处理开销。\n\n状态码304的响应中通常不包含实际的资源内容，而是在响应头中包含一些与缓存相关的信息，例如新的过期时间和ETag（资源的标识符），这些信息有助于客户端在未来的请求中进一步优化缓存机制。\n\n总结一下，HTTP状态码304表示资源未修改，客户端可以继续使用缓存的版本而无需重新下载该资源。\n\nQ:HTTP1.0和HTTP1.1的区别\n\nA：HTTP（超文本传输协议）是一种用于通过互联网传输数据的协议，通常用于访问网站。 HTTP 经历了多个版本，其中最重要的两个版本是 HTTP/1.0 和\nHTTP/1.1。 以下是 HTTP/1.0 和 HTTP/1.1 之间的主要区别：\n\n 1. 持久连接：\n    * HTTP/1.0：默认情况下，每个 HTTP 请求/响应都是使用单独的连接进行的。 这意味着每次请求后，连接都会关闭，并为下一个请求建立新连接。\n    * HTTP/1.1：引入了持久连接的概念，也称为保活连接。 使用 HTTP/1.1，可以通过同一 TCP 连接发送和接收多个请求和响应。\n      这有助于减少为每个请求建立和关闭连接的开销，从而加快具有多个资源的网站的加载时间。\n 2. 流水线：\n    * HTTP/1.0：不支持请求管道。 这意味着客户端无法在不等待响应的情况下通过单个连接发送多个请求。\n    * HTTP/1.1：引入了请求管道的概念，允许客户端发送多个请求而无需等待相应的响应。 这有助于提高连接的整体效率并减少延迟。\n 3. 主机头：\n    * HTTP/1.0：请求中未包含主机标头。 不直接支持虚拟主机（在同一 IP 地址上托管多个网站）。\n    * HTTP/1.1：在每个请求中强制使用 Host 标头。 这使得 Web 服务器能够区分同一 IP\n      地址上的不同虚拟主机，并将请求正确路由到适当的网站。\n 4. 缓存：\n    * HTTP/1.0：对缓存的支持有限，并且缓存行为在不同服务器和客户端之间的实现不一致。\n    * HTTP/1.1：引入了更强大的缓存机制。\n      它添加了缓存控制标头，例如“Cache-Control”和“ETag”，允许服务器向客户端清楚地传达缓存指令，从而提高了缓存效率。\n 5. 分块传输编码：\n    * HTTP/1.0：不支持分块传输编码，这是一种在不提前指定内容长度的情况下以块的形式发送数据的方式。\n    * HTTP/1.1：增加了对分块传输编码的支持，能够高效传输大量数据和动态内容。\n 6. 范围要求：\n    * HTTP/1.0：不支持部分或范围请求。 如果您只想下载文件的一部分，则必须获取整个文件。\n    * HTTP/1.1：引入了对范围请求的支持，允许客户端请求资源的特定部分，这对于恢复中断的下载和优化网络使用特别有用。\n\nHTTP/1.1 相对于 HTTP/1.0 带来了一些改进，主要集中在性能、效率以及对现代 Web 应用程序的更好支持。 然而，随着 HTTP/2 和\nHTTP/3 的出现，在性能、多路复用和安全性方面取得了更显着的进步。\n\nQ：HTTP1.1和HTTP2.0的区别\n\nA：HTTP/1.1 和 HTTP/2.0 是超文本传输协议 (HTTP) 的两个版本，用于客户端（例如 Web 浏览器）和 Web 服务器之间的通信。\n以下是两个版本之间的一些主要区别：\n\n 1. 二进制与文本协议 ：\n    * HTTP/1.1 是基于文本的协议，这意味着客户端和服务器之间发送的标头和数据采用人类可读的格式。\n      这使开发人员可以轻松检查通信，但由于文本冗长，可能会导致更大的数据传输。\n    * 另一方面，HTTP/2.0 使用二进制帧，这意味着标头和数据以二进制格式发送。 这样可以实现更高效、更紧凑的数据传输，减少延迟并提高性能。\n 2. 多路复用 ：\n    * 在 HTTP/1.1 中，从客户端到服务器的多个请求通常通过单个连接顺序处理。 这可能会导致“队头阻塞”，即缓慢加载的资源会延迟后续资源的加载。\n    * HTTP/2.0 引入了多路复用，允许通过单个连接同时发送和接收多个请求和响应。 这可以实现并行性并消除队头阻塞问题，从而缩短页面加载时间。\n 3. 服务器推送 ：\n    * HTTP/1.1 要求客户端显式请求呈现网页所需的每个资源。 如果服务器想要发送未请求的其他资源，则必须等待客户端请求它们。\n    * HTTP/2.0支持服务器推送，服务器无需显式请求即可主动推送资源给客户端。\n      这可以导致更快的页面加载，因为服务器可以预测客户端的需求并提前发送资源。\n 4. 标头压缩 ：\n    * HTTP/1.1 标头随每个请求和响应一起发送，这可能会导致不必要的开销，特别是在重复类似标头时。\n    * HTTP/2.0 使用标头压缩，可以减小标头的大小，优化数据传输并进一步提高性能。\n 5. 连接管理 ：\n    * HTTP/1.1 需要多个连接（通常限制为六个）来并行加载资源，这可能效率低下。\n    * HTTP/2.0 每个客户端和域仅需要一个连接，从而更好地利用资源并简化连接管理。\n 6. 优先顺序 ：\n    * HTTP/2.0 允许客户端为各个资源分配优先级，表明它们的重要性，并允许服务器首先提供更高优先级的资源。\n\n总而言之，HTTP/2.0 旨在解决 HTTP/1.1 的局限性，特别是在性能、延迟和资源加载效率方面。 它对其前身进行了重大改进，使网页浏览更快、更高效。\n然而，值得注意的是，HTTP/2.0 的采用需要 Web 服务器和客户端（例如 Web 浏览器）的支持，尽管大多数现代浏览器和服务器现在都支持它。\n\nQ：为什么HTTP的GET方法有长度限制？\n\nA：HTTP 的 GET 方法对 URL 的长度有限制，这最终会影响单个请求中可以发送的数据量。 此限制是由多种因素造成的：\n\n 1. URL 长度限制：HTTP 协议没有对 URL 的长度定义具体限制。 相反，它由各个网络浏览器和服务器来确定。 然而，实际上，出于实用和安全原因，许多\n    Web 浏览器和服务器都规定了最大 URL 长度。 实际限制可能因浏览器、服务器软件和其他因素而异。\n 2. 服务器和代理限制：Web 服务器和代理也对 URL 长度施加了自己的限制。 例如，Apache 或 Nginx 等服务器软件可能具有限制请求中允许的最大\n    URL 长度的配置设置。\n 3. 安全问题：限制 URL 的长度有助于防止某些类型的攻击，例如缓冲区溢出攻击和拒绝服务 (DoS) 攻击。\n    通过施加最大长度，服务器可以更有效地分配资源并降低滥用风险。\n 4. 编码开销：在 HTTP 请求中，URL 中的特殊字符和空格必须使用百分比编码（也称为 URL 编码）进行编码。\n    此编码引入了额外的字符来表示特殊字符，这会增加 URL 的整体长度。\n 5. 实际注意事项：长 URL 可能难以管理、共享和添加书签。 用户在复制或粘贴长 URL 时可能会遇到问题，并且某些网站可能对其接受的 URL 长度有限制。\n\n由于这些原因，HTTP 的 GET 方法对请求中可以使用的 URL 的长度有固有的限制。 当需要发送大量数据时，通常使用 HTTP POST 方法作为替代方法。\nPOST 请求可以在请求正文中包含数据，与 GET 请求相比，允许更大的有效负载。\n\nQ：HTTP的keep-alive\n\nA：HTTP Keep-Alive，也称为持久连接或 HTTP 持久连接，是 HTTP 协议的一项功能，允许通过单个\nTCP（传输控制协议）连接发送和接收多个请求和响应。 默认情况下，HTTP 是无状态协议，这意味着客户端（例如 Web\n浏览器）和服务器之间的每个请求和响应独立于任何先前或后续请求和响应。\n\n使用 HTTP Keep-Alive，在初始请求和响应完成后，TCP 连接保持打开状态，允许后续请求重用同一连接，而不是为每个后续 HTTP\n请求建立一个新连接。 这可以提供几个好处：\n\n 1. 减少延迟：由于连接已经建立，后续请求可以立即发送，而不会产生建立新 TCP 连接的开销。 这减少了请求-响应周期所花费的时间。\n 2. 连接重用：对多个请求重用同一个连接可以使服务器处理更多请求，而无需为每个请求建立新连接。\n    这对于具有许多单独获取的资源（例如图像、脚本、样式表）的网站尤其有利。\n 3. 连接限制：HTTP 服务器可以限制它们接受的并发连接数。 通过使用\n    Keep-Alive，客户端可以通过同一连接发出多个请求，而不会超出服务器的连接限制。\n\n要使用 Keep-Alive，客户端在 HTTP 请求中发送一个附加标头：\n\nConnection: keep-alive\n\n\n服务器可以使用相同的标头进行响应，以指示它支持此特定请求的持久连接。 如果标头不存在或设置为“关闭”（例如， Connection:\nclose)，这意味着服务器指示在发送当前响应后应关闭连接。\n\nHTTP/1.1 是 2021 年 9 月我的知识截止时的当前版本，它使持久连接成为默认行为，这意味着除非另有说明，否则隐式假定保持活动状态。\n\n需要注意的是，随着 HTTP/2 的引入，持久连接是默认的，并且不再需要“Connection: keep-alive”标头。 HTTP/2\n引入了多路复用，允许在单个连接上交错多个请求和响应，从而比以前的版本进一步提高了性能。\n\nHTTP Keep-Alive 仍然是 HTTP 协议发展过程中的一个重要历史概念，但它的显式使用在使用 HTTP/2 的现代 HTTP 实现中不太相关。\n\nQ：HTTP的请求报文 结构\n\nA：HTTP（Hypertext Transfer\nProtocol）的请求报文是客户端向服务器发送请求的格式。它包含了客户端希望执行的操作以及相应的资源信息。下面是HTTP请求报文的结构：\n\n 1. 请求行（Request Line）： 请求行包含了请求的方法（GET、POST、PUT、DELETE等），请求的目标URL以及HTTP协议版本。\n    \n    格式： <Method> <URL> <HTTP Version>\n    \n    示例： GET /example/page.html HTTP/1.1\n\n 2. 请求头部（Request Headers）：\n    请求头部包含了关于请求的附加信息，如用户代理信息、接受的内容类型等。每个头部字段都以名称和值的形式出现，中间用冒号分隔。\n    \n    示例：\n\nHost: www.example.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)\nAccept-Language: en-US\n\n\n空行： 请求头部结束后是一个空行，用于分隔头部和请求体。\n\n请求体（Request Body）： 请求体可选，通常在POST请求中包含需要向服务器提交的数据。比如表单数据或JSON格式的数据。\n\n示例：\n\n 1. POST /example/form.php HTTP/1.1\n    Host: www.example.com\n    Content-Type: application/x-www-form-urlencoded\n    \n    username=johndoe&password=secretpassword\n    \n\n总结：HTTP请求报文是由请求行、请求头部、空行和请求体组成的，其中请求行指定请求方法、目标URL和HTTP版本，请求头部包含附加信息，空行用于分隔头部和请求体，请求体包含请求的数据（对于POST等请求）。\n\nQ：HTTP的响应报文结构\n\nA：HTTP（Hypertext Transfer\nProtocol）的响应报文是服务器向客户端返回的数据格式，用于响应客户端发起的HTTP请求。HTTP响应报文的结构由三个主要部分组成：状态行、消息报头（头部），以及响应正文。\n\n以下是HTTP响应报文的结构：\n\n 1. 状态行（Status Line）：\n    \n    * 格式：HTTP版本 状态码 状态码描述\n    * 示例：HTTP/1.1 200 OK\n    * 解释：\n      * HTTP版本：HTTP协议的版本号，如HTTP/1.1。\n      * 状态码：一个三位数字，用于表示请求处理的结果状态。常见的状态码有：\n        * 200 OK：请求成功。\n        * 404 Not Found：请求的资源未找到。\n        * 500 Internal Server Error：服务器端发生错误。\n        * 等等，详细的状态码信息可以在HTTP规范中找到。\n\n 2. 消息报头（Header）：\n    \n    * 格式：头字段名: 值\n    * 示例：Content-Type: text/html\n    * 解释：\n      * 头字段名：用于描述报文的各种属性，如Content-Type、Content-Length、Date等。\n      * 值：头字段对应的值，用于描述头字段的具体信息。\n    \n    HTTP报头包含了各种元信息，用于告知客户端有关响应的详细信息，例如：\n    \n    * Content-Type：指示响应正文的媒体类型（MIME类型），比如text/html、application/json等。\n    * Content-Length：指示响应正文的长度，以字节为单位。\n    * Server：指示服务器软件的名称和版本号。\n    * Date：指示服务器发送响应的日期和时间等。\n\n 3. 响应正文（Response Body）：\n    \n    * 格式：实际的响应数据，可以是HTML文档、JSON数据、图像文件等，根据Content-Type来解析内容类型。\n\n请注意，HTTP响应报文中的每个部分都以CRLF（回车换行）作为换行符，即/r/n。\n\n下面是一个完整的示例：\n\nphp\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 123\nDate: Wed， 26 Jul 2023 12:34:56 GMT\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Example</title>\n</head>\n<body>\n    <h1>Hello， World!</h1>\n</body>\n</html>\n\n\n在上面的例子中，状态行指示响应为HTTP/1.1版本，状态码为200（OK），状态码描述为\"OK\"。接下来是消息报头，指示了Content-Type为text/html，Content-Length为123字节，以及服务器发送响应的日期和时间。最后是响应正文，包含一个简单的HTML页面。\n\n这就是HTTP响应报文的基本结构，它允许服务器向客户端提供所请求的数据并提供一些元信息用于解释响应。","frontMatter":{"title":"网络协议withchatGPT","index":5,"publishTime":"2023/7/25"}},{"name":"HTML","path":"学习笔记/HTML.html","texts":"","frontMatter":{"title":"HTML"}},{"name":"HTMLwithchatGPT","path":"学习笔记/HTMLwithchatGPT.html","texts":"Q:src和href的区别\n\nA:src和href是HTML标签中的两个常用属性，它们用于指定外部资源的来源，但在不同的标签上有不同的用途。\n\n 1. src (source): src 是用于指定外部资源（通常是媒体文件，如图片、音频、视频等）的地址。它通常出现在以下标签中：\n    \n    * <img>: 用于显示图像，src 属性指定图像文件的URL。\n    * <script>: 用于加载脚本文件，src 属性指定JavaScript文件的URL。\n    * <iframe>: 用于嵌入其他网页，src 属性指定嵌入网页的URL。\n    * <audio>: 用于播放音频，src 属性指定音频文件的URL。\n    * <video>: 用于播放视频，src 属性指定视频文件的URL。\n    \n    例如：\n\n<img src=\"image.jpg\" alt=\"Image\">\n<script src=\"script.js\"></script>\n<iframe src=\"https://www.example.com\"></iframe>\n<audio src=\"audio.mp3\" controls></audio>\n<video src=\"video.mp4\" controls></video>\n\n\nhref (hypertext reference): href 用于指定超链接的目标地址。它通常出现在以下标签中：\n\n * <a>: 用于创建超链接，href 属性指定链接的URL。\n * <link>: 用于链接外部资源，如CSS样式表，href 属性指定资源的URL。\n * <base>: 用于设置页面上所有相对URL的基准地址，href 属性指定基准URL。\n\n例如：\n\n 1. <a href=\"https://www.example.com\">Visit Example Website</a>\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <base href=\"https://www.example.com/\">\n    \n\n总结：\n\n * src 用于在标签中指定外部资源的地址，主要用于媒体文件和脚本文件。\n * href 用于在标签中指定超链接的目标地址，主要用于创建超链接和链接外部资源，如CSS样式表。\n\nQ:HTML语义化标签的意义\n\nA:HTML语义化标签是指在编写HTML代码时，使用合适的标签来正确地描述文档结构和内容，使得页面的结构和意义更加清晰明了。语义化标签的意义体现在以下几个方面：\n\n 1. 提升可访问性（Accessibility）：语义化标签可以使网页更易于被屏幕阅读器等辅助技术解析和理解，使得残障用户也能够方便地访问和理解网页内容。良好的可访问性可以让更多的用户能够浏览网站，提升网站的包容性和可及性。\n 2. 改善搜索引擎优化（SEO）：搜索引擎对语义化标签更为友好，可以更准确地理解页面的内容结构，有助于提高网站在搜索结果中的排名。使用正确的语义化标签可以使搜索引擎更容易索引和解读页面内容，从而增加网站的曝光和流量。\n 3. 方便开发和维护：语义化标签可以使HTML结构更清晰，易于理解和维护。开发人员在理解页面结构时，不需要深入了解具体样式和脚本的实现细节，从而降低代码维护的复杂性和成本。\n 4. 提升互操作性：语义化标签有助于页面内容在不同设备和平台上的良好显示和解释。无论是在桌面浏览器、移动设备还是其他网络应用中，都能更好地展现一致的页面结构和内容。\n 5. 未来兼容性：随着Web技术的不断发展，新的HTML标签和元素可能会出现，而语义化标签则为未来新标签的兼容性奠定了基础。合理地使用语义化标签，可以让网页更具适应性和可持续性。\n\n一些常见的HTML语义化标签包括<header>、<nav>、<main>、<article>、<section>、<aside>、<footer>等。使用这些标签可以更准确地表达网页的结构和内容，使得页面更具意义、更易于维护，并且在搜索引擎和辅助技术中表现更出色。\n\nQ:行内元素，块级元素，空元素\n\nA:行内元素（Inline\nElements）：行内元素是指在HTML文档中默认情况下，它们会按照从左到右的方式在一行内显示，不会独占一行。行内元素通常用于包裹文本片段或嵌套在块级元素中，常见的行内元素包括<span>、<a>、<strong>、<em>、<img>、<input>等。行内元素的宽度由其内容决定，无法设置宽度和高度，也不会产生换行。\n\n块级元素（Block-level\nElements）：块级元素是指在HTML文档中，它们会独占一行显示，并且会自动在其前后产生一些空白空间，使其与其他元素分隔开。块级元素通常用于构建页面的主要结构和布局，常见的块级元素包括<div>、<p>、<h1>-<h6>、<ul>、<ol>、<li>等。块级元素的宽度默认是其父元素的100%，可以设置宽度和高度，并且会产生换行。\n\n空元素（Void\nElements）：空元素是指没有内容的HTML元素，它们在标签中没有闭合标签。这类元素通常用于插入非文本内容或者不需要包裹内容的情况。常见的空元素包括<br>、<hr>、<img>、<input>、<meta>等。在HTML中，空元素可以用自闭合标签表示，如<br/>，尽管在传统的HTML中也可以使用单独的开启标签，如<br>，但在XML和XHTML中必须使用自闭合标签。\n\n需要注意的是，HTML5中，块级元素内也可以包含行内元素，而行内元素内不能直接包含块级元素。另外，CSS样式和布局也会对这些元素的行为产生影响，比如使用display属性可以将某些元素从默认的块级元素变为行内元素，或者相反。\n\nQ:<script >和<script defer>和<script async>\n\nA:\n\nscript, script defer， 和 script async是将 JavaScript 代码包含在 HTML 文档中的三种不同方法。\n每个都有特定的目的和行为。 让我们逐一探讨：\n\n 1. <script>: 标准 <script>标签用于在 HTML 文档中包含 JavaScript 代码。 当浏览器遇到此标记时，它会停止解析其余的\n    HTML 内容，获取 JavaScript 文件（如果代码位于外部文件中），执行它，然后继续解析其余的 HTML 内容。\n    脚本的执行是阻塞的，这意味着它将暂停 HTML 解析过程，直到脚本完全加载并执行。\n\n例子：\n\nhtml \n<script src=\"path/to/script.js\"></script>\n\n\n 1. <script defer>: 这 <script defer>属性还包括 HTML 文档中的 JavaScript 代码，但行为不同。\n    当浏览器遇到此标记时，它将继续解析其余的 HTML 内容，即使脚本仍在加载或尚未执行。 该脚本将在 HTML 解析完成后执行。\n    多个延迟脚本将按照它们在文档中出现的顺序执行。 这对于可以异步加载但需要按顺序执行的非必需脚本很有用。\n\n例子：\n\nhtml \n<script defer src=\"path/to/script.js\"></script>\n\n\n 1. <script async>: 这 <script async>属性用于异步加载和执行 JavaScript 代码。 像\n    defer属性，浏览器将在获取脚本的同时继续解析 HTML 内容。 然而，一旦脚本被下载，它就会被执行，并且这种情况可以在任何时候发生，甚至在 HTML\n    解析完成之前。 脚本与 async属性应该用于不依赖于其他脚本或 HTML 初始结构的独立任务。\n\n例子：\n\nhtml \n<script async src=\"path/to/script.js\"></script>\n\n\n总之：\n\n * 使用 <script>对于需要同步加载和执行的脚本，可能会影响页面的呈现，直到它们完成。\n * 使用 <script defer>对于应该在 HTML 解析完成后执行的脚本，按照它们出现的顺序执行，但不会阻止渲染。\n * 使用 <script async>适用于下载后即可独立执行的脚本，无需等待 HTML 的其余部分加载。\n\nQ:HTML中的canvas和SVG\n\nA:HTML中的canvas和SVG是两种用于绘制图形的标签，它们可以在网页上创建丰富的图形和动画效果。\n\n 1. Canvas: canvas\n    是一个HTML5元素，它提供了一个类似画布的区域，允许您通过JavaScript在其中绘制图形。使用canvas，您可以在网页上创建复杂的2D图形和动画。绘制过程通过JavaScript来完成，通过调用Canvas\n    API中的函数来操作画布上的像素。\n\n特点：\n\n * 像素级别的绘制：绘制在canvas上是像素级别的，因此您可以实现非常细致的控制。\n * 动态性：由于使用JavaScript进行绘制，因此可以在画布上实时创建动画和交互效果。\n\n示例代码：\n\nhtml\n<canvas id=\"myCanvas\" width=\"400\" height=\"200\"></canvas>\njavascript\nconst canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\n// 绘制一个矩形\nctx.fillStyle = 'blue';\nctx.fillRect(50, 50, 100, 100);\n\n\n 1. SVG: SVG代表可缩放矢量图形（Scalable Vector\n    Graphics）。它是一种使用XML语法描述2D图形的格式。与canvas不同，SVG是一个独立的XML元素，因此可以直接在HTML文档中嵌入。\n\n特点：\n\n * 矢量图形：SVG图形是矢量图形，它们由数学方程式描述而不是像素，因此可以在任何尺寸下缩放而不会失真。\n * 声明性：SVG使用XML来描述图形，因此代码本身对图形的外观和结构进行了明确的声明。\n\n示例代码：\n\nhtml\n<svg width=\"400\" height=\"200\">\n  <rect x=\"50\" y=\"50\" width=\"100\" height=\"100\" fill=\"blue\" />\n</svg>\n\n\n选择使用Canvas还是SVG:\n\n * 使用canvas适合处理大量的像素级绘制和动画，例如游戏和交互式图表。\n * 使用SVG适合创建可缩放的图形，例如图标、矢量图形和数据可视化图表。\n\n需要根据具体的需求来选择使用哪种绘图技术。在某些情况下，两者也可以结合使用，通过在SVG上绘制一些静态元素，并使用canvas添加动态或复杂的效果。\n\nQ:HTML中的head标签\n\nA:在HTML中，<head>标签是位于文档的头部部分，用于包含文档的元数据和其他重要的信息，而不是显示在页面上的内容。<head>标签通常位于HTML文档的开始处，在<html>标签之后，<body>标签之前。\n\n下面是一些常见的在<head>标签中使用的元素和用途：\n\n 1. <title>：定义网页的标题，显示在浏览器的标题栏或选项卡上。这也是搜索引擎结果中显示的标题。\n\nhtml\n<head>\n  <title>My Website</title>\n</head>\n\n\n 1. <meta>：提供文档的元数据，例如字符集、作者、关键词等。其中最常用的是指定字符集编码，以确保正确显示特殊字符。\n\nhtml\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"author\" content=\"John Doe\">\n  <meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\n</head>\n\n\n 1. <link>：用于引入外部资源，通常用于链接CSS样式表。\n\nhtml\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n\n 1. <script>：用于引入JavaScript代码，可以放在<head>标签内或文档末尾的<body>标签内。\n\nhtml\n<head>\n  <script src=\"script.js\"></script>\n</head>\n\n\n 1. <base>：指定页面上所有相对URL的基本URL地址。\n\nhtml\n<head>\n  <base href=\"https://www.example.com/\">\n</head>\n\n\n 1. <style>：用于在HTML文档中嵌入CSS样式。\n\nhtml\n<head>\n  <style>\n    body {\n      background-color: lightgray;\n    }\n  </style>\n</head>\n\n\n总的来说，<head>标签用于存放对整个文档的定义和配置，而<body>标签用于存放显示在页面上的实际内容。这种分离允许浏览器在加载和渲染页面时首先处理文档结构和元数据，然后再显示页面内容，从而提高用户体验并允许搜索引擎正确解析网页内容。\n\nQ:解释web worker\n\nA:Web\nWorker是一种浏览器中的JavaScript特性，它允许在后台线程中运行脚本，而不会影响主线程（通常是页面的UI线程）。在主线程上执行的JavaScript代码通常会阻塞UI渲染和用户交互，特别是当执行较长时间的计算或操作大量数据时。\n\nWeb Worker的出现解决了这个问题，因为它使得能够在后台运行脚本，不干扰主线程。这样，页面可以保持响应性，即使在执行复杂任务的同时。\n\nWeb Worker的主要特点包括：\n\n 1. 并行处理：Web Worker运行在独立的线程中，与主线程并行工作，从而充分利用了多核处理器的优势。\n 2. 无法访问DOM：Web\n    Worker在后台运行，因此不能直接访问页面的DOM元素、全局变量或执行页面相关的JavaScript代码。这是为了确保主线程和Worker线程之间的隔离性。\n 3. 通过消息传递进行通信：主线程和Web\n    Worker之间通过消息传递进行通信。主线程可以向Worker发送消息，Worker也可以向主线程发送消息。这样的通信是异步的，不会导致阻塞。\n 4. 无法访问某些API：由于Web\n    Worker无法访问DOM，所以它也不能访问window对象和document对象。此外，它也不能访问一些其他浏览器API，比如localStorage和sessionStorage等。\n\n使用Web Worker的一般步骤如下：\n\n 1. 创建Worker：在主线程中创建一个新的Web Worker，通过指定要执行的脚本文件或直接传递代码字符串来初始化Worker。\n 2. 启动Worker：Worker初始化后开始运行，它会在后台执行脚本任务。\n 3. 通过消息传递通信：主线程和Worker之间可以通过postMessage()方法互相发送消息，并通过onmessage事件处理程序接收消息。\n 4. 终止Worker：当不再需要Worker时，可以通过调用Worker.terminate()方法来终止Worker的运行。\n\nWeb Worker对于处理复杂计算、数据处理和网络请求等密集型任务非常有用。它可以改善Web应用程序的性能和用户体验，因为长时间运行的任务不会阻塞UI响应。","frontMatter":{"title":"HTMLwithchatGPT"}}]},{"tableName":"说明文档","blogList":[{"name":"ReadMe","path":"说明文档/ReadMe.html","texts":"介绍\n\n这是个静态资源个人博客网站，也就是没有后端的网站。优点是不需要后端就可以创建，你可以把这个部署到github\npage上，缺点就是没有一般博客网站的功能，例如用户接口、互动之类的。这种网站一般用于纯粹存放文档，也就是个人博客。\n\n\n使用\n\n1.content文件夹就是存放你编写的博客的地方。具体存放文档详细的使用在请看项目网站。\n\n2.然后输入如下命令(需要确保你安装了node.js)\n\nnpm install\nnpm run build\nnpm run preview\n\n\n\n部署\n\n你可以查阅这个网站了解如何部署https://cn.vitejs.dev/guide/static-deploy.html\n\n如果你是部署到github page上，只要clone这个项目然后修改vite.config.js文件的baseURL就可以。","frontMatter":{"title":"必读","publishTime":"2023/7/23","index":1,"tags":["说明"]}},{"name":"FileStorage","path":"说明文档/FileStorage.html","texts":"结构\n\ncontetn文件夹内部结构应该是这样的：\n\ncontent\n -assets\n   -image1.webp\n -table1\n   -assets\n     -image2.webp\n   -blog1.md\n   -blog2.md\n -table2\n   -blog3.md\n   -image3.webp\n\n\n具体规则是：\n\n1.content文件夹内部创建的文件夹将视作一个博客列表\n\n2.博客列表内部存放.md文件，禁止递归创建列表\n\n3.图片文件可以存放在content文件夹内部的任意位置，但是要确保图片的引用路径为绝对路径（D:/Workspace/myblog/content/main/assets/image1.webp）\n\n4.如果你使用typora，你可以在偏好设置-》图像-》插入图片时选择复制图片到./assets文件夹","frontMatter":{"title":"文件存储","publishTime":"2023/7/23","index":2,"tags":["说明"]}},{"name":"IMGTest","path":"说明文档/IMGTest.html","texts":"","frontMatter":{"title":"图片测试","publishTime":"2023/7/23","index":3,"tags":["说明"]}},{"name":"SetFrontMatter","path":"说明文档/SetFrontMatter.html","texts":"说明\n\n你已经注意到了一个文档的展现包括作者，标题，发布时间，tags以及内容，你可以通过在.md文件的开头编写Yaml-Front-Matter来编辑这些属性。\n\n\n格式\n\n例如这一篇文章的Yaml-Front-Matter:\n\ntitle: 文章属性标注\npublishTime: 2023/7/23\nindex: 4\ntags: \n  - 说明\n\n\n解释：\n\ntitle：文章的标题，如果没有设置则使用文件的名字作为标题\n\npublishTime: 发布时间（内部类型是字符串，你可以随便写个字符串作为时间），如果没有则显示“未知”\n\nindex：严格的数字，表示文章在列表的顺序是第几位（如果index不存在则按照文件名字排序）\n\ntags：字符串数组，在文章表示为标签，如果没有就不会显示","frontMatter":{"title":"文章属性标注","publishTime":"2023/7/23","index":4,"tags":["说明"]}},{"name":"Issues","path":"说明文档/Issues.html","texts":"功能：\n\n1.右边会展示副标题列表，点击滚动条跳转到对应位置\n\n2.更好的博客列表展示\n\n3.搜索（可以不管）\n\n问题：\n\n1.目前不能规定顺序对博客列表进行排序，默认按照名字排，因为没有什么文件规定博客列表的属性，这可能会产生一些困扰。\n\n2.如果你在content目录下创建任何文件夹，即使内部没有.md文件，系统还是会认为是一个博客列表\n\n3.卡顿问题","frontMatter":{"title":"功能的不足以及bug","publishTime":"2023/7/23","index":5,"tags":["说明"]}},{"name":"UseSuggest","path":"说明文档/UseSuggest.html","texts":"这里给出一些建议： 1.将图片转换成900kb以内的webp文件来缩减大小减少网络压力。","frontMatter":{"title":"使用建议","publishTime":"2023/7/23","index":6,"tags":["说明"]}}]}]